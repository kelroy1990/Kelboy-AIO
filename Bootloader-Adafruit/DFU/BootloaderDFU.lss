
BootloaderDFU.elf:     formato del fichero elf32-avr

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .data         0000005c  00800100  0001ed2a  00000dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2a  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080015c  0080015c  00000e1a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000315f  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb7  00000000  00000000  00004193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000156f  00000000  00000000  0000504a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  000065bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000156d  00000000  00000000  000069ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001762  00000000  00000000  00007f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000967b  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

0001e000 <__vectors>:
   1e000:	55 c0       	rjmp	.+170    	; 0x1e0ac <__ctors_end>
   1e002:	00 00       	nop
   1e004:	70 c0       	rjmp	.+224    	; 0x1e0e6 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	6e c0       	rjmp	.+220    	; 0x1e0e6 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	6c c0       	rjmp	.+216    	; 0x1e0e6 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	6a c0       	rjmp	.+212    	; 0x1e0e6 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	68 c0       	rjmp	.+208    	; 0x1e0e6 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	66 c0       	rjmp	.+204    	; 0x1e0e6 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	64 c0       	rjmp	.+200    	; 0x1e0e6 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	62 c0       	rjmp	.+196    	; 0x1e0e6 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	60 c0       	rjmp	.+192    	; 0x1e0e6 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	99 c4       	rjmp	.+2354   	; 0x1e95c <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	5c c0       	rjmp	.+184    	; 0x1e0e6 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	5a c0       	rjmp	.+180    	; 0x1e0e6 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	58 c0       	rjmp	.+176    	; 0x1e0e6 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	56 c0       	rjmp	.+172    	; 0x1e0e6 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	54 c0       	rjmp	.+168    	; 0x1e0e6 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	52 c0       	rjmp	.+164    	; 0x1e0e6 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	50 c0       	rjmp	.+160    	; 0x1e0e6 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	4e c0       	rjmp	.+156    	; 0x1e0e6 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	4c c0       	rjmp	.+152    	; 0x1e0e6 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	4a c0       	rjmp	.+148    	; 0x1e0e6 <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	48 c0       	rjmp	.+144    	; 0x1e0e6 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	46 c0       	rjmp	.+140    	; 0x1e0e6 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	44 c0       	rjmp	.+136    	; 0x1e0e6 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	42 c0       	rjmp	.+132    	; 0x1e0e6 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	40 c0       	rjmp	.+128    	; 0x1e0e6 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	3e c0       	rjmp	.+124    	; 0x1e0e6 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	3c c0       	rjmp	.+120    	; 0x1e0e6 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	3a c0       	rjmp	.+116    	; 0x1e0e6 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	38 c0       	rjmp	.+112    	; 0x1e0e6 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	36 c0       	rjmp	.+108    	; 0x1e0e6 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	34 c0       	rjmp	.+104    	; 0x1e0e6 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	32 c0       	rjmp	.+100    	; 0x1e0e6 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	30 c0       	rjmp	.+96     	; 0x1e0e6 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	2e c0       	rjmp	.+92     	; 0x1e0e6 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	2c c0       	rjmp	.+88     	; 0x1e0e6 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	2a c0       	rjmp	.+84     	; 0x1e0e6 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	28 c0       	rjmp	.+80     	; 0x1e0e6 <__bad_interrupt>
   1e096:	00 00       	nop
   1e098:	7f f5       	brid	.+94     	; 0x1e0f8 <DiscardFillerBytes+0x10>
   1e09a:	84 f5       	brge	.+96     	; 0x1e0fc <DiscardFillerBytes+0x14>
   1e09c:	09 f6       	brne	.-126    	; 0x1e020 <__vectors+0x20>
   1e09e:	84 f5       	brge	.+96     	; 0x1e100 <DiscardFillerBytes+0x18>
   1e0a0:	09 f6       	brne	.-126    	; 0x1e024 <__vectors+0x24>
   1e0a2:	88 f5       	brcc	.+98     	; 0x1e106 <DiscardFillerBytes+0x1e>
   1e0a4:	ad f5       	brhc	.+106    	; 0x1e110 <DiscardFillerBytes+0x28>
   1e0a6:	09 f6       	brne	.-126    	; 0x1e02a <__vectors+0x2a>
   1e0a8:	cd f5       	brhc	.+114    	; 0x1e11c <LoadStartEndAddresses>
   1e0aa:	df f5       	brid	.+118    	; 0x1e122 <LoadStartEndAddresses+0x6>

0001e0ac <__ctors_end>:
   1e0ac:	11 24       	eor	r1, r1
   1e0ae:	1f be       	out	0x3f, r1	; 63
   1e0b0:	cf ef       	ldi	r28, 0xFF	; 255
   1e0b2:	d0 e2       	ldi	r29, 0x20	; 32
   1e0b4:	de bf       	out	0x3e, r29	; 62
   1e0b6:	cd bf       	out	0x3d, r28	; 61

0001e0b8 <__do_copy_data>:
   1e0b8:	11 e0       	ldi	r17, 0x01	; 1
   1e0ba:	a0 e0       	ldi	r26, 0x00	; 0
   1e0bc:	b1 e0       	ldi	r27, 0x01	; 1
   1e0be:	ea e2       	ldi	r30, 0x2A	; 42
   1e0c0:	fd ee       	ldi	r31, 0xED	; 237
   1e0c2:	01 e0       	ldi	r16, 0x01	; 1
   1e0c4:	0b bf       	out	0x3b, r16	; 59
   1e0c6:	02 c0       	rjmp	.+4      	; 0x1e0cc <__do_copy_data+0x14>
   1e0c8:	07 90       	elpm	r0, Z+
   1e0ca:	0d 92       	st	X+, r0
   1e0cc:	ac 35       	cpi	r26, 0x5C	; 92
   1e0ce:	b1 07       	cpc	r27, r17
   1e0d0:	d9 f7       	brne	.-10     	; 0x1e0c8 <__do_copy_data+0x10>

0001e0d2 <__do_clear_bss>:
   1e0d2:	21 e0       	ldi	r18, 0x01	; 1
   1e0d4:	ac e5       	ldi	r26, 0x5C	; 92
   1e0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1e0d8:	01 c0       	rjmp	.+2      	; 0x1e0dc <.do_clear_bss_start>

0001e0da <.do_clear_bss_loop>:
   1e0da:	1d 92       	st	X+, r1

0001e0dc <.do_clear_bss_start>:
   1e0dc:	a9 37       	cpi	r26, 0x79	; 121
   1e0de:	b2 07       	cpc	r27, r18
   1e0e0:	e1 f7       	brne	.-8      	; 0x1e0da <.do_clear_bss_loop>
   1e0e2:	61 d1       	rcall	.+706    	; 0x1e3a6 <main>
   1e0e4:	20 c6       	rjmp	.+3136   	; 0x1ed26 <_exit>

0001e0e6 <__bad_interrupt>:
   1e0e6:	8c cf       	rjmp	.-232    	; 0x1e000 <__vectors>

0001e0e8 <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1e0e8:	88 23       	and	r24, r24
   1e0ea:	b9 f0       	breq	.+46     	; 0x1e11a <DiscardFillerBytes+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1e0ec:	20 91 f2 00 	lds	r18, 0x00F2
   1e0f0:	30 91 f3 00 	lds	r19, 0x00F3
	{
		if (!(Endpoint_BytesInEndpoint()))
   1e0f4:	23 2b       	or	r18, r19
   1e0f6:	69 f4       	brne	.+26     	; 0x1e112 <DiscardFillerBytes+0x2a>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e0f8:	90 91 e8 00 	lds	r25, 0x00E8
   1e0fc:	9b 7f       	andi	r25, 0xFB	; 251
   1e0fe:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e102:	90 91 e8 00 	lds	r25, 0x00E8
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
   1e106:	92 fd       	sbrc	r25, 2
   1e108:	06 c0       	rjmp	.+12     	; 0x1e116 <DiscardFillerBytes+0x2e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e10a:	9e b3       	in	r25, 0x1e	; 30
   1e10c:	91 11       	cpse	r25, r1
   1e10e:	f9 cf       	rjmp	.-14     	; 0x1e102 <DiscardFillerBytes+0x1a>
   1e110:	04 c0       	rjmp	.+8      	; 0x1e11a <DiscardFillerBytes+0x32>
			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_Byte(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
   1e112:	90 91 f1 00 	lds	r25, 0x00F1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1e116:	81 50       	subi	r24, 0x01	; 1
   1e118:	e7 cf       	rjmp	.-50     	; 0x1e0e8 <DiscardFillerBytes>
   1e11a:	08 95       	ret

0001e11c <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
   1e11c:	e6 e6       	ldi	r30, 0x66	; 102
   1e11e:	f1 e0       	ldi	r31, 0x01	; 1
   1e120:	35 81       	ldd	r19, Z+5	; 0x05
   1e122:	24 81       	ldd	r18, Z+4	; 0x04
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
   1e124:	93 81       	ldd	r25, Z+3	; 0x03
   1e126:	82 81       	ldd	r24, Z+2	; 0x02
   1e128:	90 93 5e 01 	sts	0x015E, r25
   1e12c:	80 93 5f 01 	sts	0x015F, r24
	EndAddr   = Address[1].Word;
   1e130:	c9 01       	movw	r24, r18
   1e132:	90 93 5c 01 	sts	0x015C, r25
   1e136:	80 93 5d 01 	sts	0x015D, r24
   1e13a:	08 95       	ret

0001e13c <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
   1e13c:	cf 93       	push	r28
   1e13e:	df 93       	push	r29
   1e140:	00 d0       	rcall	.+0      	; 0x1e142 <ProcessBootloaderCommand+0x6>
   1e142:	00 d0       	rcall	.+0      	; 0x1e144 <ProcessBootloaderCommand+0x8>
   1e144:	00 d0       	rcall	.+0      	; 0x1e146 <ProcessBootloaderCommand+0xa>
   1e146:	cd b7       	in	r28, 0x3d	; 61
   1e148:	de b7       	in	r29, 0x3e	; 62
	/* Check if device is in secure mode */
	if (IsSecure)
   1e14a:	90 91 65 01 	lds	r25, 0x0165
   1e14e:	80 91 66 01 	lds	r24, 0x0166
   1e152:	99 23       	and	r25, r25
   1e154:	d1 f0       	breq	.+52     	; 0x1e18a <ProcessBootloaderCommand+0x4e>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1e156:	84 30       	cpi	r24, 0x04	; 4
   1e158:	49 f4       	brne	.+18     	; 0x1e16c <ProcessBootloaderCommand+0x30>
   1e15a:	80 91 67 01 	lds	r24, 0x0167
   1e15e:	81 11       	cpse	r24, r1
   1e160:	08 c0       	rjmp	.+16     	; 0x1e172 <ProcessBootloaderCommand+0x36>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
   1e162:	80 91 68 01 	lds	r24, 0x0168
   1e166:	8f 3f       	cpi	r24, 0xFF	; 255
   1e168:	21 f4       	brne	.+8      	; 0x1e172 <ProcessBootloaderCommand+0x36>
   1e16a:	6a c0       	rjmp	.+212    	; 0x1e240 <ProcessBootloaderCommand+0x104>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1e16c:	85 30       	cpi	r24, 0x05	; 5
   1e16e:	09 f4       	brne	.+2      	; 0x1e172 <ProcessBootloaderCommand+0x36>
   1e170:	c1 c0       	rjmp	.+386    	; 0x1e2f4 <ProcessBootloaderCommand+0x1b8>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
   1e172:	8a e0       	ldi	r24, 0x0A	; 10
   1e174:	80 93 00 01 	sts	0x0100, r24
			DFU_Status = errWRITE;
   1e178:	83 e0       	ldi	r24, 0x03	; 3
   1e17a:	80 93 63 01 	sts	0x0163, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e17e:	80 91 eb 00 	lds	r24, 0x00EB
   1e182:	80 62       	ori	r24, 0x20	; 32
   1e184:	80 93 eb 00 	sts	0x00EB, r24
   1e188:	e4 c0       	rjmp	.+456    	; 0x1e352 <ProcessBootloaderCommand+0x216>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
   1e18a:	84 30       	cpi	r24, 0x04	; 4
   1e18c:	09 f4       	brne	.+2      	; 0x1e190 <ProcessBootloaderCommand+0x54>
   1e18e:	58 c0       	rjmp	.+176    	; 0x1e240 <ProcessBootloaderCommand+0x104>
   1e190:	28 f4       	brcc	.+10     	; 0x1e19c <ProcessBootloaderCommand+0x60>
   1e192:	81 30       	cpi	r24, 0x01	; 1
   1e194:	51 f0       	breq	.+20     	; 0x1e1aa <ProcessBootloaderCommand+0x6e>
   1e196:	83 30       	cpi	r24, 0x03	; 3
   1e198:	31 f1       	breq	.+76     	; 0x1e1e6 <ProcessBootloaderCommand+0xaa>
   1e19a:	db c0       	rjmp	.+438    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e19c:	85 30       	cpi	r24, 0x05	; 5
   1e19e:	09 f4       	brne	.+2      	; 0x1e1a2 <ProcessBootloaderCommand+0x66>
   1e1a0:	a9 c0       	rjmp	.+338    	; 0x1e2f4 <ProcessBootloaderCommand+0x1b8>
   1e1a2:	86 30       	cpi	r24, 0x06	; 6
   1e1a4:	09 f4       	brne	.+2      	; 0x1e1a8 <ProcessBootloaderCommand+0x6c>
   1e1a6:	c9 c0       	rjmp	.+402    	; 0x1e33a <ProcessBootloaderCommand+0x1fe>
   1e1a8:	d4 c0       	rjmp	.+424    	; 0x1e352 <ProcessBootloaderCommand+0x216>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
   1e1aa:	80 91 67 01 	lds	r24, 0x0167
   1e1ae:	82 30       	cpi	r24, 0x02	; 2
   1e1b0:	08 f0       	brcs	.+2      	; 0x1e1b4 <ProcessBootloaderCommand+0x78>
   1e1b2:	cf c0       	rjmp	.+414    	; 0x1e352 <ProcessBootloaderCommand+0x216>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1e1b4:	b3 df       	rcall	.-154    	; 0x1e11c <LoadStartEndAddresses>
   1e1b6:	80 91 67 01 	lds	r24, 0x0167

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
   1e1ba:	81 11       	cpse	r24, r1
   1e1bc:	12 c0       	rjmp	.+36     	; 0x1e1e2 <ProcessBootloaderCommand+0xa6>
   1e1be:	80 91 5e 01 	lds	r24, 0x015E
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1e1c2:	90 91 5f 01 	lds	r25, 0x015F
   1e1c6:	20 91 60 01 	lds	r18, 0x0160
   1e1ca:	a2 2f       	mov	r26, r18
   1e1cc:	b0 e0       	ldi	r27, 0x00	; 0
   1e1ce:	23 e0       	ldi	r18, 0x03	; 3

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
   1e1d0:	fc 01       	movw	r30, r24
   1e1d2:	a0 93 5b 00 	sts	0x005B, r26
   1e1d6:	20 93 57 00 	sts	0x0057, r18
   1e1da:	e8 95       	spm
   1e1dc:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1e1de:	00 fc       	sbrc	r0, 0
   1e1e0:	fd cf       	rjmp	.-6      	; 0x1e1dc <ProcessBootloaderCommand+0xa0>
   1e1e2:	85 e0       	ldi	r24, 0x05	; 5
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
   1e1e4:	07 c0       	rjmp	.+14     	; 0x1e1f4 <ProcessBootloaderCommand+0xb8>
   1e1e6:	80 91 67 01 	lds	r24, 0x0167
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
   1e1ea:	98 2f       	mov	r25, r24
   1e1ec:	9d 7f       	andi	r25, 0xFD	; 253
   1e1ee:	29 f4       	brne	.+10     	; 0x1e1fa <ProcessBootloaderCommand+0xbe>
   1e1f0:	95 df       	rcall	.-214    	; 0x1e11c <LoadStartEndAddresses>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1e1f2:	89 e0       	ldi	r24, 0x09	; 9
   1e1f4:	80 93 00 01 	sts	0x0100, r24

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
   1e1f8:	ac c0       	rjmp	.+344    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e1fa:	81 30       	cpi	r24, 0x01	; 1
   1e1fc:	09 f0       	breq	.+2      	; 0x1e200 <ProcessBootloaderCommand+0xc4>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
   1e1fe:	a9 c0       	rjmp	.+338    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e200:	80 e0       	ldi	r24, 0x00	; 0
   1e202:	90 e0       	ldi	r25, 0x00	; 0
   1e204:	dc 01       	movw	r26, r24
   1e206:	ab bf       	out	0x3b, r26	; 59
   1e208:	fc 01       	movw	r30, r24

		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
   1e20a:	27 91       	elpm	r18, Z+
   1e20c:	2f 3f       	cpi	r18, 0xFF	; 255
   1e20e:	69 f0       	breq	.+26     	; 0x1e22a <ProcessBootloaderCommand+0xee>
   1e210:	a0 93 60 01 	sts	0x0160, r26
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
   1e214:	90 93 5f 01 	sts	0x015F, r25
				StartAddr     = CurrFlashAddress;
   1e218:	80 93 5e 01 	sts	0x015E, r24
   1e21c:	8a e0       	ldi	r24, 0x0A	; 10
   1e21e:	80 93 00 01 	sts	0x0100, r24

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
   1e222:	85 e0       	ldi	r24, 0x05	; 5
   1e224:	80 93 63 01 	sts	0x0163, r24
				DFU_Status = errCHECK_ERASED;
   1e228:	94 c0       	rjmp	.+296    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e22a:	01 96       	adiw	r24, 0x01	; 1
   1e22c:	a1 1d       	adc	r26, r1

				break;
			}

			CurrFlashAddress++;
   1e22e:	b1 1d       	adc	r27, r1
   1e230:	81 15       	cp	r24, r1
   1e232:	20 ee       	ldi	r18, 0xE0	; 224
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < BOOT_START_ADDR)
   1e234:	92 07       	cpc	r25, r18
   1e236:	21 e0       	ldi	r18, 0x01	; 1
   1e238:	a2 07       	cpc	r26, r18
   1e23a:	b1 05       	cpc	r27, r1
   1e23c:	21 f7       	brne	.-56     	; 0x1e206 <ProcessBootloaderCommand+0xca>
   1e23e:	89 c0       	rjmp	.+274    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e240:	80 91 67 01 	lds	r24, 0x0167
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
   1e244:	83 30       	cpi	r24, 0x03	; 3
   1e246:	39 f5       	brne	.+78     	; 0x1e296 <ProcessBootloaderCommand+0x15a>
   1e248:	81 e0       	ldi	r24, 0x01	; 1
   1e24a:	80 93 64 01 	sts	0x0164, r24
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
   1e24e:	20 91 6c 01 	lds	r18, 0x016C

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
   1e252:	30 91 6d 01 	lds	r19, 0x016D
   1e256:	80 91 68 01 	lds	r24, 0x0168
   1e25a:	23 2b       	or	r18, r19
   1e25c:	61 f0       	breq	.+24     	; 0x1e276 <ProcessBootloaderCommand+0x13a>
   1e25e:	81 30       	cpi	r24, 0x01	; 1
   1e260:	09 f0       	breq	.+2      	; 0x1e264 <ProcessBootloaderCommand+0x128>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
   1e262:	77 c0       	rjmp	.+238    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e264:	90 91 6b 01 	lds	r25, 0x016B
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
   1e268:	80 91 6a 01 	lds	r24, 0x016A
   1e26c:	90 93 61 01 	sts	0x0161, r25

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
   1e270:	80 93 62 01 	sts	0x0162, r24
   1e274:	6e c0       	rjmp	.+220    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e276:	81 11       	cpse	r24, r1
   1e278:	0b c0       	rjmp	.+22     	; 0x1e290 <ProcessBootloaderCommand+0x154>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
   1e27a:	9c e0       	ldi	r25, 0x0C	; 12
   1e27c:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e27e:	0f b6       	in	r0, 0x3f	; 63
   1e280:	f8 94       	cli
   1e282:	a8 95       	wdr
   1e284:	80 93 60 00 	sts	0x0060, r24
   1e288:	0f be       	out	0x3f, r0	; 63
   1e28a:	90 93 60 00 	sts	0x0060, r25
   1e28e:	61 c0       	rjmp	.+194    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e290:	10 92 01 01 	sts	0x0101, r1
				wdt_enable(WDTO_250MS);
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity */
				RunBootloader = false;
   1e294:	5e c0       	rjmp	.+188    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e296:	81 11       	cpse	r24, r1
   1e298:	5c c0       	rjmp	.+184    	; 0x1e352 <ProcessBootloaderCommand+0x216>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
   1e29a:	80 91 68 01 	lds	r24, 0x0168
   1e29e:	8f 3f       	cpi	r24, 0xFF	; 255
   1e2a0:	09 f0       	breq	.+2      	; 0x1e2a4 <ProcessBootloaderCommand+0x168>
   1e2a2:	57 c0       	rjmp	.+174    	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e2a4:	80 e0       	ldi	r24, 0x00	; 0
   1e2a6:	90 e0       	ldi	r25, 0x00	; 0
   1e2a8:	dc 01       	movw	r26, r24
   1e2aa:	23 e0       	ldi	r18, 0x03	; 3
   1e2ac:	35 e0       	ldi	r19, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1e2ae:	fc 01       	movw	r30, r24
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1e2b0:	a0 93 5b 00 	sts	0x005B, r26
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1e2b4:	20 93 57 00 	sts	0x0057, r18
   1e2b8:	e8 95       	spm
   1e2ba:	07 b6       	in	r0, 0x37	; 55
   1e2bc:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
   1e2be:	fd cf       	rjmp	.-6      	; 0x1e2ba <ProcessBootloaderCommand+0x17e>
   1e2c0:	fc 01       	movw	r30, r24
   1e2c2:	a0 93 5b 00 	sts	0x005B, r26
			boot_page_write(CurrFlashAddress);
   1e2c6:	30 93 57 00 	sts	0x0057, r19
   1e2ca:	e8 95       	spm
   1e2cc:	07 b6       	in	r0, 0x37	; 55
   1e2ce:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
   1e2d0:	fd cf       	rjmp	.-6      	; 0x1e2cc <ProcessBootloaderCommand+0x190>
   1e2d2:	9f 5f       	subi	r25, 0xFF	; 255
   1e2d4:	af 4f       	sbci	r26, 0xFF	; 255

			CurrFlashAddress += SPM_PAGESIZE;
   1e2d6:	bf 4f       	sbci	r27, 0xFF	; 255
   1e2d8:	81 15       	cp	r24, r1
   1e2da:	40 ee       	ldi	r20, 0xE0	; 224
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
   1e2dc:	94 07       	cpc	r25, r20
   1e2de:	41 e0       	ldi	r20, 0x01	; 1
   1e2e0:	a4 07       	cpc	r26, r20
   1e2e2:	b1 05       	cpc	r27, r1
   1e2e4:	21 f7       	brne	.-56     	; 0x1e2ae <ProcessBootloaderCommand+0x172>
   1e2e6:	81 e1       	ldi	r24, 0x11	; 17
   1e2e8:	80 93 57 00 	sts	0x0057, r24

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
   1e2ec:	e8 95       	spm
   1e2ee:	10 92 65 01 	sts	0x0165, r1

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
   1e2f2:	2f c0       	rjmp	.+94     	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e2f4:	80 e2       	ldi	r24, 0x20	; 32
   1e2f6:	8c 83       	std	Y+4, r24	; 0x04
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
   1e2f8:	8c ed       	ldi	r24, 0xDC	; 220
   1e2fa:	8d 83       	std	Y+5, r24	; 0x05
   1e2fc:	8b ef       	ldi	r24, 0xFB	; 251
   1e2fe:	8e 83       	std	Y+6, r24	; 0x06
   1e300:	8e e1       	ldi	r24, 0x1E	; 30
   1e302:	89 83       	std	Y+1, r24	; 0x01
	const uint8_t SignatureInfo[3]  = {AVR_SIGNATURE_1,    AVR_SIGNATURE_2,     AVR_SIGNATURE_3};
   1e304:	87 e9       	ldi	r24, 0x97	; 151
   1e306:	8a 83       	std	Y+2, r24	; 0x02
   1e308:	82 e8       	ldi	r24, 0x82	; 130
   1e30a:	8b 83       	std	Y+3, r24	; 0x03
   1e30c:	80 91 68 01 	lds	r24, 0x0168

	uint8_t DataIndexToRead = SentCommand.Data[1];
   1e310:	90 91 67 01 	lds	r25, 0x0167

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                         // Read bootloader info
   1e314:	91 11       	cpse	r25, r1
   1e316:	05 c0       	rjmp	.+10     	; 0x1e322 <ProcessBootloaderCommand+0x1e6>
   1e318:	fe 01       	movw	r30, r28
   1e31a:	e8 0f       	add	r30, r24
	  ResponseByte = BootloaderInfo[DataIndexToRead];
   1e31c:	f1 1d       	adc	r31, r1
   1e31e:	84 81       	ldd	r24, Z+4	; 0x04
   1e320:	09 c0       	rjmp	.+18     	; 0x1e334 <ProcessBootloaderCommand+0x1f8>
   1e322:	91 30       	cpi	r25, 0x01	; 1
   1e324:	b1 f4       	brne	.+44     	; 0x1e352 <ProcessBootloaderCommand+0x216>
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
   1e326:	e1 ed       	ldi	r30, 0xD1	; 209
   1e328:	ff ef       	ldi	r31, 0xFF	; 255
	  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
   1e32a:	ec 0f       	add	r30, r28
   1e32c:	fd 1f       	adc	r31, r29
   1e32e:	e8 0f       	add	r30, r24
   1e330:	f1 1d       	adc	r31, r1
   1e332:	80 81       	ld	r24, Z
   1e334:	80 93 6e 01 	sts	0x016E, r24
   1e338:	0c c0       	rjmp	.+24     	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e33a:	80 91 67 01 	lds	r24, 0x0167
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
   1e33e:	83 30       	cpi	r24, 0x03	; 3
   1e340:	41 f4       	brne	.+16     	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e342:	80 91 68 01 	lds	r24, 0x0168
   1e346:	81 11       	cpse	r24, r1
   1e348:	04 c0       	rjmp	.+8      	; 0x1e352 <ProcessBootloaderCommand+0x216>
   1e34a:	80 91 69 01 	lds	r24, 0x0169
			  Flash64KBPage = SentCommand.Data[2];
   1e34e:	80 93 60 01 	sts	0x0160, r24
   1e352:	26 96       	adiw	r28, 0x06	; 6
   1e354:	0f b6       	in	r0, 0x3f	; 63

			break;
	}
}
   1e356:	f8 94       	cli
   1e358:	de bf       	out	0x3e, r29	; 62
   1e35a:	0f be       	out	0x3f, r0	; 63
   1e35c:	cd bf       	out	0x3d, r28	; 61
   1e35e:	df 91       	pop	r29
   1e360:	cf 91       	pop	r28
   1e362:	08 95       	ret

0001e364 <SetupHardware>:
   1e364:	84 b7       	in	r24, 0x34	; 52
   1e366:	87 7f       	andi	r24, 0xF7	; 247

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e368:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e36a:	0f b6       	in	r0, 0x3f	; 63
   1e36c:	f8 94       	cli
   1e36e:	a8 95       	wdr
   1e370:	80 91 60 00 	lds	r24, 0x0060
   1e374:	88 61       	ori	r24, 0x18	; 24
   1e376:	80 93 60 00 	sts	0x0060, r24
   1e37a:	10 92 60 00 	sts	0x0060, r1
   1e37e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e380:	90 e0       	ldi	r25, 0x00	; 0
   1e382:	80 e8       	ldi	r24, 0x80	; 128
   1e384:	0f b6       	in	r0, 0x3f	; 63
   1e386:	f8 94       	cli
   1e388:	80 93 61 00 	sts	0x0061, r24
   1e38c:	90 93 61 00 	sts	0x0061, r25
   1e390:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e392:	81 e0       	ldi	r24, 0x01	; 1
   1e394:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
   1e396:	82 e0       	ldi	r24, 0x02	; 2
   1e398:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB subsystem */
	USB_Init();
   1e39a:	ca c2       	rjmp	.+1428   	; 0x1e930 <USB_Init>

0001e39c <ResetHardware>:
   1e39c:	69 d2       	rcall	.+1234   	; 0x1e870 <USB_ShutDown>

/** Resets all configured hardware required for the bootloader back to their original states. */
void ResetHardware(void)
{
	/* Shut down the USB subsystem */
	USB_ShutDown();
   1e39e:	81 e0       	ldi	r24, 0x01	; 1

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
   1e3a0:	85 bf       	out	0x35, r24	; 53
   1e3a2:	15 be       	out	0x35, r1	; 53
	MCUCR = 0;
   1e3a4:	08 95       	ret

0001e3a6 <main>:
   1e3a6:	de df       	rcall	.-68     	; 0x1e364 <SetupHardware>
 *  the loaded application code.
 */
int main(void)
{
	/* Configure hardware required by the bootloader */
	SetupHardware();
   1e3a8:	78 94       	sei

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1e3aa:	80 91 01 01 	lds	r24, 0x0101

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1e3ae:	88 23       	and	r24, r24
   1e3b0:	11 f0       	breq	.+4      	; 0x1e3b6 <main+0x10>
   1e3b2:	92 d4       	rcall	.+2340   	; 0x1ecd8 <USB_USBTask>
	  USB_USBTask();
   1e3b4:	fa cf       	rjmp	.-12     	; 0x1e3aa <main+0x4>
   1e3b6:	80 91 64 01 	lds	r24, 0x0164

	/* Enable global interrupts so that the USB stack can function */
	sei();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1e3ba:	81 11       	cpse	r24, r1
   1e3bc:	fa cf       	rjmp	.-12     	; 0x1e3b2 <main+0xc>
   1e3be:	ee df       	rcall	.-36     	; 0x1e39c <ResetHardware>
   1e3c0:	e0 91 61 01 	lds	r30, 0x0161
	  USB_USBTask();

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();
   1e3c4:	f0 91 62 01 	lds	r31, 0x0162

	/* Start the user application */
	AppStartPtr();
   1e3c8:	09 95       	icall

0001e3ca <EVENT_USB_Device_UnhandledControlRequest>:
   1e3ca:	8f 92       	push	r8
   1e3cc:	9f 92       	push	r9
   1e3ce:	af 92       	push	r10
/** Event handler for the USB_UnhandledControlRequest event. This is used to catch standard and class specific
 *  control requests that are not handled internally by the USB library (including the DFU commands, which are
 *  all issued via the control endpoint), so that they can be handled appropriately for the application.
 */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
   1e3d0:	bf 92       	push	r11
   1e3d2:	cf 92       	push	r12
   1e3d4:	df 92       	push	r13
   1e3d6:	ef 92       	push	r14
   1e3d8:	ff 92       	push	r15
   1e3da:	1f 93       	push	r17
   1e3dc:	cf 93       	push	r28
   1e3de:	df 93       	push	r29
	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
   1e3e0:	80 91 77 01 	lds	r24, 0x0177
   1e3e4:	90 91 78 01 	lds	r25, 0x0178
   1e3e8:	90 93 6d 01 	sts	0x016D, r25
   1e3ec:	80 93 6c 01 	sts	0x016C, r24

	switch (USB_ControlRequest.bRequest)
   1e3f0:	80 91 72 01 	lds	r24, 0x0172
   1e3f4:	83 30       	cpi	r24, 0x03	; 3
   1e3f6:	09 f4       	brne	.+2      	; 0x1e3fa <EVENT_USB_Device_UnhandledControlRequest+0x30>
   1e3f8:	a4 c1       	rjmp	.+840    	; 0x1e742 <EVENT_USB_Device_UnhandledControlRequest+0x378>
   1e3fa:	58 f4       	brcc	.+22     	; 0x1e412 <EVENT_USB_Device_UnhandledControlRequest+0x48>
   1e3fc:	81 30       	cpi	r24, 0x01	; 1
   1e3fe:	d1 f0       	breq	.+52     	; 0x1e434 <EVENT_USB_Device_UnhandledControlRequest+0x6a>
   1e400:	82 30       	cpi	r24, 0x02	; 2
   1e402:	09 f0       	breq	.+2      	; 0x1e406 <EVENT_USB_Device_UnhandledControlRequest+0x3c>
   1e404:	d0 c1       	rjmp	.+928    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e406:	80 91 e8 00 	lds	r24, 0x00E8
   1e40a:	87 7f       	andi	r24, 0xF7	; 247
   1e40c:	80 93 e8 00 	sts	0x00E8, r24
   1e410:	0b c1       	rjmp	.+534    	; 0x1e628 <EVENT_USB_Device_UnhandledControlRequest+0x25e>
   1e412:	85 30       	cpi	r24, 0x05	; 5
   1e414:	09 f4       	brne	.+2      	; 0x1e418 <EVENT_USB_Device_UnhandledControlRequest+0x4e>
   1e416:	b3 c1       	rjmp	.+870    	; 0x1e77e <EVENT_USB_Device_UnhandledControlRequest+0x3b4>
   1e418:	08 f4       	brcc	.+2      	; 0x1e41c <EVENT_USB_Device_UnhandledControlRequest+0x52>
   1e41a:	a9 c1       	rjmp	.+850    	; 0x1e76e <EVENT_USB_Device_UnhandledControlRequest+0x3a4>
   1e41c:	86 30       	cpi	r24, 0x06	; 6
   1e41e:	09 f0       	breq	.+2      	; 0x1e422 <EVENT_USB_Device_UnhandledControlRequest+0x58>
   1e420:	c2 c1       	rjmp	.+900    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
   1e422:	80 91 e8 00 	lds	r24, 0x00E8
   1e426:	87 7f       	andi	r24, 0xF7	; 247
   1e428:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case REQ_DFU_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
   1e42c:	82 e0       	ldi	r24, 0x02	; 2
   1e42e:	80 93 00 01 	sts	0x0100, r24
   1e432:	ad c1       	rjmp	.+858    	; 0x1e78e <EVENT_USB_Device_UnhandledControlRequest+0x3c4>
   1e434:	80 91 e8 00 	lds	r24, 0x00E8
   1e438:	87 7f       	andi	r24, 0xF7	; 247
   1e43a:	80 93 e8 00 	sts	0x00E8, r24
	{
		case REQ_DFU_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
   1e43e:	80 91 64 01 	lds	r24, 0x0164
   1e442:	88 23       	and	r24, r24
   1e444:	19 f0       	breq	.+6      	; 0x1e44c <EVENT_USB_Device_UnhandledControlRequest+0x82>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
   1e446:	7a de       	rcall	.-780    	; 0x1e13c <ProcessBootloaderCommand>
   1e448:	10 92 64 01 	sts	0x0164, r1

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
   1e44c:	80 91 6c 01 	lds	r24, 0x016C
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
   1e450:	90 91 6d 01 	lds	r25, 0x016D
   1e454:	00 97       	sbiw	r24, 0x00	; 0
   1e456:	51 f1       	breq	.+84     	; 0x1e4ac <EVENT_USB_Device_UnhandledControlRequest+0xe2>
   1e458:	20 91 e8 00 	lds	r18, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e45c:	22 fd       	sbrc	r18, 2
			{
				while (!(Endpoint_IsOUTReceived()))
   1e45e:	04 c0       	rjmp	.+8      	; 0x1e468 <EVENT_USB_Device_UnhandledControlRequest+0x9e>
   1e460:	2e b3       	in	r18, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e462:	21 11       	cpse	r18, r1
   1e464:	f9 cf       	rjmp	.-14     	; 0x1e458 <EVENT_USB_Device_UnhandledControlRequest+0x8e>
   1e466:	9f c1       	rjmp	.+830    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
   1e468:	20 91 f1 00 	lds	r18, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1e46c:	20 93 66 01 	sts	0x0166, r18
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_Byte();
   1e470:	01 97       	sbiw	r24, 0x01	; 1

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
   1e472:	90 93 6d 01 	sts	0x016D, r25
   1e476:	80 93 6c 01 	sts	0x016C, r24
   1e47a:	e7 e6       	ldi	r30, 0x67	; 103
   1e47c:	f1 e0       	ldi	r31, 0x01	; 1
   1e47e:	25 e0       	ldi	r18, 0x05	; 5
   1e480:	2e 0f       	add	r18, r30
   1e482:	80 91 f2 00 	lds	r24, 0x00F2
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1e486:	90 91 f3 00 	lds	r25, 0x00F3
   1e48a:	89 2b       	or	r24, r25

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1e48c:	71 f0       	breq	.+28     	; 0x1e4aa <EVENT_USB_Device_UnhandledControlRequest+0xe0>
   1e48e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1e492:	81 93       	st	Z+, r24
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_Byte();
   1e494:	80 91 6c 01 	lds	r24, 0x016C
					SentCommand.DataSize--;
   1e498:	90 91 6d 01 	lds	r25, 0x016D
   1e49c:	01 97       	sbiw	r24, 0x01	; 1
   1e49e:	90 93 6d 01 	sts	0x016D, r25
   1e4a2:	80 93 6c 01 	sts	0x016C, r24
   1e4a6:	2e 13       	cpse	r18, r30

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1e4a8:	ec cf       	rjmp	.-40     	; 0x1e482 <EVENT_USB_Device_UnhandledControlRequest+0xb8>
   1e4aa:	48 de       	rcall	.-880    	; 0x1e13c <ProcessBootloaderCommand>
					SentCommand.Data[DataByte] = Endpoint_Read_Byte();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
   1e4ac:	80 91 00 01 	lds	r24, 0x0100
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
   1e4b0:	85 30       	cpi	r24, 0x05	; 5
   1e4b2:	09 f0       	breq	.+2      	; 0x1e4b6 <EVENT_USB_Device_UnhandledControlRequest+0xec>
   1e4b4:	b1 c0       	rjmp	.+354    	; 0x1e618 <EVENT_USB_Device_UnhandledControlRequest+0x24e>
   1e4b6:	80 91 6c 01 	lds	r24, 0x016C
			{
				if (!(SentCommand.DataSize))
   1e4ba:	90 91 6d 01 	lds	r25, 0x016D
   1e4be:	89 2b       	or	r24, r25
   1e4c0:	21 f4       	brne	.+8      	; 0x1e4ca <EVENT_USB_Device_UnhandledControlRequest+0x100>
   1e4c2:	82 e0       	ldi	r24, 0x02	; 2
   1e4c4:	80 93 00 01 	sts	0x0100, r24
				{
					DFU_State = dfuIDLE;
   1e4c8:	a7 c0       	rjmp	.+334    	; 0x1e618 <EVENT_USB_Device_UnhandledControlRequest+0x24e>
   1e4ca:	8a e1       	ldi	r24, 0x1A	; 26
   1e4cc:	0d de       	rcall	.-998    	; 0x1e0e8 <DiscardFillerBytes>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
   1e4ce:	80 91 5e 01 	lds	r24, 0x015E
   1e4d2:	8f 71       	andi	r24, 0x1F	; 31

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
   1e4d4:	09 de       	rcall	.-1006   	; 0x1e0e8 <DiscardFillerBytes>
   1e4d6:	20 91 5e 01 	lds	r18, 0x015E
   1e4da:	30 91 5f 01 	lds	r19, 0x015F

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1e4de:	80 91 5c 01 	lds	r24, 0x015C
   1e4e2:	90 91 5d 01 	lds	r25, 0x015D
   1e4e6:	01 96       	adiw	r24, 0x01	; 1
   1e4e8:	ec 01       	movw	r28, r24
   1e4ea:	c2 1b       	sub	r28, r18
   1e4ec:	d3 0b       	sbc	r29, r19
   1e4ee:	80 91 67 01 	lds	r24, 0x0167
   1e4f2:	81 11       	cpse	r24, r1
   1e4f4:	7f c0       	rjmp	.+254    	; 0x1e5f4 <EVENT_USB_Device_UnhandledControlRequest+0x22a>

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
   1e4f6:	ce 01       	movw	r24, r28
   1e4f8:	96 95       	lsr	r25
   1e4fa:	87 95       	ror	r24
   1e4fc:	a9 01       	movw	r20, r18
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
   1e4fe:	20 91 60 01 	lds	r18, 0x0160
   1e502:	62 2f       	mov	r22, r18

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
   1e504:	70 e0       	ldi	r23, 0x00	; 0
   1e506:	4a 01       	movw	r8, r20
   1e508:	5b 01       	movw	r10, r22
   1e50a:	20 e0       	ldi	r18, 0x00	; 0
   1e50c:	c1 e0       	ldi	r28, 0x01	; 1

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1e50e:	d5 e0       	ldi	r29, 0x05	; 5
   1e510:	13 e0       	ldi	r17, 0x03	; 3
						uint8_t  WordsInFlashPage          = 0;
   1e512:	00 97       	sbiw	r24, 0x00	; 0
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_Word_LE());
   1e514:	09 f4       	brne	.+2      	; 0x1e518 <EVENT_USB_Device_UnhandledControlRequest+0x14e>

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1e516:	4a c0       	rjmp	.+148    	; 0x1e5ac <EVENT_USB_Device_UnhandledControlRequest+0x1e2>
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1e518:	e0 91 f2 00 	lds	r30, 0x00F2
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1e51c:	f0 91 f3 00 	lds	r31, 0x00F3
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1e520:	ef 2b       	or	r30, r31
   1e522:	e1 f0       	breq	.+56     	; 0x1e55c <EVENT_USB_Device_UnhandledControlRequest+0x192>
   1e524:	01 97       	sbiw	r24, 0x01	; 1
   1e526:	e0 91 f1 00 	lds	r30, 0x00F1
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1e52a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e52e:	ae 2f       	mov	r26, r30
   1e530:	b3 2f       	mov	r27, r19
				Data.Bytes[1] = UEDATX;
   1e532:	0d 01       	movw	r0, r26
   1e534:	fa 01       	movw	r30, r20

				return Data.Word;
   1e536:	60 93 5b 00 	sts	0x005B, r22
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_Word_LE());
   1e53a:	c0 93 57 00 	sts	0x0057, r28
   1e53e:	e8 95       	spm
   1e540:	11 24       	eor	r1, r1
   1e542:	2f 5f       	subi	r18, 0xFF	; 255
   1e544:	6a 01       	movw	r12, r20
   1e546:	7b 01       	movw	r14, r22
   1e548:	32 e0       	ldi	r19, 0x02	; 2

							/* Adjust counters */
							WordsInFlashPage      += 1;
   1e54a:	c3 0e       	add	r12, r19
							CurrFlashAddress.Long += 2;
   1e54c:	d1 1c       	adc	r13, r1
   1e54e:	e1 1c       	adc	r14, r1
   1e550:	f1 1c       	adc	r15, r1
   1e552:	b7 01       	movw	r22, r14
   1e554:	a6 01       	movw	r20, r12
   1e556:	20 38       	cpi	r18, 0x80	; 128
   1e558:	71 f4       	brne	.+28     	; 0x1e576 <EVENT_USB_Device_UnhandledControlRequest+0x1ac>
   1e55a:	0f c0       	rjmp	.+30     	; 0x1e57a <EVENT_USB_Device_UnhandledControlRequest+0x1b0>
   1e55c:	30 91 e8 00 	lds	r19, 0x00E8

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1e560:	3b 7f       	andi	r19, 0xFB	; 251
   1e562:	30 93 e8 00 	sts	0x00E8, r19
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e566:	30 91 e8 00 	lds	r19, 0x00E8
   1e56a:	32 fd       	sbrc	r19, 2
   1e56c:	db cf       	rjmp	.-74     	; 0x1e524 <EVENT_USB_Device_UnhandledControlRequest+0x15a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e56e:	3e b3       	in	r19, 0x1e	; 30
   1e570:	31 11       	cpse	r19, r1
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1e572:	f9 cf       	rjmp	.-14     	; 0x1e566 <EVENT_USB_Device_UnhandledControlRequest+0x19c>
   1e574:	18 c1       	rjmp	.+560    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e576:	00 97       	sbiw	r24, 0x00	; 0
   1e578:	61 f6       	brne	.-104    	; 0x1e512 <EVENT_USB_Device_UnhandledControlRequest+0x148>
   1e57a:	f4 01       	movw	r30, r8
   1e57c:	a0 92 5b 00 	sts	0x005B, r10
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1e580:	d0 93 57 00 	sts	0x0057, r29
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1e584:	e8 95       	spm
   1e586:	07 b6       	in	r0, 0x37	; 55
   1e588:	00 fc       	sbrc	r0, 0
   1e58a:	fd cf       	rjmp	.-6      	; 0x1e586 <EVENT_USB_Device_UnhandledControlRequest+0x1bc>
   1e58c:	00 97       	sbiw	r24, 0x00	; 0
								boot_spm_busy_wait();
   1e58e:	09 f4       	brne	.+2      	; 0x1e592 <EVENT_USB_Device_UnhandledControlRequest+0x1c8>
   1e590:	c0 cf       	rjmp	.-128    	; 0x1e512 <EVENT_USB_Device_UnhandledControlRequest+0x148>
   1e592:	f6 01       	movw	r30, r12

								/* Check if programming incomplete */
								if (WordsRemaining)
   1e594:	e0 92 5b 00 	sts	0x005B, r14
   1e598:	10 93 57 00 	sts	0x0057, r17
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1e59c:	e8 95       	spm
   1e59e:	07 b6       	in	r0, 0x37	; 55
   1e5a0:	00 fc       	sbrc	r0, 0
   1e5a2:	fd cf       	rjmp	.-6      	; 0x1e59e <EVENT_USB_Device_UnhandledControlRequest+0x1d4>
   1e5a4:	46 01       	movw	r8, r12
									boot_spm_busy_wait();
   1e5a6:	57 01       	movw	r10, r14
   1e5a8:	20 e0       	ldi	r18, 0x00	; 0
   1e5aa:	b3 cf       	rjmp	.-154    	; 0x1e512 <EVENT_USB_Device_UnhandledControlRequest+0x148>
								boot_spm_busy_wait();

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1e5ac:	80 91 5c 01 	lds	r24, 0x015C
									WordsInFlashPage          = 0;
   1e5b0:	90 91 5d 01 	lds	r25, 0x015D
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
   1e5b4:	90 93 5f 01 	sts	0x015F, r25
   1e5b8:	80 93 5e 01 	sts	0x015E, r24
   1e5bc:	81 e1       	ldi	r24, 0x11	; 17
   1e5be:	80 93 57 00 	sts	0x0057, r24
   1e5c2:	e8 95       	spm

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
   1e5c4:	27 c0       	rjmp	.+78     	; 0x1e614 <EVENT_USB_Device_UnhandledControlRequest+0x24a>
   1e5c6:	80 91 f2 00 	lds	r24, 0x00F2
   1e5ca:	90 91 f3 00 	lds	r25, 0x00F3
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1e5ce:	89 2b       	or	r24, r25
   1e5d0:	a1 f0       	breq	.+40     	; 0x1e5fa <EVENT_USB_Device_UnhandledControlRequest+0x230>
   1e5d2:	60 91 f1 00 	lds	r22, 0x00F1
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1e5d6:	21 97       	sbiw	r28, 0x01	; 1
   1e5d8:	80 91 5e 01 	lds	r24, 0x015E
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1e5dc:	90 91 5f 01 	lds	r25, 0x015F
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_Byte());
   1e5e0:	94 d3       	rcall	.+1832   	; 0x1ed0a <eeprom_write_byte>
   1e5e2:	80 91 5e 01 	lds	r24, 0x015E
   1e5e6:	90 91 5f 01 	lds	r25, 0x015F
   1e5ea:	01 96       	adiw	r24, 0x01	; 1

							/* Adjust counters */
							StartAddr++;
   1e5ec:	90 93 5f 01 	sts	0x015F, r25
   1e5f0:	80 93 5e 01 	sts	0x015E, r24
   1e5f4:	20 97       	sbiw	r28, 0x00	; 0
   1e5f6:	39 f7       	brne	.-50     	; 0x1e5c6 <EVENT_USB_Device_UnhandledControlRequest+0x1fc>
   1e5f8:	0d c0       	rjmp	.+26     	; 0x1e614 <EVENT_USB_Device_UnhandledControlRequest+0x24a>
   1e5fa:	80 91 e8 00 	lds	r24, 0x00E8
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1e5fe:	8b 7f       	andi	r24, 0xFB	; 251
   1e600:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e604:	80 91 e8 00 	lds	r24, 0x00E8
   1e608:	82 fd       	sbrc	r24, 2
   1e60a:	e3 cf       	rjmp	.-58     	; 0x1e5d2 <EVENT_USB_Device_UnhandledControlRequest+0x208>
   1e60c:	8e b3       	in	r24, 0x1e	; 30
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e60e:	81 11       	cpse	r24, r1
   1e610:	f9 cf       	rjmp	.-14     	; 0x1e604 <EVENT_USB_Device_UnhandledControlRequest+0x23a>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1e612:	c9 c0       	rjmp	.+402    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
   1e614:	80 e1       	ldi	r24, 0x10	; 16
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e616:	68 dd       	rcall	.-1328   	; 0x1e0e8 <DiscardFillerBytes>
   1e618:	80 91 e8 00 	lds	r24, 0x00E8
   1e61c:	8b 7f       	andi	r24, 0xFB	; 251
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
   1e61e:	8e c0       	rjmp	.+284    	; 0x1e73c <EVENT_USB_Device_UnhandledControlRequest+0x372>
   1e620:	8e b3       	in	r24, 0x1e	; 30
   1e622:	88 23       	and	r24, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e624:	09 f4       	brne	.+2      	; 0x1e628 <EVENT_USB_Device_UnhandledControlRequest+0x25e>
   1e626:	bf c0       	rjmp	.+382    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
   1e628:	80 91 e8 00 	lds	r24, 0x00E8
		case REQ_DFU_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e62c:	80 ff       	sbrs	r24, 0
   1e62e:	f8 cf       	rjmp	.-16     	; 0x1e620 <EVENT_USB_Device_UnhandledControlRequest+0x256>
   1e630:	80 91 00 01 	lds	r24, 0x0100
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e634:	89 30       	cpi	r24, 0x09	; 9
   1e636:	91 f0       	breq	.+36     	; 0x1e65c <EVENT_USB_Device_UnhandledControlRequest+0x292>

			break;
		case REQ_DFU_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e638:	8a 30       	cpi	r24, 0x0A	; 10
   1e63a:	59 f4       	brne	.+22     	; 0x1e652 <EVENT_USB_Device_UnhandledControlRequest+0x288>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
   1e63c:	80 91 67 01 	lds	r24, 0x0167
   1e640:	81 30       	cpi	r24, 0x01	; 1
   1e642:	39 f4       	brne	.+14     	; 0x1e652 <EVENT_USB_Device_UnhandledControlRequest+0x288>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
   1e644:	90 91 5e 01 	lds	r25, 0x015E
   1e648:	80 91 5f 01 	lds	r24, 0x015F
   1e64c:	90 93 f1 00 	sts	0x00F1, r25
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_Word_LE(StartAddr);
   1e650:	02 c0       	rjmp	.+4      	; 0x1e656 <EVENT_USB_Device_UnhandledControlRequest+0x28c>
   1e652:	80 91 6e 01 	lds	r24, 0x016E
   1e656:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
   1e65a:	6d c0       	rjmp	.+218    	; 0x1e736 <EVENT_USB_Device_UnhandledControlRequest+0x36c>
   1e65c:	20 91 5e 01 	lds	r18, 0x015E
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_Byte(ResponseByte);
   1e660:	30 91 5f 01 	lds	r19, 0x015F
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1e664:	c0 91 5c 01 	lds	r28, 0x015C
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1e668:	d0 91 5d 01 	lds	r29, 0x015D
   1e66c:	21 96       	adiw	r28, 0x01	; 1
   1e66e:	c2 1b       	sub	r28, r18
   1e670:	d3 0b       	sbc	r29, r19
   1e672:	80 91 67 01 	lds	r24, 0x0167
   1e676:	81 11       	cpse	r24, r1
   1e678:	32 c0       	rjmp	.+100    	; 0x1e6de <EVENT_USB_Device_UnhandledControlRequest+0x314>
   1e67a:	d6 95       	lsr	r29
   1e67c:	c7 95       	ror	r28

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
   1e67e:	c9 01       	movw	r24, r18
   1e680:	20 91 60 01 	lds	r18, 0x0160
   1e684:	a2 2f       	mov	r26, r18
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
   1e686:	b0 e0       	ldi	r27, 0x00	; 0
   1e688:	21 97       	sbiw	r28, 0x01	; 1

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1e68a:	00 f1       	brcs	.+64     	; 0x1e6cc <EVENT_USB_Device_UnhandledControlRequest+0x302>
   1e68c:	20 91 f2 00 	lds	r18, 0x00F2
   1e690:	30 91 f3 00 	lds	r19, 0x00F3

					while (WordsRemaining--)
   1e694:	20 32       	cpi	r18, 0x20	; 32
   1e696:	31 05       	cpc	r19, r1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1e698:	61 f0       	breq	.+24     	; 0x1e6b2 <EVENT_USB_Device_UnhandledControlRequest+0x2e8>
   1e69a:	ab bf       	out	0x3b, r26	; 59
   1e69c:	fc 01       	movw	r30, r24
   1e69e:	27 91       	elpm	r18, Z+
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1e6a0:	36 91       	elpm	r19, Z
   1e6a2:	20 93 f1 00 	sts	0x00F1, r18
							}
						}

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_Word_LE(pgm_read_word_far(CurrFlashAddress.Long));
   1e6a6:	30 93 f1 00 	sts	0x00F1, r19
   1e6aa:	02 96       	adiw	r24, 0x02	; 2
   1e6ac:	a1 1d       	adc	r26, r1
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
   1e6ae:	b1 1d       	adc	r27, r1
   1e6b0:	eb cf       	rjmp	.-42     	; 0x1e688 <EVENT_USB_Device_UnhandledControlRequest+0x2be>
				UEDATX = (Word >> 8);
   1e6b2:	20 91 e8 00 	lds	r18, 0x00E8
						#else
							Endpoint_Write_Word_LE(pgm_read_word(CurrFlashAddress.Long));
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
   1e6b6:	2e 7f       	andi	r18, 0xFE	; 254
   1e6b8:	20 93 e8 00 	sts	0x00E8, r18
   1e6bc:	20 91 e8 00 	lds	r18, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e6c0:	20 fd       	sbrc	r18, 0
   1e6c2:	eb cf       	rjmp	.-42     	; 0x1e69a <EVENT_USB_Device_UnhandledControlRequest+0x2d0>
   1e6c4:	2e b3       	in	r18, 0x1e	; 30
   1e6c6:	21 11       	cpse	r18, r1
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6c8:	f9 cf       	rjmp	.-14     	; 0x1e6bc <EVENT_USB_Device_UnhandledControlRequest+0x2f2>
   1e6ca:	6d c0       	rjmp	.+218    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1e6cc:	80 91 5c 01 	lds	r24, 0x015C
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6d0:	90 91 5d 01 	lds	r25, 0x015D
   1e6d4:	90 93 5f 01 	sts	0x015F, r25
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
   1e6d8:	80 93 5e 01 	sts	0x015E, r24
   1e6dc:	29 c0       	rjmp	.+82     	; 0x1e730 <EVENT_USB_Device_UnhandledControlRequest+0x366>
   1e6de:	82 30       	cpi	r24, 0x02	; 2
   1e6e0:	39 f5       	brne	.+78     	; 0x1e730 <EVENT_USB_Device_UnhandledControlRequest+0x366>
   1e6e2:	20 97       	sbiw	r28, 0x00	; 0
   1e6e4:	29 f1       	breq	.+74     	; 0x1e730 <EVENT_USB_Device_UnhandledControlRequest+0x366>
   1e6e6:	80 91 f2 00 	lds	r24, 0x00F2
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
   1e6ea:	90 91 f3 00 	lds	r25, 0x00F3
				{
					while (BytesRemaining--)
   1e6ee:	80 97       	sbiw	r24, 0x20	; 32
   1e6f0:	91 f0       	breq	.+36     	; 0x1e716 <EVENT_USB_Device_UnhandledControlRequest+0x34c>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1e6f2:	80 91 5e 01 	lds	r24, 0x015E
   1e6f6:	90 91 5f 01 	lds	r25, 0x015F
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1e6fa:	ff d2       	rcall	.+1534   	; 0x1ecfa <eeprom_read_byte>
   1e6fc:	80 93 f1 00 	sts	0x00F1, r24
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_Byte(eeprom_read_byte((uint8_t*)StartAddr));
   1e700:	80 91 5e 01 	lds	r24, 0x015E
   1e704:	90 91 5f 01 	lds	r25, 0x015F
   1e708:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1e70a:	90 93 5f 01 	sts	0x015F, r25

						/* Adjust counters */
						StartAddr++;
   1e70e:	80 93 5e 01 	sts	0x015E, r24
   1e712:	21 97       	sbiw	r28, 0x01	; 1
   1e714:	e6 cf       	rjmp	.-52     	; 0x1e6e2 <EVENT_USB_Device_UnhandledControlRequest+0x318>
   1e716:	80 91 e8 00 	lds	r24, 0x00E8
   1e71a:	8e 7f       	andi	r24, 0xFE	; 254
   1e71c:	80 93 e8 00 	sts	0x00E8, r24
   1e720:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e724:	80 fd       	sbrc	r24, 0
   1e726:	e5 cf       	rjmp	.-54     	; 0x1e6f2 <EVENT_USB_Device_UnhandledControlRequest+0x328>
   1e728:	8e b3       	in	r24, 0x1e	; 30
   1e72a:	81 11       	cpse	r24, r1
   1e72c:	f9 cf       	rjmp	.-14     	; 0x1e720 <EVENT_USB_Device_UnhandledControlRequest+0x356>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e72e:	3b c0       	rjmp	.+118    	; 0x1e7a6 <EVENT_USB_Device_UnhandledControlRequest+0x3dc>
   1e730:	82 e0       	ldi	r24, 0x02	; 2
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1e732:	80 93 00 01 	sts	0x0100, r24
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e736:	80 91 e8 00 	lds	r24, 0x00E8
   1e73a:	8e 7f       	andi	r24, 0xFE	; 254
   1e73c:	80 93 e8 00 	sts	0x00E8, r24
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
   1e740:	26 c0       	rjmp	.+76     	; 0x1e78e <EVENT_USB_Device_UnhandledControlRequest+0x3c4>
   1e742:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e746:	87 7f       	andi	r24, 0xF7	; 247
   1e748:	80 93 e8 00 	sts	0x00E8, r24
   1e74c:	80 91 63 01 	lds	r24, 0x0163
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e750:	80 93 f1 00 	sts	0x00F1, r24
   1e754:	10 92 f1 00 	sts	0x00F1, r1
   1e758:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case REQ_DFU_GETSTATUS:
			Endpoint_ClearSETUP();

			/* Write 8-bit status value */
			Endpoint_Write_Byte(DFU_Status);
   1e75c:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1e760:	80 91 00 01 	lds	r24, 0x0100
   1e764:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
   1e768:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
   1e76c:	e4 cf       	rjmp	.-56     	; 0x1e736 <EVENT_USB_Device_UnhandledControlRequest+0x36c>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_Byte(0);
			Endpoint_Write_Word_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_Byte(DFU_State);
   1e76e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1e772:	87 7f       	andi	r24, 0xF7	; 247
   1e774:	80 93 e8 00 	sts	0x00E8, r24
   1e778:	10 92 63 01 	sts	0x0163, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e77c:	08 c0       	rjmp	.+16     	; 0x1e78e <EVENT_USB_Device_UnhandledControlRequest+0x3c4>
   1e77e:	80 91 e8 00 	lds	r24, 0x00E8
   1e782:	87 7f       	andi	r24, 0xF7	; 247
   1e784:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case REQ_DFU_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
   1e788:	80 91 00 01 	lds	r24, 0x0100
   1e78c:	64 cf       	rjmp	.-312    	; 0x1e656 <EVENT_USB_Device_UnhandledControlRequest+0x28c>
   1e78e:	df 91       	pop	r29
   1e790:	cf 91       	pop	r28
   1e792:	1f 91       	pop	r17
   1e794:	ff 90       	pop	r15
			break;
		case REQ_DFU_GETSTATE:
			Endpoint_ClearSETUP();

			/* Write the current device state to the endpoint */
			Endpoint_Write_Byte(DFU_State);
   1e796:	ef 90       	pop	r14
   1e798:	df 90       	pop	r13
   1e79a:	cf 90       	pop	r12
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
			break;
	}
}
   1e79c:	bf 90       	pop	r11
   1e79e:	af 90       	pop	r10
   1e7a0:	9f 90       	pop	r9
   1e7a2:	8f 90       	pop	r8
   1e7a4:	48 c0       	rjmp	.+144    	; 0x1e836 <Endpoint_ClearStatusStage>
   1e7a6:	df 91       	pop	r29
   1e7a8:	cf 91       	pop	r28
   1e7aa:	1f 91       	pop	r17
   1e7ac:	ff 90       	pop	r15
   1e7ae:	ef 90       	pop	r14
   1e7b0:	df 90       	pop	r13
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
   1e7b2:	cf 90       	pop	r12
   1e7b4:	bf 90       	pop	r11
			break;
	}
}
   1e7b6:	af 90       	pop	r10
   1e7b8:	9f 90       	pop	r9
   1e7ba:	8f 90       	pop	r8
   1e7bc:	08 95       	ret

0001e7be <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
   1e7be:	29 2f       	mov	r18, r25
   1e7c0:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e7c2:	22 30       	cpi	r18, 0x02	; 2
   1e7c4:	31 05       	cpc	r19, r1
   1e7c6:	59 f0       	breq	.+22     	; 0x1e7de <CALLBACK_USB_GetDescriptor+0x20>
   1e7c8:	23 30       	cpi	r18, 0x03	; 3
   1e7ca:	31 05       	cpc	r19, r1
   1e7cc:	69 f0       	breq	.+26     	; 0x1e7e8 <CALLBACK_USB_GetDescriptor+0x2a>
   1e7ce:	21 30       	cpi	r18, 0x01	; 1
   1e7d0:	31 05       	cpc	r19, r1
   1e7d2:	c1 f4       	brne	.+48     	; 0x1e804 <CALLBACK_USB_GetDescriptor+0x46>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1e7d4:	82 e1       	ldi	r24, 0x12	; 18
   1e7d6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1e7d8:	29 e4       	ldi	r18, 0x49	; 73
   1e7da:	31 e0       	ldi	r19, 0x01	; 1
   1e7dc:	17 c0       	rjmp	.+46     	; 0x1e80c <CALLBACK_USB_GetDescriptor+0x4e>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1e7de:	8b e1       	ldi	r24, 0x1B	; 27
   1e7e0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1e7e2:	2e e2       	ldi	r18, 0x2E	; 46
   1e7e4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1e7e6:	12 c0       	rjmp	.+36     	; 0x1e80c <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			if (!(DescriptorNumber))
   1e7e8:	81 11       	cpse	r24, r1
   1e7ea:	06 c0       	rjmp	.+12     	; 0x1e7f8 <CALLBACK_USB_GetDescriptor+0x3a>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1e7ec:	80 91 2a 01 	lds	r24, 0x012A
   1e7f0:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
   1e7f2:	2a e2       	ldi	r18, 0x2A	; 42
   1e7f4:	31 e0       	ldi	r19, 0x01	; 1
   1e7f6:	0a c0       	rjmp	.+20     	; 0x1e80c <CALLBACK_USB_GetDescriptor+0x4e>
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1e7f8:	80 91 02 01 	lds	r24, 0x0102
   1e7fc:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
   1e7fe:	22 e0       	ldi	r18, 0x02	; 2
   1e800:	31 e0       	ldi	r19, 0x01	; 1
   1e802:	04 c0       	rjmp	.+8      	; 0x1e80c <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1e804:	80 e0       	ldi	r24, 0x00	; 0
   1e806:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1e808:	20 e0       	ldi	r18, 0x00	; 0
   1e80a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
   1e80c:	fa 01       	movw	r30, r20
   1e80e:	31 83       	std	Z+1, r19	; 0x01
   1e810:	20 83       	st	Z, r18
	return Size;
}
   1e812:	08 95       	ret

0001e814 <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e814:	eb ee       	ldi	r30, 0xEB	; 235
   1e816:	f0 e0       	ldi	r31, 0x00	; 0
   1e818:	80 81       	ld	r24, Z
   1e81a:	81 60       	ori	r24, 0x01	; 1
   1e81c:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e81e:	ed ee       	ldi	r30, 0xED	; 237
   1e820:	f0 e0       	ldi	r31, 0x00	; 0
   1e822:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1e824:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1e828:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1e82a:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
   1e82e:	88 1f       	adc	r24, r24
   1e830:	88 27       	eor	r24, r24
   1e832:	88 1f       	adc	r24, r24
   1e834:	08 95       	ret

0001e836 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e836:	80 91 71 01 	lds	r24, 0x0171
   1e83a:	87 ff       	sbrs	r24, 7
   1e83c:	0f c0       	rjmp	.+30     	; 0x1e85c <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e83e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
   1e842:	82 fd       	sbrc	r24, 2
   1e844:	04 c0       	rjmp	.+8      	; 0x1e84e <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e846:	8e b3       	in	r24, 0x1e	; 30
   1e848:	81 11       	cpse	r24, r1
   1e84a:	f9 cf       	rjmp	.-14     	; 0x1e83e <Endpoint_ClearStatusStage+0x8>
   1e84c:	10 c0       	rjmp	.+32     	; 0x1e86e <Endpoint_ClearStatusStage+0x38>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e84e:	80 91 e8 00 	lds	r24, 0x00E8
   1e852:	8b 7f       	andi	r24, 0xFB	; 251
   1e854:	0a c0       	rjmp	.+20     	; 0x1e86a <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e856:	8e b3       	in	r24, 0x1e	; 30
   1e858:	88 23       	and	r24, r24
   1e85a:	49 f0       	breq	.+18     	; 0x1e86e <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e85c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1e860:	80 ff       	sbrs	r24, 0
   1e862:	f9 cf       	rjmp	.-14     	; 0x1e856 <Endpoint_ClearStatusStage+0x20>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e864:	80 91 e8 00 	lds	r24, 0x00E8
   1e868:	8e 7f       	andi	r24, 0xFE	; 254
   1e86a:	80 93 e8 00 	sts	0x00E8, r24
   1e86e:	08 95       	ret

0001e870 <USB_ShutDown>:
	USB_ResetInterface();
}

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
   1e870:	68 d0       	rcall	.+208    	; 0x1e942 <USB_INT_DisableAllInterrupts>
   1e872:	6f d0       	rcall	.+222    	; 0x1e952 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1e874:	e0 ee       	ldi	r30, 0xE0	; 224
   1e876:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e878:	80 81       	ld	r24, Z
   1e87a:	81 60       	ori	r24, 0x01	; 1
   1e87c:	80 83       	st	Z, r24
   1e87e:	e8 ed       	ldi	r30, 0xD8	; 216
   1e880:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
   1e882:	80 81       	ld	r24, Z
   1e884:	8f 77       	andi	r24, 0x7F	; 127
   1e886:	80 83       	st	Z, r24
   1e888:	19 bc       	out	0x29, r1	; 41
   1e88a:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
   1e88c:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
   1e88e:	8c 91       	ld	r24, X
   1e890:	8e 7f       	andi	r24, 0xFE	; 254
   1e892:	8c 93       	st	X, r24
   1e894:	80 81       	ld	r24, Z
   1e896:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
   1e898:	80 83       	st	Z, r24
   1e89a:	10 92 70 01 	sts	0x0170, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
   1e89e:	08 95       	ret

0001e8a0 <USB_ResetInterface>:
   1e8a0:	50 d0       	rcall	.+160    	; 0x1e942 <USB_INT_DisableAllInterrupts>
   1e8a2:	57 d0       	rcall	.+174    	; 0x1e952 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
   1e8a4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
   1e8a8:	98 2f       	mov	r25, r24
   1e8aa:	9f 77       	andi	r25, 0x7F	; 127

				USBCON = (Temp & ~(1 << USBE));
   1e8ac:	90 93 d8 00 	sts	0x00D8, r25
   1e8b0:	80 68       	ori	r24, 0x80	; 128
   1e8b2:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
   1e8b6:	8c e0       	ldi	r24, 0x0C	; 12
   1e8b8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   1e8ba:	89 b5       	in	r24, 0x29	; 41
   1e8bc:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
   1e8be:	89 bd       	out	0x29, r24	; 41
   1e8c0:	09 b4       	in	r0, 0x29	; 41
   1e8c2:	00 fe       	sbrs	r0, 0
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   1e8c4:	fd cf       	rjmp	.-6      	; 0x1e8c0 <USB_ResetInterface+0x20>
   1e8c6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1e8ca:	8f 7d       	andi	r24, 0xDF	; 223
   1e8cc:	80 93 d8 00 	sts	0x00D8, r24
   1e8d0:	80 91 d7 00 	lds	r24, 0x00D7

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1e8d4:	80 68       	ori	r24, 0x80	; 128
   1e8d6:	80 93 d7 00 	sts	0x00D7, r24
   1e8da:	1e ba       	out	0x1e, r1	; 30
   1e8dc:	10 92 6f 01 	sts	0x016F, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
   1e8e0:	80 91 e0 00 	lds	r24, 0x00E0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1e8e4:	8b 7f       	andi	r24, 0xFB	; 251
   1e8e6:	80 93 e0 00 	sts	0x00E0, r24
   1e8ea:	80 91 d8 00 	lds	r24, 0x00D8
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
   1e8ee:	81 60       	ori	r24, 0x01	; 1
   1e8f0:	80 93 d8 00 	sts	0x00D8, r24
   1e8f4:	42 e2       	ldi	r20, 0x22	; 34
   1e8f6:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
   1e8f8:	80 e0       	ldi	r24, 0x00	; 0
   1e8fa:	8c df       	rcall	.-232    	; 0x1e814 <Endpoint_ConfigureEndpoint_Prv>
   1e8fc:	80 91 e1 00 	lds	r24, 0x00E1
   1e900:	8e 7f       	andi	r24, 0xFE	; 254

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
   1e902:	80 93 e1 00 	sts	0x00E1, r24
   1e906:	80 91 e2 00 	lds	r24, 0x00E2
   1e90a:	81 60       	ori	r24, 0x01	; 1
	USB_INT_Enable(USB_INT_SUSPI);
   1e90c:	80 93 e2 00 	sts	0x00E2, r24
   1e910:	80 91 e2 00 	lds	r24, 0x00E2
   1e914:	88 60       	ori	r24, 0x08	; 8
	USB_INT_Enable(USB_INT_EORSTI);
   1e916:	80 93 e2 00 	sts	0x00E2, r24
   1e91a:	80 91 e0 00 	lds	r24, 0x00E0
   1e91e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1e920:	80 93 e0 00 	sts	0x00E0, r24
   1e924:	80 91 d8 00 	lds	r24, 0x00D8
   1e928:	80 61       	ori	r24, 0x10	; 16

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1e92a:	80 93 d8 00 	sts	0x00D8, r24
   1e92e:	08 95       	ret

0001e930 <USB_Init>:
   1e930:	e7 ed       	ldi	r30, 0xD7	; 215
   1e932:	f0 e0       	ldi	r31, 0x00	; 0
   1e934:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1e936:	81 60       	ori	r24, 0x01	; 1
   1e938:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1e93a:	81 e0       	ldi	r24, 0x01	; 1
   1e93c:	80 93 70 01 	sts	0x0170, r24

	USB_ResetInterface();
   1e940:	af cf       	rjmp	.-162    	; 0x1e8a0 <USB_ResetInterface>

0001e942 <USB_INT_DisableAllInterrupts>:
   1e942:	e8 ed       	ldi	r30, 0xD8	; 216
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1e944:	f0 e0       	ldi	r31, 0x00	; 0
   1e946:	80 81       	ld	r24, Z
   1e948:	8c 7f       	andi	r24, 0xFC	; 252
   1e94a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1e94c:	10 92 e2 00 	sts	0x00E2, r1
   1e950:	08 95       	ret

0001e952 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
   1e952:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
   1e956:	10 92 e1 00 	sts	0x00E1, r1
   1e95a:	08 95       	ret

0001e95c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1e95c:	1f 92       	push	r1
   1e95e:	0f 92       	push	r0
   1e960:	0f b6       	in	r0, 0x3f	; 63
   1e962:	0f 92       	push	r0
   1e964:	11 24       	eor	r1, r1
   1e966:	0b b6       	in	r0, 0x3b	; 59
   1e968:	0f 92       	push	r0
   1e96a:	2f 93       	push	r18
   1e96c:	3f 93       	push	r19
   1e96e:	4f 93       	push	r20
   1e970:	5f 93       	push	r21
   1e972:	6f 93       	push	r22
   1e974:	7f 93       	push	r23
   1e976:	8f 93       	push	r24
   1e978:	9f 93       	push	r25
   1e97a:	af 93       	push	r26
   1e97c:	bf 93       	push	r27
   1e97e:	ef 93       	push	r30
   1e980:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
   1e982:	80 91 da 00 	lds	r24, 0x00DA
   1e986:	80 ff       	sbrs	r24, 0
   1e988:	13 c0       	rjmp	.+38     	; 0x1e9b0 <__vector_10+0x54>
   1e98a:	80 91 d8 00 	lds	r24, 0x00D8
   1e98e:	80 ff       	sbrs	r24, 0
   1e990:	0f c0       	rjmp	.+30     	; 0x1e9b0 <__vector_10+0x54>
	{
		USB_INT_Clear(USB_INT_VBUS);
   1e992:	80 91 da 00 	lds	r24, 0x00DA
   1e996:	8e 7f       	andi	r24, 0xFE	; 254
   1e998:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1e99c:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
   1e9a0:	80 ff       	sbrs	r24, 0
   1e9a2:	04 c0       	rjmp	.+8      	; 0x1e9ac <__vector_10+0x50>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
   1e9a4:	81 e0       	ldi	r24, 0x01	; 1
   1e9a6:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1e9a8:	3d d1       	rcall	.+634    	; 0x1ec24 <USB_Event_Stub>
   1e9aa:	02 c0       	rjmp	.+4      	; 0x1e9b0 <__vector_10+0x54>
   1e9ac:	1e ba       	out	0x1e, r1	; 30
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
   1e9ae:	3a d1       	rcall	.+628    	; 0x1ec24 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
   1e9b0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1e9b4:	80 ff       	sbrs	r24, 0
   1e9b6:	1c c0       	rjmp	.+56     	; 0x1e9f0 <__vector_10+0x94>
   1e9b8:	80 91 e2 00 	lds	r24, 0x00E2
   1e9bc:	80 ff       	sbrs	r24, 0
   1e9be:	18 c0       	rjmp	.+48     	; 0x1e9f0 <__vector_10+0x94>
   1e9c0:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_SUSPI);
   1e9c4:	8e 7f       	andi	r24, 0xFE	; 254
   1e9c6:	80 93 e1 00 	sts	0x00E1, r24
   1e9ca:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_SUSPI);
   1e9ce:	8e 7f       	andi	r24, 0xFE	; 254
   1e9d0:	80 93 e2 00 	sts	0x00E2, r24
   1e9d4:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUPI);
   1e9d8:	80 61       	ori	r24, 0x10	; 16
   1e9da:	80 93 e2 00 	sts	0x00E2, r24
   1e9de:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1e9e2:	80 62       	ori	r24, 0x20	; 32
   1e9e4:	80 93 d8 00 	sts	0x00D8, r24
   1e9e8:	19 bc       	out	0x29, r1	; 41
   1e9ea:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
   1e9ec:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1e9ee:	1a d1       	rcall	.+564    	; 0x1ec24 <USB_Event_Stub>
   1e9f0:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1e9f4:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1e9f6:	2d c0       	rjmp	.+90     	; 0x1ea52 <__vector_10+0xf6>
   1e9f8:	80 91 e2 00 	lds	r24, 0x00E2
   1e9fc:	84 ff       	sbrs	r24, 4
   1e9fe:	29 c0       	rjmp	.+82     	; 0x1ea52 <__vector_10+0xf6>
   1ea00:	8c e0       	ldi	r24, 0x0C	; 12
   1ea02:	89 bd       	out	0x29, r24	; 41
   1ea04:	89 b5       	in	r24, 0x29	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   1ea06:	82 60       	ori	r24, 0x02	; 2
   1ea08:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
   1ea0a:	09 b4       	in	r0, 0x29	; 41
   1ea0c:	00 fe       	sbrs	r0, 0
   1ea0e:	fd cf       	rjmp	.-6      	; 0x1ea0a <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1ea10:	80 91 d8 00 	lds	r24, 0x00D8
   1ea14:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1ea16:	80 93 d8 00 	sts	0x00D8, r24
   1ea1a:	80 91 e1 00 	lds	r24, 0x00E1
   1ea1e:	8f 7e       	andi	r24, 0xEF	; 239
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
   1ea20:	80 93 e1 00 	sts	0x00E1, r24
   1ea24:	80 91 e2 00 	lds	r24, 0x00E2
   1ea28:	8f 7e       	andi	r24, 0xEF	; 239

		USB_INT_Disable(USB_INT_WAKEUPI);
   1ea2a:	80 93 e2 00 	sts	0x00E2, r24
   1ea2e:	80 91 e2 00 	lds	r24, 0x00E2
   1ea32:	81 60       	ori	r24, 0x01	; 1
		USB_INT_Enable(USB_INT_SUSPI);
   1ea34:	80 93 e2 00 	sts	0x00E2, r24
   1ea38:	80 91 6f 01 	lds	r24, 0x016F
   1ea3c:	81 11       	cpse	r24, r1

		if (USB_ConfigurationNumber)
   1ea3e:	06 c0       	rjmp	.+12     	; 0x1ea4c <__vector_10+0xf0>
   1ea40:	80 91 e3 00 	lds	r24, 0x00E3
   1ea44:	87 fd       	sbrc	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ea46:	02 c0       	rjmp	.+4      	; 0x1ea4c <__vector_10+0xf0>
   1ea48:	81 e0       	ldi	r24, 0x01	; 1
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ea4a:	01 c0       	rjmp	.+2      	; 0x1ea4e <__vector_10+0xf2>
   1ea4c:	84 e0       	ldi	r24, 0x04	; 4
   1ea4e:	8e bb       	out	0x1e, r24	; 30
   1ea50:	e9 d0       	rcall	.+466    	; 0x1ec24 <USB_Event_Stub>
   1ea52:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ea56:	83 ff       	sbrs	r24, 3
   1ea58:	21 c0       	rjmp	.+66     	; 0x1ea9c <__vector_10+0x140>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ea5a:	80 91 e2 00 	lds	r24, 0x00E2
   1ea5e:	83 ff       	sbrs	r24, 3
   1ea60:	1d c0       	rjmp	.+58     	; 0x1ea9c <__vector_10+0x140>
   1ea62:	80 91 e1 00 	lds	r24, 0x00E1
   1ea66:	87 7f       	andi	r24, 0xF7	; 247
   1ea68:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);
   1ea6c:	82 e0       	ldi	r24, 0x02	; 2
   1ea6e:	8e bb       	out	0x1e, r24	; 30
   1ea70:	10 92 6f 01 	sts	0x016F, r1

		USB_DeviceState         = DEVICE_STATE_Default;
   1ea74:	80 91 e1 00 	lds	r24, 0x00E1
		USB_ConfigurationNumber = 0;
   1ea78:	8e 7f       	andi	r24, 0xFE	; 254
   1ea7a:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Clear(USB_INT_SUSPI);
   1ea7e:	80 91 e2 00 	lds	r24, 0x00E2
   1ea82:	8e 7f       	andi	r24, 0xFE	; 254
   1ea84:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Disable(USB_INT_SUSPI);
   1ea88:	80 91 e2 00 	lds	r24, 0x00E2
   1ea8c:	80 61       	ori	r24, 0x10	; 16
   1ea8e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
   1ea92:	42 e2       	ldi	r20, 0x22	; 34
   1ea94:	60 e0       	ldi	r22, 0x00	; 0
   1ea96:	80 e0       	ldi	r24, 0x00	; 0
   1ea98:	bd de       	rcall	.-646    	; 0x1e814 <Endpoint_ConfigureEndpoint_Prv>
   1ea9a:	c4 d0       	rcall	.+392    	; 0x1ec24 <USB_Event_Stub>
   1ea9c:	ff 91       	pop	r31
   1ea9e:	ef 91       	pop	r30
   1eaa0:	bf 91       	pop	r27
   1eaa2:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1eaa4:	9f 91       	pop	r25
   1eaa6:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1eaa8:	7f 91       	pop	r23
   1eaaa:	6f 91       	pop	r22
   1eaac:	5f 91       	pop	r21
   1eaae:	4f 91       	pop	r20
   1eab0:	3f 91       	pop	r19
   1eab2:	2f 91       	pop	r18
   1eab4:	0f 90       	pop	r0
   1eab6:	0b be       	out	0x3b, r0	; 59
   1eab8:	0f 90       	pop	r0
   1eaba:	0f be       	out	0x3f, r0	; 63
   1eabc:	0f 90       	pop	r0
   1eabe:	1f 90       	pop	r1
   1eac0:	18 95       	reti

0001eac2 <USB_Device_ProcessControlRequest>:
   1eac2:	0f 93       	push	r16
   1eac4:	1f 93       	push	r17
   1eac6:	cf 93       	push	r28
   1eac8:	df 93       	push	r29
   1eaca:	00 d0       	rcall	.+0      	; 0x1eacc <USB_Device_ProcessControlRequest+0xa>
   1eacc:	cd b7       	in	r28, 0x3d	; 61
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1eace:	de b7       	in	r29, 0x3e	; 62
   1ead0:	e1 e7       	ldi	r30, 0x71	; 113
   1ead2:	f1 e0       	ldi	r31, 0x01	; 1
   1ead4:	88 e0       	ldi	r24, 0x08	; 8
   1ead6:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1ead8:	90 91 f1 00 	lds	r25, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
   1eadc:	91 93       	st	Z+, r25
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1eade:	8e 13       	cpse	r24, r30
   1eae0:	fb cf       	rjmp	.-10     	; 0x1ead8 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1eae2:	80 91 71 01 	lds	r24, 0x0171

	switch (USB_ControlRequest.bRequest)
   1eae6:	e0 91 72 01 	lds	r30, 0x0172
   1eaea:	4e 2f       	mov	r20, r30
   1eaec:	50 e0       	ldi	r21, 0x00	; 0
   1eaee:	4a 30       	cpi	r20, 0x0A	; 10
   1eaf0:	51 05       	cpc	r21, r1
   1eaf2:	08 f0       	brcs	.+2      	; 0x1eaf6 <USB_Device_ProcessControlRequest+0x34>
   1eaf4:	8e c0       	rjmp	.+284    	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
   1eaf6:	fa 01       	movw	r30, r20
   1eaf8:	e4 5b       	subi	r30, 0xB4	; 180
   1eafa:	ff 40       	sbci	r31, 0x0F	; 15
   1eafc:	f5 c0       	rjmp	.+490    	; 0x1ece8 <__tablejump2__>
   1eafe:	8d 7f       	andi	r24, 0xFD	; 253
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eb00:	80 38       	cpi	r24, 0x80	; 128
   1eb02:	09 f0       	breq	.+2      	; 0x1eb06 <USB_Device_ProcessControlRequest+0x44>
   1eb04:	86 c0       	rjmp	.+268    	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
   1eb06:	76 c0       	rjmp	.+236    	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1eb08:	8d 7f       	andi	r24, 0xFD	; 253
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eb0a:	09 f4       	brne	.+2      	; 0x1eb0e <USB_Device_ProcessControlRequest+0x4c>
   1eb0c:	73 c0       	rjmp	.+230    	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1eb0e:	81 c0       	rjmp	.+258    	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
   1eb10:	81 11       	cpse	r24, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1eb12:	7f c0       	rjmp	.+254    	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
   1eb14:	80 91 73 01 	lds	r24, 0x0173
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1eb18:	18 2f       	mov	r17, r24
   1eb1a:	1f 77       	andi	r17, 0x7F	; 127
   1eb1c:	0f b7       	in	r16, 0x3f	; 63

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1eb1e:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1eb20:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eb24:	87 7f       	andi	r24, 0xF7	; 247
   1eb26:	80 93 e8 00 	sts	0x00E8, r24
   1eb2a:	85 de       	rcall	.-758    	; 0x1e836 <Endpoint_ClearStatusStage>
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
   1eb2c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eb30:	80 ff       	sbrs	r24, 0
   1eb32:	fc cf       	rjmp	.-8      	; 0x1eb2c <USB_Device_ProcessControlRequest+0x6a>

		while (!(Endpoint_IsINReady()));
   1eb34:	11 11       	cpse	r17, r1
   1eb36:	02 c0       	rjmp	.+4      	; 0x1eb3c <USB_Device_ProcessControlRequest+0x7a>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1eb38:	82 e0       	ldi	r24, 0x02	; 2
   1eb3a:	01 c0       	rjmp	.+2      	; 0x1eb3e <USB_Device_ProcessControlRequest+0x7c>
   1eb3c:	83 e0       	ldi	r24, 0x03	; 3
   1eb3e:	8e bb       	out	0x1e, r24	; 30
   1eb40:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
   1eb44:	80 78       	andi	r24, 0x80	; 128
   1eb46:	81 2b       	or	r24, r17
   1eb48:	80 93 e3 00 	sts	0x00E3, r24
   1eb4c:	80 91 e3 00 	lds	r24, 0x00E3
				UDADDR |= (1 << ADDEN);
   1eb50:	80 68       	ori	r24, 0x80	; 128
   1eb52:	80 93 e3 00 	sts	0x00E3, r24
   1eb56:	0f bf       	out	0x3f, r16	; 63
   1eb58:	4d c0       	rjmp	.+154    	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1eb5a:	80 58       	subi	r24, 0x80	; 128
    __asm__ volatile ("" ::: "memory");
   1eb5c:	82 30       	cpi	r24, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eb5e:	08 f0       	brcs	.+2      	; 0x1eb62 <USB_Device_ProcessControlRequest+0xa0>
   1eb60:	58 c0       	rjmp	.+176    	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
   1eb62:	ae 01       	movw	r20, r28
   1eb64:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1eb66:	5f 4f       	sbci	r21, 0xFF	; 255
   1eb68:	60 91 75 01 	lds	r22, 0x0175
   1eb6c:	80 91 73 01 	lds	r24, 0x0173
   1eb70:	90 91 74 01 	lds	r25, 0x0174
   1eb74:	24 de       	rcall	.-952    	; 0x1e7be <CALLBACK_USB_GetDescriptor>
   1eb76:	bc 01       	movw	r22, r24
   1eb78:	89 2b       	or	r24, r25
   1eb7a:	09 f4       	brne	.+2      	; 0x1eb7e <USB_Device_ProcessControlRequest+0xbc>
   1eb7c:	3b c0       	rjmp	.+118    	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1eb7e:	90 91 e8 00 	lds	r25, 0x00E8
   1eb82:	97 7f       	andi	r25, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eb84:	90 93 e8 00 	sts	0x00E8, r25
   1eb88:	89 81       	ldd	r24, Y+1	; 0x01
   1eb8a:	9a 81       	ldd	r25, Y+2	; 0x02
   1eb8c:	4c d0       	rcall	.+152    	; 0x1ec26 <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1eb8e:	80 91 e8 00 	lds	r24, 0x00E8
   1eb92:	8b 7f       	andi	r24, 0xFB	; 251
   1eb94:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1eb98:	2d c0       	rjmp	.+90     	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1eb9a:	80 38       	cpi	r24, 0x80	; 128
   1eb9c:	d1 f5       	brne	.+116    	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
   1eb9e:	80 91 e8 00 	lds	r24, 0x00E8
				RequestHandled = true;
			}

			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1eba2:	87 7f       	andi	r24, 0xF7	; 247
   1eba4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eba8:	80 91 6f 01 	lds	r24, 0x016F
   1ebac:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
   1ebb0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1ebb4:	8e 7f       	andi	r24, 0xFE	; 254
   1ebb6:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ebba:	3d de       	rcall	.-902    	; 0x1e836 <Endpoint_ClearStatusStage>
   1ebbc:	1b c0       	rjmp	.+54     	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1ebbe:	81 11       	cpse	r24, r1
   1ebc0:	28 c0       	rjmp	.+80     	; 0x1ec12 <USB_Device_ProcessControlRequest+0x150>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ebc2:	90 91 73 01 	lds	r25, 0x0173
   1ebc6:	92 30       	cpi	r25, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ebc8:	a8 f4       	brcc	.+42     	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1ebca:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ebce:	87 7f       	andi	r24, 0xF7	; 247
   1ebd0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ebd4:	90 93 6f 01 	sts	0x016F, r25
   1ebd8:	2e de       	rcall	.-932    	; 0x1e836 <Endpoint_ClearStatusStage>
   1ebda:	80 91 6f 01 	lds	r24, 0x016F
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ebde:	81 11       	cpse	r24, r1
   1ebe0:	06 c0       	rjmp	.+12     	; 0x1ebee <USB_Device_ProcessControlRequest+0x12c>

	Endpoint_ClearStatusStage();
   1ebe2:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_ConfigurationNumber)
   1ebe6:	87 fd       	sbrc	r24, 7
   1ebe8:	02 c0       	rjmp	.+4      	; 0x1ebee <USB_Device_ProcessControlRequest+0x12c>
   1ebea:	81 e0       	ldi	r24, 0x01	; 1
   1ebec:	01 c0       	rjmp	.+2      	; 0x1ebf0 <USB_Device_ProcessControlRequest+0x12e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ebee:	84 e0       	ldi	r24, 0x04	; 4
   1ebf0:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ebf2:	18 d0       	rcall	.+48     	; 0x1ec24 <USB_Event_Stub>
   1ebf4:	80 91 e8 00 	lds	r24, 0x00E8
   1ebf8:	83 ff       	sbrs	r24, 3
   1ebfa:	0d c0       	rjmp	.+26     	; 0x1ec16 <USB_Device_ProcessControlRequest+0x154>
   1ebfc:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
   1ec00:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec02:	80 93 eb 00 	sts	0x00EB, r24
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();

	if (Endpoint_IsSETUPReceived())
   1ec06:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ec0a:	87 7f       	andi	r24, 0xF7	; 247
   1ec0c:	80 93 e8 00 	sts	0x00E8, r24
   1ec10:	02 c0       	rjmp	.+4      	; 0x1ec16 <USB_Device_ProcessControlRequest+0x154>
   1ec12:	db db       	rcall	.-2122   	; 0x1e3ca <EVENT_USB_Device_UnhandledControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ec14:	ef cf       	rjmp	.-34     	; 0x1ebf4 <USB_Device_ProcessControlRequest+0x132>
   1ec16:	0f 90       	pop	r0
   1ec18:	0f 90       	pop	r0
   1ec1a:	df 91       	pop	r29
   1ec1c:	cf 91       	pop	r28
   1ec1e:	1f 91       	pop	r17

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
   1ec20:	0f 91       	pop	r16
   1ec22:	08 95       	ret

0001ec24 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1ec24:	08 95       	ret

0001ec26 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1ec26:	20 91 77 01 	lds	r18, 0x0177
   1ec2a:	30 91 78 01 	lds	r19, 0x0178
   1ec2e:	26 17       	cp	r18, r22
   1ec30:	37 07       	cpc	r19, r23
   1ec32:	48 f0       	brcs	.+18     	; 0x1ec46 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1ec34:	61 15       	cp	r22, r1
   1ec36:	71 05       	cpc	r23, r1
   1ec38:	39 f4       	brne	.+14     	; 0x1ec48 <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ec3a:	20 91 e8 00 	lds	r18, 0x00E8
   1ec3e:	2e 7f       	andi	r18, 0xFE	; 254
   1ec40:	20 93 e8 00 	sts	0x00E8, r18
   1ec44:	01 c0       	rjmp	.+2      	; 0x1ec48 <Endpoint_Write_Control_Stream_LE+0x22>
   1ec46:	b9 01       	movw	r22, r18
   1ec48:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ec4a:	61 15       	cp	r22, r1
   1ec4c:	71 05       	cpc	r23, r1
   1ec4e:	81 f1       	breq	.+96     	; 0x1ecb0 <Endpoint_Write_Control_Stream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ec50:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ec52:	22 23       	and	r18, r18
   1ec54:	e9 f1       	breq	.+122    	; 0x1ecd0 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ec56:	25 30       	cpi	r18, 0x05	; 5
   1ec58:	e9 f1       	breq	.+122    	; 0x1ecd4 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec5a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ec5e:	23 fd       	sbrc	r18, 3
   1ec60:	35 c0       	rjmp	.+106    	; 0x1eccc <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ec62:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1ec66:	22 fd       	sbrc	r18, 2
   1ec68:	2b c0       	rjmp	.+86     	; 0x1ecc0 <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec6a:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1ec6e:	20 ff       	sbrs	r18, 0
   1ec70:	ec cf       	rjmp	.-40     	; 0x1ec4a <Endpoint_Write_Control_Stream_LE+0x24>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1ec72:	20 91 f2 00 	lds	r18, 0x00F2
   1ec76:	30 91 f3 00 	lds	r19, 0x00F3
   1ec7a:	fc 01       	movw	r30, r24
   1ec7c:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
   1ec7e:	61 15       	cp	r22, r1
   1ec80:	71 05       	cpc	r23, r1
   1ec82:	59 f0       	breq	.+22     	; 0x1ec9a <Endpoint_Write_Control_Stream_LE+0x74>
   1ec84:	20 32       	cpi	r18, 0x20	; 32
   1ec86:	31 05       	cpc	r19, r1
   1ec88:	40 f4       	brcc	.+16     	; 0x1ec9a <Endpoint_Write_Control_Stream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ec8a:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1ec8c:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
   1ec90:	61 50       	subi	r22, 0x01	; 1
   1ec92:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1ec94:	2f 5f       	subi	r18, 0xFF	; 255
   1ec96:	3f 4f       	sbci	r19, 0xFF	; 255
   1ec98:	f1 cf       	rjmp	.-30     	; 0x1ec7c <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
   1ec9a:	41 e0       	ldi	r20, 0x01	; 1
   1ec9c:	20 32       	cpi	r18, 0x20	; 32
   1ec9e:	31 05       	cpc	r19, r1
   1eca0:	09 f0       	breq	.+2      	; 0x1eca4 <Endpoint_Write_Control_Stream_LE+0x7e>
   1eca2:	40 e0       	ldi	r20, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1eca4:	20 91 e8 00 	lds	r18, 0x00E8
   1eca8:	2e 7f       	andi	r18, 0xFE	; 254
   1ecaa:	20 93 e8 00 	sts	0x00E8, r18
   1ecae:	cd cf       	rjmp	.-102    	; 0x1ec4a <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ecb0:	41 11       	cpse	r20, r1
   1ecb2:	ce cf       	rjmp	.-100    	; 0x1ec50 <Endpoint_Write_Control_Stream_LE+0x2a>
   1ecb4:	05 c0       	rjmp	.+10     	; 0x1ecc0 <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ecb6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ecb8:	88 23       	and	r24, r24
   1ecba:	51 f0       	breq	.+20     	; 0x1ecd0 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ecbc:	85 30       	cpi	r24, 0x05	; 5
   1ecbe:	51 f0       	breq	.+20     	; 0x1ecd4 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ecc0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1ecc4:	82 ff       	sbrs	r24, 2
   1ecc6:	f7 cf       	rjmp	.-18     	; 0x1ecb6 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1ecc8:	80 e0       	ldi	r24, 0x00	; 0
   1ecca:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1eccc:	81 e0       	ldi	r24, 0x01	; 1
   1ecce:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1ecd0:	82 e0       	ldi	r24, 0x02	; 2
   1ecd2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1ecd4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ecd6:	08 95       	ret

0001ecd8 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1ecd8:	8e b3       	in	r24, 0x1e	; 30
   1ecda:	88 23       	and	r24, r24
   1ecdc:	21 f0       	breq	.+8      	; 0x1ece6 <USB_USBTask+0xe>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ecde:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1ece2:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
   1ece4:	ee ce       	rjmp	.-548    	; 0x1eac2 <USB_Device_ProcessControlRequest>
   1ece6:	08 95       	ret

0001ece8 <__tablejump2__>:
   1ece8:	ee 0f       	add	r30, r30
   1ecea:	ff 1f       	adc	r31, r31
   1ecec:	00 24       	eor	r0, r0
   1ecee:	00 1c       	adc	r0, r0
   1ecf0:	0b be       	out	0x3b, r0	; 59
   1ecf2:	07 90       	elpm	r0, Z+
   1ecf4:	f6 91       	elpm	r31, Z
   1ecf6:	e0 2d       	mov	r30, r0
   1ecf8:	09 94       	ijmp

0001ecfa <eeprom_read_byte>:
   1ecfa:	f9 99       	sbic	0x1f, 1	; 31
   1ecfc:	fe cf       	rjmp	.-4      	; 0x1ecfa <eeprom_read_byte>
   1ecfe:	92 bd       	out	0x22, r25	; 34
   1ed00:	81 bd       	out	0x21, r24	; 33
   1ed02:	f8 9a       	sbi	0x1f, 0	; 31
   1ed04:	99 27       	eor	r25, r25
   1ed06:	80 b5       	in	r24, 0x20	; 32
   1ed08:	08 95       	ret

0001ed0a <eeprom_write_byte>:
   1ed0a:	26 2f       	mov	r18, r22

0001ed0c <eeprom_write_r18>:
   1ed0c:	f9 99       	sbic	0x1f, 1	; 31
   1ed0e:	fe cf       	rjmp	.-4      	; 0x1ed0c <eeprom_write_r18>
   1ed10:	1f ba       	out	0x1f, r1	; 31
   1ed12:	92 bd       	out	0x22, r25	; 34
   1ed14:	81 bd       	out	0x21, r24	; 33
   1ed16:	20 bd       	out	0x20, r18	; 32
   1ed18:	0f b6       	in	r0, 0x3f	; 63
   1ed1a:	f8 94       	cli
   1ed1c:	fa 9a       	sbi	0x1f, 2	; 31
   1ed1e:	f9 9a       	sbi	0x1f, 1	; 31
   1ed20:	0f be       	out	0x3f, r0	; 63
   1ed22:	01 96       	adiw	r24, 0x01	; 1
   1ed24:	08 95       	ret

0001ed26 <_exit>:
   1ed26:	f8 94       	cli

0001ed28 <__stop_program>:
   1ed28:	ff cf       	rjmp	.-2      	; 0x1ed28 <__stop_program>
