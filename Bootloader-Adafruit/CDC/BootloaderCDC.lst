   1               		.file	"BootloaderCDC.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB89:
  14               		.file 1 "BootloaderCDC.c"
   1:BootloaderCDC.c **** /*
   2:BootloaderCDC.c ****              LUFA Library
   3:BootloaderCDC.c ****      Copyright (C) Dean Camera, 2010.
   4:BootloaderCDC.c **** 
   5:BootloaderCDC.c ****   dean [at] fourwalledcubicle [dot] com
   6:BootloaderCDC.c ****       www.fourwalledcubicle.com
   7:BootloaderCDC.c **** */
   8:BootloaderCDC.c **** 
   9:BootloaderCDC.c **** /*
  10:BootloaderCDC.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:BootloaderCDC.c **** 
  12:BootloaderCDC.c ****   Permission to use, copy, modify, distribute, and sell this
  13:BootloaderCDC.c ****   software and its documentation for any purpose is hereby granted
  14:BootloaderCDC.c ****   without fee, provided that the above copyright notice appear in
  15:BootloaderCDC.c ****   all copies and that both that the copyright notice and this
  16:BootloaderCDC.c ****   permission notice and warranty disclaimer appear in supporting
  17:BootloaderCDC.c ****   documentation, and that the name of the author not be used in
  18:BootloaderCDC.c ****   advertising or publicity pertaining to distribution of the
  19:BootloaderCDC.c ****   software without specific, written prior permission.
  20:BootloaderCDC.c **** 
  21:BootloaderCDC.c ****   The author disclaim all warranties with regard to this
  22:BootloaderCDC.c ****   software, including all implied warranties of merchantability
  23:BootloaderCDC.c ****   and fitness.  In no event shall the author be liable for any
  24:BootloaderCDC.c ****   special, indirect or consequential damages or any damages
  25:BootloaderCDC.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:BootloaderCDC.c ****   in an action of contract, negligence or other tortious action,
  27:BootloaderCDC.c ****   arising out of or in connection with the use or performance of
  28:BootloaderCDC.c ****   this software.
  29:BootloaderCDC.c **** */
  30:BootloaderCDC.c **** 
  31:BootloaderCDC.c **** /** \file
  32:BootloaderCDC.c ****  *
  33:BootloaderCDC.c ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  34:BootloaderCDC.c ****  */
  35:BootloaderCDC.c **** 
  36:BootloaderCDC.c **** #define  INCLUDE_FROM_BOOTLOADERCDC_C
  37:BootloaderCDC.c **** #include "BootloaderCDC.h"
  38:BootloaderCDC.c **** 
  39:BootloaderCDC.c **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  40:BootloaderCDC.c ****  *  operating systems will not open the port unless the settings can be set successfully.
  41:BootloaderCDC.c ****  */
  42:BootloaderCDC.c **** CDC_Line_Coding_t LineEncoding = { .BaudRateBPS = 0,
  43:BootloaderCDC.c ****                                    .CharFormat  = OneStopBit,
  44:BootloaderCDC.c ****                                    .ParityType  = Parity_None,
  45:BootloaderCDC.c ****                                    .DataBits    = 8            };
  46:BootloaderCDC.c **** 
  47:BootloaderCDC.c **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  48:BootloaderCDC.c ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  49:BootloaderCDC.c ****  *  command.)
  50:BootloaderCDC.c ****  */
  51:BootloaderCDC.c **** uint32_t CurrAddress;
  52:BootloaderCDC.c **** 
  53:BootloaderCDC.c **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  54:BootloaderCDC.c ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  55:BootloaderCDC.c ****  *  loop until the AVR restarts and the application runs.
  56:BootloaderCDC.c ****  */
  57:BootloaderCDC.c **** bool RunBootloader = true;
  58:BootloaderCDC.c **** 
  59:BootloaderCDC.c **** /* Adafruit Mods - make the bootloader 'time out' after 10 seconds */
  60:BootloaderCDC.c **** #define BOOTLOADTIMEOUT 5  // in approx 1/2 seconds units :)
  61:BootloaderCDC.c **** volatile uint8_t boottimeout = 0;  // the counter we'll use
  62:BootloaderCDC.c **** 
  63:BootloaderCDC.c **** // the pointer to user land
  64:BootloaderCDC.c **** void (*app_start)(void) = 0x0000;
  65:BootloaderCDC.c **** 
  66:BootloaderCDC.c **** // we'll pulse the onboard LED to indicate the bootloader
  67:BootloaderCDC.c **** #define BOARD_MICROTOUCH 1
  68:BootloaderCDC.c **** #define BOARD_ADAFRUIT32U4 2
  69:BootloaderCDC.c **** #define BOARD_FLORA 3
  70:BootloaderCDC.c **** 
  71:BootloaderCDC.c **** #if BOARD == BOARD_MICROTOUCH
  72:BootloaderCDC.c ****    #define BOOTLOADERLED_DDR DDRC
  73:BootloaderCDC.c ****    #define BOOTLOADERLED_PORT PORTC
  74:BootloaderCDC.c ****    #define BOOTLOADERLED 7
  75:BootloaderCDC.c **** #endif
  76:BootloaderCDC.c **** #if BOARD == BOARD_ADAFRUIT32U4
  77:BootloaderCDC.c ****    #define BOOTLOADERLED_DDR DDRE
  78:BootloaderCDC.c ****    #define BOOTLOADERLED_PORT PORTE
  79:BootloaderCDC.c ****    #define BOOTLOADERLED 6
  80:BootloaderCDC.c **** #endif
  81:BootloaderCDC.c **** #if BOARD == BOARD_FLORA
  82:BootloaderCDC.c ****    #define BOOTLOADERLED_DDR DDRE
  83:BootloaderCDC.c ****    #define BOOTLOADERLED_PORT PORTE
  84:BootloaderCDC.c ****    #define BOOTLOADERLED 6
  85:BootloaderCDC.c **** #endif
  86:BootloaderCDC.c **** 
  87:BootloaderCDC.c **** #include <util/delay.h>
  88:BootloaderCDC.c **** 
  89:BootloaderCDC.c **** void blink(uint8_t b) {
  90:BootloaderCDC.c ****   BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
  91:BootloaderCDC.c ****   while (b--) {
  92:BootloaderCDC.c ****     _delay_ms(100);
  93:BootloaderCDC.c ****     BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
  94:BootloaderCDC.c ****     _delay_ms(100);
  95:BootloaderCDC.c ****     BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED); 
  96:BootloaderCDC.c ****     _delay_ms(100);
  97:BootloaderCDC.c ****   }
  98:BootloaderCDC.c **** }
  99:BootloaderCDC.c **** bool USBConnected()
 100:BootloaderCDC.c **** {
 101:BootloaderCDC.c ****   uint8_t f = UDFNUML;
 102:BootloaderCDC.c ****  _delay_ms(3);
 103:BootloaderCDC.c ****  return (f != UDFNUML);
 104:BootloaderCDC.c **** }
 105:BootloaderCDC.c **** 
 106:BootloaderCDC.c **** /* End Adafruit Mods */
 107:BootloaderCDC.c **** 
 108:BootloaderCDC.c **** 
 109:BootloaderCDC.c **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 110:BootloaderCDC.c ****  *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the wat
 111:BootloaderCDC.c ****  *  the loaded application code.
 112:BootloaderCDC.c ****  */
 113:BootloaderCDC.c **** int main(void)
 114:BootloaderCDC.c **** {
 115:BootloaderCDC.c ****   /* Adafruit Mods - unless they pressed the button, get out of the bootloader and into userland */
 116:BootloaderCDC.c ****   char ch = MCUSR;
 117:BootloaderCDC.c ****   MCUSR = 0;
 118:BootloaderCDC.c **** 
 119:BootloaderCDC.c **** 
 120:BootloaderCDC.c ****   WDTCSR |= _BV(WDCE) | _BV(WDE); // turn off watchdog timer!
 121:BootloaderCDC.c ****   WDTCSR = 0;
 122:BootloaderCDC.c **** 
 123:BootloaderCDC.c **** #if BOARD == BOARD_MICROTOUCH
 124:BootloaderCDC.c ****   DDRF |= _BV(PF0);
 125:BootloaderCDC.c ****   if (ch == _BV(BORF)) {
 126:BootloaderCDC.c ****     PORTF &= ~_BV(PF0);
 127:BootloaderCDC.c ****   } else {
 128:BootloaderCDC.c ****     PORTF |= _BV(PF0);
 129:BootloaderCDC.c ****   }
 130:BootloaderCDC.c **** 
 131:BootloaderCDC.c ****   //blink(ch);
 132:BootloaderCDC.c ****   //_delay_ms(1000);
 133:BootloaderCDC.c ****   blink(ch);
 134:BootloaderCDC.c ****   
 135:BootloaderCDC.c **** #endif
 136:BootloaderCDC.c **** 
 137:BootloaderCDC.c ****   boottimeout = 0;
 138:BootloaderCDC.c **** 
 139:BootloaderCDC.c ****   if (! (ch &  _BV(EXTRF)) &&  (pgm_read_word_near(0) != 0xFFFF)) {
 140:BootloaderCDC.c ****     // if its a not an external reset...
 141:BootloaderCDC.c ****     app_start();  // skip bootloader
 142:BootloaderCDC.c ****   }
 143:BootloaderCDC.c **** 
 144:BootloaderCDC.c ****   /* End Adafruit Mods */
 145:BootloaderCDC.c **** 
 146:BootloaderCDC.c **** 	/* Setup hardware required for the bootloader */
 147:BootloaderCDC.c **** 	SetupHardware();
 148:BootloaderCDC.c **** 
 149:BootloaderCDC.c **** 	// adafruit board - turn on the LED to indicate the bootloader is active 
 150:BootloaderCDC.c **** 
 151:BootloaderCDC.c **** 	BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
 152:BootloaderCDC.c **** 	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
 153:BootloaderCDC.c **** 
 154:BootloaderCDC.c **** 	uint16_t blinkycounter = 0;
 155:BootloaderCDC.c **** 	uint8_t pwmcounter = 0; // for the LED pulsing
 156:BootloaderCDC.c **** 	uint8_t brightness = 0; // for the LED pulsing
 157:BootloaderCDC.c **** 	int8_t pulsedirection = 1;
 158:BootloaderCDC.c **** 	// end adafruit mods
 159:BootloaderCDC.c **** 
 160:BootloaderCDC.c **** 	/* Enable global interrupts so that the USB stack can function */
 161:BootloaderCDC.c **** 	sei();
 162:BootloaderCDC.c **** 
 163:BootloaderCDC.c **** 	while (RunBootloader)
 164:BootloaderCDC.c **** 	{
 165:BootloaderCDC.c **** 		CDC_Task();
 166:BootloaderCDC.c **** 		USB_USBTask();
 167:BootloaderCDC.c **** 		
 168:BootloaderCDC.c **** 		// Adafruit mods = we'll pulse an LED to indicate the bootloader is active
 169:BootloaderCDC.c **** 		pwmcounter++;
 170:BootloaderCDC.c **** 		
 171:BootloaderCDC.c **** 		// after each PWM cycle, increase/decrease the brightness
 172:BootloaderCDC.c **** 		if (pwmcounter == 0) {
 173:BootloaderCDC.c **** 		  brightness += pulsedirection;
 174:BootloaderCDC.c **** 		  BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
 175:BootloaderCDC.c **** 		}
 176:BootloaderCDC.c **** 
 177:BootloaderCDC.c **** 		// PWM compare match
 178:BootloaderCDC.c **** 		if (pwmcounter == brightness) {
 179:BootloaderCDC.c **** 		  BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED);
 180:BootloaderCDC.c **** 		}
 181:BootloaderCDC.c **** 
 182:BootloaderCDC.c **** 		// make the bootloade LED pulse up and down
 183:BootloaderCDC.c **** 		if (brightness == 255) {
 184:BootloaderCDC.c **** 		  pulsedirection = -1;
 185:BootloaderCDC.c **** 		}
 186:BootloaderCDC.c **** 		if ((brightness == 0) && (pulsedirection != 1)) {
 187:BootloaderCDC.c **** 		  pulsedirection = 1;
 188:BootloaderCDC.c **** 
 189:BootloaderCDC.c **** 		  // each full pulse takes about one second
 190:BootloaderCDC.c **** 		  boottimeout++;
 191:BootloaderCDC.c **** 		} 
 192:BootloaderCDC.c **** 		
 193:BootloaderCDC.c **** 		// we took a long time, lets restart
 194:BootloaderCDC.c **** 		if (boottimeout >= BOOTLOADTIMEOUT) {
 195:BootloaderCDC.c **** 		  // check to see if we have any code loaded. if the first byte is blank, we shouldn't go
 196:BootloaderCDC.c **** 		  if (pgm_read_word_near(0) != 0xFFFF) {
 197:BootloaderCDC.c **** 		    // jump to code
 198:BootloaderCDC.c **** 		    RunBootloader = false;
 199:BootloaderCDC.c **** 		  }
 200:BootloaderCDC.c **** 		}
 201:BootloaderCDC.c **** 	}
 202:BootloaderCDC.c **** 
 203:BootloaderCDC.c **** 	/* Disconnect from the host - USB interface will be reset later along with the AVR */
 204:BootloaderCDC.c **** 	USB_Detach();
 205:BootloaderCDC.c **** 
 206:BootloaderCDC.c **** 	/* Enable the watchdog and force a timeout to reset the AVR */
 207:BootloaderCDC.c **** 	wdt_enable(WDTO_250MS);
 208:BootloaderCDC.c **** 
 209:BootloaderCDC.c **** 	for (;;);
 210:BootloaderCDC.c **** }
 211:BootloaderCDC.c **** 
 212:BootloaderCDC.c **** /** Configures all hardware required for the bootloader. */
 213:BootloaderCDC.c **** void SetupHardware(void)
 214:BootloaderCDC.c **** {
 215:BootloaderCDC.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 216:BootloaderCDC.c **** 	MCUSR &= ~(1 << WDRF);
 217:BootloaderCDC.c **** 	wdt_disable();
 218:BootloaderCDC.c **** 
 219:BootloaderCDC.c **** 	/* Disable clock division */
 220:BootloaderCDC.c **** 	clock_prescale_set(clock_div_1);
 221:BootloaderCDC.c **** 
 222:BootloaderCDC.c **** 	/* Relocate the interrupt vector table to the bootloader section */
 223:BootloaderCDC.c **** 	MCUCR = (1 << IVCE);
 224:BootloaderCDC.c **** 	MCUCR = (1 << IVSEL);
 225:BootloaderCDC.c **** 
 226:BootloaderCDC.c **** 	/* Initialize USB Subsystem */
 227:BootloaderCDC.c **** 	USB_Init();
 228:BootloaderCDC.c **** }
 229:BootloaderCDC.c **** 
 230:BootloaderCDC.c **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 231:BootloaderCDC.c ****  *  to relay data to and from the attached USB host.
 232:BootloaderCDC.c ****  */
 233:BootloaderCDC.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 234:BootloaderCDC.c **** {
 235:BootloaderCDC.c **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 236:BootloaderCDC.c **** 	Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 237:BootloaderCDC.c **** 	                           ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 238:BootloaderCDC.c **** 	                           ENDPOINT_BANK_SINGLE);
 239:BootloaderCDC.c **** 
 240:BootloaderCDC.c **** 	Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 241:BootloaderCDC.c **** 	                           ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 242:BootloaderCDC.c **** 	                           ENDPOINT_BANK_SINGLE);
 243:BootloaderCDC.c **** 
 244:BootloaderCDC.c **** 	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 245:BootloaderCDC.c **** 	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 246:BootloaderCDC.c **** 	                           ENDPOINT_BANK_SINGLE);
 247:BootloaderCDC.c **** }
 248:BootloaderCDC.c **** 
 249:BootloaderCDC.c **** /** Event handler for the USB_UnhandledControlRequest event. This is used to catch standard and cla
 250:BootloaderCDC.c ****  *  control requests that are not handled internally by the USB library (including the CDC control 
 251:BootloaderCDC.c ****  *  which are all issued via the control endpoint), so that they can be handled appropriately for t
 252:BootloaderCDC.c ****  */
 253:BootloaderCDC.c **** void EVENT_USB_Device_UnhandledControlRequest(void)
 254:BootloaderCDC.c **** {
 255:BootloaderCDC.c **** 	/* Process CDC specific control requests */
 256:BootloaderCDC.c **** 	switch (USB_ControlRequest.bRequest)
 257:BootloaderCDC.c **** 	{
 258:BootloaderCDC.c **** 		case REQ_GetLineEncoding:
 259:BootloaderCDC.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 260:BootloaderCDC.c **** 			{
 261:BootloaderCDC.c **** 				Endpoint_ClearSETUP();
 262:BootloaderCDC.c **** 
 263:BootloaderCDC.c **** 				/* Write the line coding data to the control endpoint */
 264:BootloaderCDC.c **** 				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
 265:BootloaderCDC.c **** 				Endpoint_ClearOUT();
 266:BootloaderCDC.c **** 			}
 267:BootloaderCDC.c **** 
 268:BootloaderCDC.c **** 			break;
 269:BootloaderCDC.c **** 		case REQ_SetLineEncoding:
 270:BootloaderCDC.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 271:BootloaderCDC.c **** 			{
 272:BootloaderCDC.c **** 				Endpoint_ClearSETUP();
 273:BootloaderCDC.c **** 
 274:BootloaderCDC.c **** 				/* Read the line coding data in from the host into the global struct */
 275:BootloaderCDC.c **** 				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
 276:BootloaderCDC.c **** 				Endpoint_ClearIN();
 277:BootloaderCDC.c **** 			}
 278:BootloaderCDC.c **** 
 279:BootloaderCDC.c **** 			break;
 280:BootloaderCDC.c **** 	}
 281:BootloaderCDC.c **** }
 282:BootloaderCDC.c **** 
 283:BootloaderCDC.c **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 284:BootloaderCDC.c ****  *  on the AVR910 protocol command issued.
 285:BootloaderCDC.c ****  *
 286:BootloaderCDC.c ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 287:BootloaderCDC.c ****  */
 288:BootloaderCDC.c **** static void ReadWriteMemoryBlock(const uint8_t Command)
 289:BootloaderCDC.c **** {
 290:BootloaderCDC.c **** 	uint16_t BlockSize;
 291:BootloaderCDC.c **** 	char     MemoryType;
 292:BootloaderCDC.c **** 
 293:BootloaderCDC.c **** 	bool     HighByte = false;
 294:BootloaderCDC.c **** 	uint8_t  LowByte  = 0;
 295:BootloaderCDC.c **** 
 296:BootloaderCDC.c **** 	BlockSize  = (FetchNextCommandByte() << 8);
 297:BootloaderCDC.c **** 	BlockSize |=  FetchNextCommandByte();
 298:BootloaderCDC.c **** 
 299:BootloaderCDC.c **** 	MemoryType =  FetchNextCommandByte();
 300:BootloaderCDC.c **** 
 301:BootloaderCDC.c **** 	if ((MemoryType != 'E') && (MemoryType != 'F'))
 302:BootloaderCDC.c **** 	{
 303:BootloaderCDC.c **** 		/* Send error byte back to the host */
 304:BootloaderCDC.c **** 		WriteNextResponseByte('?');
 305:BootloaderCDC.c **** 
 306:BootloaderCDC.c **** 		return;
 307:BootloaderCDC.c **** 	}
 308:BootloaderCDC.c **** 
 309:BootloaderCDC.c **** 	/* Check if command is to read memory */
 310:BootloaderCDC.c **** 	if (Command == 'g')
 311:BootloaderCDC.c **** 	{
 312:BootloaderCDC.c **** 		/* Re-enable RWW section */
 313:BootloaderCDC.c **** 		boot_rww_enable();
 314:BootloaderCDC.c **** 
 315:BootloaderCDC.c **** 		while (BlockSize--)
 316:BootloaderCDC.c **** 		{
 317:BootloaderCDC.c **** 			if (MemoryType == 'F')
 318:BootloaderCDC.c **** 			{
 319:BootloaderCDC.c **** 				/* Read the next FLASH byte from the current FLASH page */
 320:BootloaderCDC.c **** 				#if (FLASHEND > 0xFFFF)
 321:BootloaderCDC.c **** 				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 322:BootloaderCDC.c **** 				#else
 323:BootloaderCDC.c **** 				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 324:BootloaderCDC.c **** 				#endif
 325:BootloaderCDC.c **** 
 326:BootloaderCDC.c **** 				/* If both bytes in current word have been read, increment the address counter */
 327:BootloaderCDC.c **** 				if (HighByte)
 328:BootloaderCDC.c **** 				  CurrAddress += 2;
 329:BootloaderCDC.c **** 
 330:BootloaderCDC.c **** 				HighByte = !HighByte;
 331:BootloaderCDC.c **** 			}
 332:BootloaderCDC.c **** 			else
 333:BootloaderCDC.c **** 			{
 334:BootloaderCDC.c **** 				/* Read the next EEPROM byte into the endpoint */
 335:BootloaderCDC.c **** 				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 336:BootloaderCDC.c **** 
 337:BootloaderCDC.c **** 				/* Increment the address counter after use */
 338:BootloaderCDC.c **** 				CurrAddress += 2;
 339:BootloaderCDC.c **** 			}
 340:BootloaderCDC.c **** 		}
 341:BootloaderCDC.c **** 	}
 342:BootloaderCDC.c **** 	else
 343:BootloaderCDC.c **** 	{
 344:BootloaderCDC.c **** 		uint32_t PageStartAddress = CurrAddress;
 345:BootloaderCDC.c **** 
 346:BootloaderCDC.c **** 		if (MemoryType == 'F')
 347:BootloaderCDC.c **** 		{
 348:BootloaderCDC.c **** 			boot_page_erase(PageStartAddress);
 349:BootloaderCDC.c **** 			boot_spm_busy_wait();
 350:BootloaderCDC.c **** 		}
 351:BootloaderCDC.c **** 
 352:BootloaderCDC.c **** 		while (BlockSize--)
 353:BootloaderCDC.c **** 		{
 354:BootloaderCDC.c **** 			if (MemoryType == 'F')
 355:BootloaderCDC.c **** 			{
 356:BootloaderCDC.c **** 				/* If both bytes in current word have been written, increment the address counter */
 357:BootloaderCDC.c **** 				if (HighByte)
 358:BootloaderCDC.c **** 				{
 359:BootloaderCDC.c **** 					/* Write the next FLASH word to the current FLASH page */
 360:BootloaderCDC.c **** 					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 361:BootloaderCDC.c **** 
 362:BootloaderCDC.c **** 					/* Increment the address counter after use */
 363:BootloaderCDC.c **** 					CurrAddress += 2;
 364:BootloaderCDC.c **** 
 365:BootloaderCDC.c **** 					HighByte = false;
 366:BootloaderCDC.c **** 				}
 367:BootloaderCDC.c **** 				else
 368:BootloaderCDC.c **** 				{
 369:BootloaderCDC.c **** 					LowByte = FetchNextCommandByte();
 370:BootloaderCDC.c **** 
 371:BootloaderCDC.c **** 					HighByte = true;
 372:BootloaderCDC.c **** 				}
 373:BootloaderCDC.c **** 			}
 374:BootloaderCDC.c **** 			else
 375:BootloaderCDC.c **** 			{
 376:BootloaderCDC.c **** 				/* Write the next EEPROM byte from the endpoint */
 377:BootloaderCDC.c **** 				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 378:BootloaderCDC.c **** 
 379:BootloaderCDC.c **** 				/* Increment the address counter after use */
 380:BootloaderCDC.c **** 				CurrAddress += 2;
 381:BootloaderCDC.c **** 			}
 382:BootloaderCDC.c **** 		}
 383:BootloaderCDC.c **** 
 384:BootloaderCDC.c **** 		/* If in FLASH programming mode, commit the page after writing */
 385:BootloaderCDC.c **** 		if (MemoryType == 'F')
 386:BootloaderCDC.c **** 		{
 387:BootloaderCDC.c **** 			/* Commit the flash page to memory */
 388:BootloaderCDC.c **** 			boot_page_write(PageStartAddress);
 389:BootloaderCDC.c **** 
 390:BootloaderCDC.c **** 			/* Wait until write operation has completed */
 391:BootloaderCDC.c **** 			boot_spm_busy_wait();
 392:BootloaderCDC.c **** 		}
 393:BootloaderCDC.c **** 
 394:BootloaderCDC.c **** 		/* Send response byte back to the host */
 395:BootloaderCDC.c **** 		WriteNextResponseByte('\r');
 396:BootloaderCDC.c **** 	}
 397:BootloaderCDC.c **** }
 398:BootloaderCDC.c **** 
 399:BootloaderCDC.c **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 400:BootloaderCDC.c ****  *  to allow reception of the next data packet from the host.
 401:BootloaderCDC.c ****  *
 402:BootloaderCDC.c ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 403:BootloaderCDC.c ****  */
 404:BootloaderCDC.c **** static uint8_t FetchNextCommandByte(void)
 405:BootloaderCDC.c **** {
  15               		.loc 1 405 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB93:
  23               	.LBB94:
  24               		.file 2 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @{
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				{
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				}
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearEndpoints(void);
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG0XData,
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG1XData);
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	#endif
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 151:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 152:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                        (0 << EPDIR)
 153:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 154:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 155:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 156:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 157:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                         (1 << EPDIR)
 158:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 159:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 160:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 161:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 162:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 163:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 164:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 165:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 166:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 167:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 168:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 169:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 170:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 171:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 172:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 173:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 174:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 175:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 176:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                      0
 177:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 178:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 179:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 180:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 181:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 182:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 183:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 184:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 185:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 186:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 187:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 188:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                     0x07
 189:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 190:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 191:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 192:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 193:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                     0x80
 194:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 195:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 196:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 197:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 198:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                    0x7F
 199:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 200:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 201:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 202:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 203:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 204:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 205:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 206:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the total number of banks supported by the given endpoint.
 207:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 208:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 209:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 210:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 211:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 212:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 213:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 214:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 215:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 216:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 217:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 218:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 219:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 220:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 221:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 222:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 223:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 224:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 225:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 226:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 227:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 228:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 229:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 230:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 231:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 232:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 233:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 234:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 235:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 236:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 237:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 238:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 239:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 240:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 241:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 242:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 243:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 244:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 245:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 246:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 247:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 248:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 249:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  on its direction.
 250:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 252:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 253:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Type       Type of endpoint to configure, a EP_TYPE_* mask. Not all endpoint type
 255:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 256:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 257:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 258:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 259:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 260:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 261:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 262:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 263:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 264:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        that the endpoint can handle.
 265:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 266:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an ENDPOINT_
 267:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 268:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 269:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 270:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints <b>must</b> be configured in ascending order, or bank corruption will occur.
 271:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 272:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 273:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Certain models of USB AVR's endpoints may have different maximum packet sizes based on
 274:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        index - refer to the chosen USB AVR's datasheet to determine the maximum bank size for
 275:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 276:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 277:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 278:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 279:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 280:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 281:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 282:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        which failed to reconfigure correctly will be selected.
 283:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 284:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 285:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 286:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 287:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 288:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 289:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 290:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 291:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 292:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 293:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 294:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 295:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks)
 296:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 297:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 298:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 300:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 301:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 302:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 303:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 304:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 305:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 307:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 308:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 309:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 310:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 311:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 312:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 313:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 314:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 315:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 316:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 317:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 318:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 319:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 320:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 321:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 322:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 323:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 324:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 325:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 326:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 327:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 328:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 329:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 330:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 331:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 332:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 333:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 334:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 335:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 336:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 337:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 338:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 339:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 340:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 341:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 342:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 343:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 344:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 345:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 346:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 347:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 348:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 349:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 350:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 351 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE94:
  30               	.LBE93:
  31               	.LBB95:
  32               	.LBB96:
 352:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 353:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 354:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 355:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 356:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 357:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 358:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 359:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 360:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 361:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 362:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 363:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 364:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 365:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 366:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 367:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 368:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 369:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 370:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 371:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 372:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 373:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 374:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 375:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 376:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 377:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 378:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 379:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 380:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 381:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 382:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 383:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 384:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 385:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 386:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 387:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 388:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 389:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 390:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 391:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 392:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 393:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 394:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 395:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 396:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 397:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 398:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 399:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 400:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 401:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 402:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 403:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 404:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 405:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 406:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 407:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 408:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 409:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 410:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 410 0
  34 0006 8091 E800 		lds r24,232
  35               	.LBE96:
  36               	.LBE95:
 406:BootloaderCDC.c **** 	/* Select the OUT endpoint so that the next data byte can be read */
 407:BootloaderCDC.c **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 408:BootloaderCDC.c **** 
 409:BootloaderCDC.c **** 	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
 410:BootloaderCDC.c **** 	while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 410 0
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L11
  40               	.LBB97:
  41               	.LBB98:
 411:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 412:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 413:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 414:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 415:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 416:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 417:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 419:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 420:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 421:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 422:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 423:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 424:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 425:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 426:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 427:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 428:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 429:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 430:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 431:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 432:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 433:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 434:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 435:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 436:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 437:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 438:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 439:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 440:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 441:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 443:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 444:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 445:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 446:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 447:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 448:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 449:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 450:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 451:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 452:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 453:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 454:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 455:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 456:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 457:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 458:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 460:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 461:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 462:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 463:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 464:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 465:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 466:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 467:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 468:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 469:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 470:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 471:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 472:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 473:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 474:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 475:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 476:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 477:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 478:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 479:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 480:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 481:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 482:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 483:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 484:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 485:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 486:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 487:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 488:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 489:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 490:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 491:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 492:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 493:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 494:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 495:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 496:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 497:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 498:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 499:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 500:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 501:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 502:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 503:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 504:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 505:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 506:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 507:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 508:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 509:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 510:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 511:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 512:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 513:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 514:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 515:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 516:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 517:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 518:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 519:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 520:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 521:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 521 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE98:
  48               	.LBE97:
  49               	.LBB99:
  50               	.LBB100:
 469:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
  51               		.loc 2 469 0
  52 0018 8091 E800 		lds r24,232
  53               	.LBE100:
  54               	.LBE99:
 411:BootloaderCDC.c **** 	{
 412:BootloaderCDC.c **** 		Endpoint_ClearOUT();
 413:BootloaderCDC.c **** 
 414:BootloaderCDC.c **** 		while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 414 0
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 415:BootloaderCDC.c **** 		{
 416:BootloaderCDC.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 416 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
  62 0026 00C0      		rjmp .L4
  63               	.L11:
  64               	.LBB101:
  65               	.LBB102:
 522:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 523:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);
 524:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 525:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 526:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 527:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 528:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 529:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 530:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 531:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 532:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 533:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 534:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 535:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 536:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 537:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 538:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 539:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 540:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 541:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 542:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 543:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 544:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 545:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 546:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 547:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 548:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 550:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 551:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 552:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 553:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 554:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 555:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 556:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 557:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 558:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 559:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 560:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 561:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 562:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 563:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 564:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 565:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 566:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 567:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 568:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 569:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 570:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 571:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 572:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 573:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 574:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 575:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 576:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 577:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 578:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 579:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 580:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 581:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 582:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 583:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 584:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 585:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 586:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 587:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 588:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 589:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 590:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 591:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 592:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 593:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 594:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 595:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 596:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 597:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 598:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 599:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 600:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 601:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 602:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
  66               		.loc 2 602 0
  67 0028 8091 F100 		lds r24,241
  68               	.L4:
  69               	.LBE102:
  70               	.LBE101:
 417:BootloaderCDC.c **** 			  return 0;
 418:BootloaderCDC.c **** 		}
 419:BootloaderCDC.c **** 	}
 420:BootloaderCDC.c **** 
 421:BootloaderCDC.c **** 	/* Fetch the next byte from the OUT endpoint */
 422:BootloaderCDC.c **** 	return Endpoint_Read_Byte();
 423:BootloaderCDC.c **** }
  71               		.loc 1 423 0
  72 002c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE89:
  76               		.section	.text.WriteNextResponseByte,"ax",@progbits
  78               	WriteNextResponseByte:
  79               	.LFB90:
 424:BootloaderCDC.c **** 
 425:BootloaderCDC.c **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 426:BootloaderCDC.c ****  *  bank when full ready for the next byte in the packet to the host.
 427:BootloaderCDC.c ****  *
 428:BootloaderCDC.c ****  *  \param[in] Response  Next response byte to send to the host
 429:BootloaderCDC.c ****  */
 430:BootloaderCDC.c **** static void WriteNextResponseByte(const uint8_t Response)
 431:BootloaderCDC.c **** {
  80               		.loc 1 431 0
  81               		.cfi_startproc
  82               	.LVL1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87               	.LBB103:
  88               	.LBB104:
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
  89               		.loc 2 351 0
  90 0000 93E0      		ldi r25,lo8(3)
  91 0002 9093 E900 		sts 233,r25
  92               	.LBE104:
  93               	.LBE103:
  94               	.LBB105:
  95               	.LBB106:
 410:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
  96               		.loc 2 410 0
  97 0006 9091 E800 		lds r25,232
  98               	.LBE106:
  99               	.LBE105:
 432:BootloaderCDC.c **** 	/* Select the IN endpoint so that the next data byte can be written */
 433:BootloaderCDC.c **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 434:BootloaderCDC.c **** 
 435:BootloaderCDC.c **** 	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 436:BootloaderCDC.c **** 	if (!(Endpoint_IsReadWriteAllowed()))
 100               		.loc 1 436 0
 101 000a 95FF      		sbrs r25,5
 102 000c 00C0      		rjmp .L13
 103               	.L17:
 104               	.LVL2:
 105               	.LBB107:
 106               	.LBB108:
 603:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 604:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 605:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 606:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 607:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 608:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 609:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 610:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 611:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 612:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 613:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 614:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 107               		.loc 2 614 0
 108 000e 8093 F100 		sts 241,r24
 109 0012 0895      		ret
 110               	.LVL3:
 111               	.L13:
 112               	.LBE108:
 113               	.LBE107:
 114               	.LBB109:
 115               	.LBB110:
 506:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 116               		.loc 2 506 0
 117 0014 9091 E800 		lds r25,232
 118 0018 9E77      		andi r25,lo8(126)
 119 001a 9093 E800 		sts 232,r25
 120               	.L15:
 121               	.LBE110:
 122               	.LBE109:
 123               	.LBB111:
 124               	.LBB112:
 457:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 125               		.loc 2 457 0
 126 001e 9091 E800 		lds r25,232
 127               	.LBE112:
 128               	.LBE111:
 437:BootloaderCDC.c **** 	{
 438:BootloaderCDC.c **** 		Endpoint_ClearIN();
 439:BootloaderCDC.c **** 
 440:BootloaderCDC.c **** 		while (!(Endpoint_IsINReady()))
 129               		.loc 1 440 0
 130 0022 90FD      		sbrc r25,0
 131 0024 00C0      		rjmp .L17
 441:BootloaderCDC.c **** 		{
 442:BootloaderCDC.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 132               		.loc 1 442 0
 133 0026 9EB3      		in r25,0x1e
 134 0028 9111      		cpse r25,__zero_reg__
 135 002a 00C0      		rjmp .L15
 136 002c 0895      		ret
 137               		.cfi_endproc
 138               	.LFE90:
 140               		.section	.text.blink,"ax",@progbits
 141               	.global	blink
 143               	blink:
 144               	.LFB82:
  89:BootloaderCDC.c ****   BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
 145               		.loc 1 89 0
 146               		.cfi_startproc
 147               	.LVL4:
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
  90:BootloaderCDC.c ****   while (b--) {
 152               		.loc 1 90 0
 153 0000 6E9A      		sbi 0xd,6
 154               	.L22:
 155               	.LVL5:
  91:BootloaderCDC.c ****     _delay_ms(100);
 156               		.loc 1 91 0
 157 0002 8823      		tst r24
 158 0004 01F0      		breq .L24
 159               	.LVL6:
 160               	.LBB113:
 161               	.LBB114:
 162               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 163               		.loc 3 163 0
 164 0006 2FEF      		ldi r18,lo8(319999)
 165 0008 31EE      		ldi r19,hi8(319999)
 166 000a 94E0      		ldi r25,hlo8(319999)
 167 000c 2150      	1:	subi r18,1
 168 000e 3040      		sbci r19,0
 169 0010 9040      		sbci r25,0
 170 0012 01F4      		brne 1b
 171 0014 00C0      		rjmp .
 172 0016 0000      		nop
 173               	.LBE114:
 174               	.LBE113:
  93:BootloaderCDC.c ****     _delay_ms(100);
 175               		.loc 1 93 0
 176 0018 769A      		sbi 0xe,6
 177               	.LVL7:
 178               	.LBB115:
 179               	.LBB116:
 180               		.loc 3 163 0
 181 001a 2FEF      		ldi r18,lo8(319999)
 182 001c 31EE      		ldi r19,hi8(319999)
 183 001e 94E0      		ldi r25,hlo8(319999)
 184 0020 2150      	1:	subi r18,1
 185 0022 3040      		sbci r19,0
 186 0024 9040      		sbci r25,0
 187 0026 01F4      		brne 1b
 188 0028 00C0      		rjmp .
 189 002a 0000      		nop
 190               	.LBE116:
 191               	.LBE115:
  95:BootloaderCDC.c ****     _delay_ms(100);
 192               		.loc 1 95 0
 193 002c 7698      		cbi 0xe,6
 194               	.LVL8:
 195               	.LBB117:
 196               	.LBB118:
 197               		.loc 3 163 0
 198 002e 2FEF      		ldi r18,lo8(319999)
 199 0030 31EE      		ldi r19,hi8(319999)
 200 0032 94E0      		ldi r25,hlo8(319999)
 201 0034 2150      	1:	subi r18,1
 202 0036 3040      		sbci r19,0
 203 0038 9040      		sbci r25,0
 204 003a 01F4      		brne 1b
 205 003c 00C0      		rjmp .
 206 003e 0000      		nop
 207 0040 8150      		subi r24,lo8(-(-1))
 208               	.LVL9:
 209 0042 00C0      		rjmp .L22
 210               	.LVL10:
 211               	.L24:
 212               	/* epilogue start */
 213               	.LBE118:
 214               	.LBE117:
  98:BootloaderCDC.c **** bool USBConnected()
 215               		.loc 1 98 0
 216 0044 0895      		ret
 217               		.cfi_endproc
 218               	.LFE82:
 220               		.section	.text.USBConnected,"ax",@progbits
 221               	.global	USBConnected
 223               	USBConnected:
 224               	.LFB83:
 100:BootloaderCDC.c ****   uint8_t f = UDFNUML;
 225               		.loc 1 100 0
 226               		.cfi_startproc
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 101:BootloaderCDC.c ****  _delay_ms(3);
 231               		.loc 1 101 0
 232 0000 2091 E400 		lds r18,228
 233               	.LVL11:
 234               	.LBB119:
 235               	.LBB120:
 236               		.loc 3 163 0
 237 0004 8FED      		ldi r24,lo8(11999)
 238 0006 9EE2      		ldi r25,hi8(11999)
 239 0008 0197      	1:	sbiw r24,1
 240 000a 01F4      		brne 1b
 241 000c 00C0      		rjmp .
 242 000e 0000      		nop
 243               	.LBE120:
 244               	.LBE119:
 103:BootloaderCDC.c **** }
 245               		.loc 1 103 0
 246 0010 9091 E400 		lds r25,228
 247 0014 81E0      		ldi r24,lo8(1)
 248 0016 2913      		cpse r18,r25
 249 0018 00C0      		rjmp .L26
 250 001a 80E0      		ldi r24,0
 251               	.L26:
 104:BootloaderCDC.c **** 
 252               		.loc 1 104 0
 253 001c 0895      		ret
 254               		.cfi_endproc
 255               	.LFE83:
 257               		.section	.text.SetupHardware,"ax",@progbits
 258               	.global	SetupHardware
 260               	SetupHardware:
 261               	.LFB85:
 214:BootloaderCDC.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 262               		.loc 1 214 0
 263               		.cfi_startproc
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
 216:BootloaderCDC.c **** 	wdt_disable();
 268               		.loc 1 216 0
 269 0000 84B7      		in r24,0x34
 270 0002 877F      		andi r24,lo8(-9)
 271 0004 84BF      		out 0x34,r24
 272               	.LBB121:
 273               	.LBB122:
 274               		.file 4 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275               		.loc 4 467 0
 276               	/* #APP */
 277               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 278 0006 0FB6      		in __tmp_reg__,__SREG__
 279 0008 F894      		cli
 280 000a A895      		wdr
 281 000c 8091 6000 		lds r24,96
 282 0010 8861      		ori r24,24
 283 0012 8093 6000 		sts 96,r24
 284 0016 1092 6000 		sts 96,__zero_reg__
 285 001a 0FBE      		out __SREG__,__tmp_reg__
 286               		
 287               	 ;  0 "" 2
 288               	.LVL12:
 289               	/* #NOAPP */
 290               	.LBE122:
 291               	.LBE121:
 292               	.LBB123:
 293               	.LBB124:
 294               		.file 5 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    Copyright (c) 2011 Frédéric Nadeau
   3:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/power.h **** 
   5:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/power.h **** 
   8:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/avr/power.h ****      distribution.
  14:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  15:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  16:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  17:/usr/lib/avr/include/avr/power.h **** 
  18:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  19:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  20:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  21:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  22:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  23:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  24:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  27:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  28:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  29:/usr/lib/avr/include/avr/power.h **** 
  30:/usr/lib/avr/include/avr/power.h **** /* $Id$ */
  31:/usr/lib/avr/include/avr/power.h **** 
  32:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  33:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  34:/usr/lib/avr/include/avr/power.h **** 
  35:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  36:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed. Some devices have the XTAL Divide Control Register
  46:/usr/lib/avr/include/avr/power.h **** (XDIV) which offer similar functionality as System Clock Prescale
  47:/usr/lib/avr/include/avr/power.h **** Register (CLKPR).
  48:/usr/lib/avr/include/avr/power.h **** 
  49:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  50:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  51:/usr/lib/avr/include/avr/power.h **** 
  52:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  53:/usr/lib/avr/include/avr/power.h **** the ATmega8). On those devices without a Power Reduction Register, the
  54:/usr/lib/avr/include/avr/power.h **** power reduction macros are not available..
  55:/usr/lib/avr/include/avr/power.h **** 
  56:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  57:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  58:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  59:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** \note For device using the XTAL Divide Control Register (XDIV), when prescaler
  62:/usr/lib/avr/include/avr/power.h **** is used, Timer/Counter0 can only be used in asynchronous mode. Keep in mind
  63:/usr/lib/avr/include/avr/power.h **** that Timer/Counter0 source shall be less than ¼th of peripheral clock.
  64:/usr/lib/avr/include/avr/power.h **** Therefore, when using a typical 32.768 kHz crystal, one shall not scale
  65:/usr/lib/avr/include/avr/power.h **** the clock below 131.072 kHz.
  66:/usr/lib/avr/include/avr/power.h **** 
  67:/usr/lib/avr/include/avr/power.h **** */
  68:/usr/lib/avr/include/avr/power.h **** 
  69:/usr/lib/avr/include/avr/power.h **** 
  70:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  71:/usr/lib/avr/include/avr/power.h **** 
  72:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  73:/usr/lib/avr/include/avr/power.h **** <small>
  74:/usr/lib/avr/include/avr/power.h **** <center>
  75:/usr/lib/avr/include/avr/power.h **** <table border="3">
  76:/usr/lib/avr/include/avr/power.h ****   <tr>
  77:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  78:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  79:/usr/lib/avr/include/avr/power.h ****   </tr>
  80:/usr/lib/avr/include/avr/power.h **** 
  81:/usr/lib/avr/include/avr/power.h ****   <tr>
  82:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_disable()</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog Comparator on PortA.</td>
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog Comparator on PortA.</td>
  89:/usr/lib/avr/include/avr/power.h ****   </tr>
  90:/usr/lib/avr/include/avr/power.h **** 
  91:/usr/lib/avr/include/avr/power.h ****   <tr>
  92:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  93:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  94:/usr/lib/avr/include/avr/power.h ****   </tr>
  95:/usr/lib/avr/include/avr/power.h **** 
  96:/usr/lib/avr/include/avr/power.h ****   <tr>
  97:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  98:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  99:/usr/lib/avr/include/avr/power.h ****   </tr>
 100:/usr/lib/avr/include/avr/power.h **** 
 101:/usr/lib/avr/include/avr/power.h ****   <tr>
 102:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_disable()</td>
 103:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module on PortA</td>
 104:/usr/lib/avr/include/avr/power.h ****   </tr>
 105:/usr/lib/avr/include/avr/power.h **** 
 106:/usr/lib/avr/include/avr/power.h ****   <tr>
 107:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_enable()</td>
 108:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module on PortA</td>
 109:/usr/lib/avr/include/avr/power.h ****   </tr>
 110:/usr/lib/avr/include/avr/power.h **** 
 111:/usr/lib/avr/include/avr/power.h ****   <tr>
 112:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_disable()</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>Disable the EVSYS module</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_enable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Enable the EVSYS module</td>
 119:/usr/lib/avr/include/avr/power.h ****   </tr>
 120:/usr/lib/avr/include/avr/power.h **** 
 121:/usr/lib/avr/include/avr/power.h ****   <tr>
 122:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_disable()</td>
 123:/usr/lib/avr/include/avr/power.h ****     <td>Disable the HIRES module on PortC</td>
 124:/usr/lib/avr/include/avr/power.h ****   </tr>
 125:/usr/lib/avr/include/avr/power.h **** 
 126:/usr/lib/avr/include/avr/power.h ****   <tr>
 127:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_enable()</td>
 128:/usr/lib/avr/include/avr/power.h ****     <td>Enable the HIRES module on PortC</td>
 129:/usr/lib/avr/include/avr/power.h ****   </tr>
 130:/usr/lib/avr/include/avr/power.h **** 
 131:/usr/lib/avr/include/avr/power.h ****    <tr>
 132:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
 133:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
 134:/usr/lib/avr/include/avr/power.h ****   </tr>
 135:/usr/lib/avr/include/avr/power.h **** 
 136:/usr/lib/avr/include/avr/power.h ****   <tr>
 137:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
 138:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
 139:/usr/lib/avr/include/avr/power.h ****   </tr>
 140:/usr/lib/avr/include/avr/power.h **** 
 141:/usr/lib/avr/include/avr/power.h ****   <tr>
 142:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_enable()</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Programmable Gain Amplifier module.</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_disable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Programmable Gain Amplifier module.</td>
 149:/usr/lib/avr/include/avr/power.h ****   </tr>
 150:/usr/lib/avr/include/avr/power.h **** 
 151:/usr/lib/avr/include/avr/power.h ****   <tr>
 152:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 153:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 154:/usr/lib/avr/include/avr/power.h ****   </tr>
 155:/usr/lib/avr/include/avr/power.h **** 
 156:/usr/lib/avr/include/avr/power.h ****   <tr>
 157:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 158:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 159:/usr/lib/avr/include/avr/power.h ****   </tr>
 160:/usr/lib/avr/include/avr/power.h **** 
 161:/usr/lib/avr/include/avr/power.h ****   <tr>
 162:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 163:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 164:/usr/lib/avr/include/avr/power.h ****   </tr>
 165:/usr/lib/avr/include/avr/power.h **** 
 166:/usr/lib/avr/include/avr/power.h ****   <tr>
 167:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 168:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 169:/usr/lib/avr/include/avr/power.h ****   </tr>
 170:/usr/lib/avr/include/avr/power.h **** 
 171:/usr/lib/avr/include/avr/power.h ****   <tr>
 172:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****   </tr>
 180:/usr/lib/avr/include/avr/power.h **** 
 181:/usr/lib/avr/include/avr/power.h ****   <tr>
 182:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 183:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 184:/usr/lib/avr/include/avr/power.h ****   </tr>
 185:/usr/lib/avr/include/avr/power.h **** 
 186:/usr/lib/avr/include/avr/power.h ****   <tr>
 187:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 188:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 189:/usr/lib/avr/include/avr/power.h ****   </tr>
 190:/usr/lib/avr/include/avr/power.h **** 
 191:/usr/lib/avr/include/avr/power.h ****   <tr>
 192:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_enable()</td>
 193:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 0 .</td>
 194:/usr/lib/avr/include/avr/power.h ****   </tr>
 195:/usr/lib/avr/include/avr/power.h **** 
 196:/usr/lib/avr/include/avr/power.h ****   <tr>
 197:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_disable()</td>
 198:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 0. </td>
 199:/usr/lib/avr/include/avr/power.h ****   </tr>
 200:/usr/lib/avr/include/avr/power.h **** 
 201:/usr/lib/avr/include/avr/power.h ****   <tr>
 202:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_enable()</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 1 .</td>
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_disable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 1. </td>
 209:/usr/lib/avr/include/avr/power.h ****   </tr>
 210:/usr/lib/avr/include/avr/power.h **** 
 211:/usr/lib/avr/include/avr/power.h ****   <tr>
 212:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_enable()</td>
 213:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 2 .</td>
 214:/usr/lib/avr/include/avr/power.h ****   </tr>
 215:/usr/lib/avr/include/avr/power.h **** 
 216:/usr/lib/avr/include/avr/power.h ****   <tr>
 217:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_disable()</td>
 218:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 2. </td>
 219:/usr/lib/avr/include/avr/power.h ****   </tr>
 220:/usr/lib/avr/include/avr/power.h **** 
 221:/usr/lib/avr/include/avr/power.h ****   <tr>
 222:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_enable()</td>
 223:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 3 .</td>
 224:/usr/lib/avr/include/avr/power.h ****   </tr>
 225:/usr/lib/avr/include/avr/power.h **** 
 226:/usr/lib/avr/include/avr/power.h ****   <tr>
 227:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_disable()</td>
 228:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 3. </td>
 229:/usr/lib/avr/include/avr/power.h ****   </tr>
 230:/usr/lib/avr/include/avr/power.h **** 
 231:/usr/lib/avr/include/avr/power.h ****   <tr>
 232:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_disable()</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>Disable the RTC module</td>
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_enable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Enable the RTC module</td>
 239:/usr/lib/avr/include/avr/power.h ****   </tr>
 240:/usr/lib/avr/include/avr/power.h **** 
 241:/usr/lib/avr/include/avr/power.h ****   <tr>
 242:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 243:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 244:/usr/lib/avr/include/avr/power.h ****   </tr>
 245:/usr/lib/avr/include/avr/power.h **** 
 246:/usr/lib/avr/include/avr/power.h ****   <tr>
 247:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 248:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 249:/usr/lib/avr/include/avr/power.h ****   </tr>
 250:/usr/lib/avr/include/avr/power.h **** 
 251:/usr/lib/avr/include/avr/power.h ****   <tr>
 252:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_disable()</td>
 253:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortC</td>
 254:/usr/lib/avr/include/avr/power.h ****   </tr>
 255:/usr/lib/avr/include/avr/power.h **** 
 256:/usr/lib/avr/include/avr/power.h ****   <tr>
 257:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_enable()</td>
 258:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortC</td>
 259:/usr/lib/avr/include/avr/power.h ****   </tr>
 260:/usr/lib/avr/include/avr/power.h **** 
 261:/usr/lib/avr/include/avr/power.h ****   <tr>
 262:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_disable()</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortD</td>
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortD</td>
 269:/usr/lib/avr/include/avr/power.h ****   </tr>
 270:/usr/lib/avr/include/avr/power.h **** 
 271:/usr/lib/avr/include/avr/power.h ****   <tr>
 272:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_disable()</td>
 273:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortC</td>
 274:/usr/lib/avr/include/avr/power.h ****   </tr>
 275:/usr/lib/avr/include/avr/power.h **** 
 276:/usr/lib/avr/include/avr/power.h ****   <tr>
 277:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_enable()</td>
 278:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortC</td>
 279:/usr/lib/avr/include/avr/power.h ****   </tr>
 280:/usr/lib/avr/include/avr/power.h **** 
 281:/usr/lib/avr/include/avr/power.h ****   <tr>
 282:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_disable()</td>
 283:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortD</td>
 284:/usr/lib/avr/include/avr/power.h ****   </tr>
 285:/usr/lib/avr/include/avr/power.h **** 
 286:/usr/lib/avr/include/avr/power.h ****   <tr>
 287:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_enable()</td>
 288:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortD</td>
 289:/usr/lib/avr/include/avr/power.h ****   </tr>
 290:/usr/lib/avr/include/avr/power.h **** 
 291:/usr/lib/avr/include/avr/power.h ****   <tr>
 292:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_disable()</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortE</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_enable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortE</td>
 299:/usr/lib/avr/include/avr/power.h ****   </tr>
 300:/usr/lib/avr/include/avr/power.h **** 
 301:/usr/lib/avr/include/avr/power.h ****   <tr>
 302:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_disable()</td>
 303:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortF</td>
 304:/usr/lib/avr/include/avr/power.h ****   </tr>
 305:/usr/lib/avr/include/avr/power.h **** 
 306:/usr/lib/avr/include/avr/power.h ****   <tr>
 307:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_enable()</td>
 308:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortF</td>
 309:/usr/lib/avr/include/avr/power.h ****   </tr>
 310:/usr/lib/avr/include/avr/power.h **** 
 311:/usr/lib/avr/include/avr/power.h ****   <tr>
 312:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_disable()</td>
 313:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC1 module on PortC</td>
 314:/usr/lib/avr/include/avr/power.h ****   </tr>
 315:/usr/lib/avr/include/avr/power.h **** 
 316:/usr/lib/avr/include/avr/power.h ****   <tr>
 317:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_enable()</td>
 318:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC1 module on PortC</td>
 319:/usr/lib/avr/include/avr/power.h ****   </tr>
 320:/usr/lib/avr/include/avr/power.h **** 
 321:/usr/lib/avr/include/avr/power.h ****   <tr>
 322:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_disable()</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC</td>
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC</td>
 329:/usr/lib/avr/include/avr/power.h ****   </tr>
 330:/usr/lib/avr/include/avr/power.h **** 
 331:/usr/lib/avr/include/avr/power.h ****   <tr>
 332:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_disable()</td>
 333:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE</td>
 334:/usr/lib/avr/include/avr/power.h ****   </tr>
 335:/usr/lib/avr/include/avr/power.h **** 
 336:/usr/lib/avr/include/avr/power.h ****   <tr>
 337:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_enable()</td>
 338:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE</td>
 339:/usr/lib/avr/include/avr/power.h ****   </tr>
 340:/usr/lib/avr/include/avr/power.h **** 
 341:/usr/lib/avr/include/avr/power.h ****   <tr>
 342:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 343:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 344:/usr/lib/avr/include/avr/power.h ****   </tr>
 345:/usr/lib/avr/include/avr/power.h **** 
 346:/usr/lib/avr/include/avr/power.h ****   <tr>
 347:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 348:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 349:/usr/lib/avr/include/avr/power.h ****   </tr>
 350:/usr/lib/avr/include/avr/power.h **** 
 351:/usr/lib/avr/include/avr/power.h ****   <tr>
 352:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 353:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 354:/usr/lib/avr/include/avr/power.h ****   </tr>
 355:/usr/lib/avr/include/avr/power.h **** 
 356:/usr/lib/avr/include/avr/power.h ****   <tr>
 357:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 358:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 359:/usr/lib/avr/include/avr/power.h ****   </tr>
 360:/usr/lib/avr/include/avr/power.h **** 
 361:/usr/lib/avr/include/avr/power.h ****   <tr>
 362:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 363:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 364:/usr/lib/avr/include/avr/power.h ****   </tr>
 365:/usr/lib/avr/include/avr/power.h **** 
 366:/usr/lib/avr/include/avr/power.h ****   <tr>
 367:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 368:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 369:/usr/lib/avr/include/avr/power.h ****   </tr>
 370:/usr/lib/avr/include/avr/power.h **** 
 371:/usr/lib/avr/include/avr/power.h ****   <tr>
 372:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 373:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 374:/usr/lib/avr/include/avr/power.h ****   </tr>
 375:/usr/lib/avr/include/avr/power.h **** 
 376:/usr/lib/avr/include/avr/power.h ****   <tr>
 377:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 378:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 379:/usr/lib/avr/include/avr/power.h ****   </tr>
 380:/usr/lib/avr/include/avr/power.h **** 
 381:/usr/lib/avr/include/avr/power.h ****   <tr>
 382:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 383:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 384:/usr/lib/avr/include/avr/power.h ****   </tr>
 385:/usr/lib/avr/include/avr/power.h **** 
 386:/usr/lib/avr/include/avr/power.h ****   <tr>
 387:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 388:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 389:/usr/lib/avr/include/avr/power.h ****   </tr>
 390:/usr/lib/avr/include/avr/power.h **** 
 391:/usr/lib/avr/include/avr/power.h ****   <tr>
 392:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 393:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 394:/usr/lib/avr/include/avr/power.h ****   </tr>
 395:/usr/lib/avr/include/avr/power.h **** 
 396:/usr/lib/avr/include/avr/power.h ****   <tr>
 397:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 398:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 399:/usr/lib/avr/include/avr/power.h ****   </tr>
 400:/usr/lib/avr/include/avr/power.h **** 
 401:/usr/lib/avr/include/avr/power.h ****   <tr>
 402:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 403:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 404:/usr/lib/avr/include/avr/power.h ****   </tr>
 405:/usr/lib/avr/include/avr/power.h **** 
 406:/usr/lib/avr/include/avr/power.h ****   <tr>
 407:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 408:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 409:/usr/lib/avr/include/avr/power.h ****   </tr>
 410:/usr/lib/avr/include/avr/power.h **** 
 411:/usr/lib/avr/include/avr/power.h ****   <tr>
 412:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 413:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 414:/usr/lib/avr/include/avr/power.h ****   </tr>
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h ****   <tr>
 417:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 418:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 419:/usr/lib/avr/include/avr/power.h ****   </tr>
 420:/usr/lib/avr/include/avr/power.h **** 
 421:/usr/lib/avr/include/avr/power.h ****   <tr>
 422:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 423:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 424:/usr/lib/avr/include/avr/power.h ****   </tr>
 425:/usr/lib/avr/include/avr/power.h **** 
 426:/usr/lib/avr/include/avr/power.h ****   <tr>
 427:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 428:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 429:/usr/lib/avr/include/avr/power.h ****   </tr>
 430:/usr/lib/avr/include/avr/power.h **** 
 431:/usr/lib/avr/include/avr/power.h ****   <tr>
 432:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 433:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 434:/usr/lib/avr/include/avr/power.h ****   </tr>
 435:/usr/lib/avr/include/avr/power.h **** 
 436:/usr/lib/avr/include/avr/power.h ****   <tr>
 437:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 438:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 439:/usr/lib/avr/include/avr/power.h ****   </tr>
 440:/usr/lib/avr/include/avr/power.h **** 
 441:/usr/lib/avr/include/avr/power.h ****   <tr>
 442:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 443:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 444:/usr/lib/avr/include/avr/power.h ****   </tr>
 445:/usr/lib/avr/include/avr/power.h **** 
 446:/usr/lib/avr/include/avr/power.h ****   <tr>
 447:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 448:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 449:/usr/lib/avr/include/avr/power.h ****   </tr>
 450:/usr/lib/avr/include/avr/power.h **** 
 451:/usr/lib/avr/include/avr/power.h ****   <tr>
 452:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 453:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 454:/usr/lib/avr/include/avr/power.h ****   </tr>
 455:/usr/lib/avr/include/avr/power.h **** 
 456:/usr/lib/avr/include/avr/power.h ****   <tr>
 457:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 458:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 459:/usr/lib/avr/include/avr/power.h ****   </tr>
 460:/usr/lib/avr/include/avr/power.h **** 
 461:/usr/lib/avr/include/avr/power.h ****   <tr>
 462:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_disable()</td>
 463:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC</td>
 464:/usr/lib/avr/include/avr/power.h ****   </tr>
 465:/usr/lib/avr/include/avr/power.h **** 
 466:/usr/lib/avr/include/avr/power.h ****   <tr>
 467:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_enable()</td>
 468:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC</td>
 469:/usr/lib/avr/include/avr/power.h ****   </tr>
 470:/usr/lib/avr/include/avr/power.h **** 
 471:/usr/lib/avr/include/avr/power.h ****   <tr>
 472:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_disable()</td>
 473:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD</td>
 474:/usr/lib/avr/include/avr/power.h ****   </tr>
 475:/usr/lib/avr/include/avr/power.h **** 
 476:/usr/lib/avr/include/avr/power.h ****   <tr>
 477:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_enable()</td>
 478:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD</td>
 479:/usr/lib/avr/include/avr/power.h ****   </tr>
 480:/usr/lib/avr/include/avr/power.h **** 
 481:/usr/lib/avr/include/avr/power.h ****   <tr>
 482:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_disable()</td>
 483:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE</td>
 484:/usr/lib/avr/include/avr/power.h ****   </tr>
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h ****   <tr>
 487:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_enable()</td>
 488:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE</td>
 489:/usr/lib/avr/include/avr/power.h ****   </tr>
 490:/usr/lib/avr/include/avr/power.h **** 
 491:/usr/lib/avr/include/avr/power.h ****   <tr>
 492:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_disable()</td>
 493:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF</td>
 494:/usr/lib/avr/include/avr/power.h ****   </tr>
 495:/usr/lib/avr/include/avr/power.h **** 
 496:/usr/lib/avr/include/avr/power.h ****   <tr>
 497:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_enable()</td>
 498:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF</td>
 499:/usr/lib/avr/include/avr/power.h ****   </tr>
 500:/usr/lib/avr/include/avr/power.h **** 
 501:/usr/lib/avr/include/avr/power.h ****   <tr>
 502:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 503:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 504:/usr/lib/avr/include/avr/power.h ****   </tr>
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h ****   <tr>
 507:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 508:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 509:/usr/lib/avr/include/avr/power.h ****   </tr>
 510:/usr/lib/avr/include/avr/power.h **** 
 511:/usr/lib/avr/include/avr/power.h ****   <tr>
 512:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 513:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 514:/usr/lib/avr/include/avr/power.h ****   </tr>
 515:/usr/lib/avr/include/avr/power.h **** 
 516:/usr/lib/avr/include/avr/power.h ****   <tr>
 517:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 518:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 519:/usr/lib/avr/include/avr/power.h ****   </tr>
 520:/usr/lib/avr/include/avr/power.h **** 
 521:/usr/lib/avr/include/avr/power.h ****   <tr>
 522:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 523:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 524:/usr/lib/avr/include/avr/power.h ****   </tr>
 525:/usr/lib/avr/include/avr/power.h **** 
 526:/usr/lib/avr/include/avr/power.h ****   <tr>
 527:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 528:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 529:/usr/lib/avr/include/avr/power.h ****   </tr>
 530:/usr/lib/avr/include/avr/power.h **** 
 531:/usr/lib/avr/include/avr/power.h ****   <tr>
 532:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 533:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 534:/usr/lib/avr/include/avr/power.h ****   </tr>
 535:/usr/lib/avr/include/avr/power.h **** 
 536:/usr/lib/avr/include/avr/power.h ****   <tr>
 537:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 538:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 539:/usr/lib/avr/include/avr/power.h ****   </tr>
 540:/usr/lib/avr/include/avr/power.h **** </table>
 541:/usr/lib/avr/include/avr/power.h **** </center>
 542:/usr/lib/avr/include/avr/power.h **** </small>
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** @} */
 545:/usr/lib/avr/include/avr/power.h **** 
 546:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRADC)
 547:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 548:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 549:/usr/lib/avr/include/avr/power.h **** #endif
 550:/usr/lib/avr/include/avr/power.h **** 
 551:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRCAN)
 552:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
 553:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
 554:/usr/lib/avr/include/avr/power.h **** #endif
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLCD)
 557:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 558:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 559:/usr/lib/avr/include/avr/power.h **** #endif
 560:/usr/lib/avr/include/avr/power.h **** 
 561:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLIN)
 562:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
 563:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
 564:/usr/lib/avr/include/avr/power.h **** #endif
 565:/usr/lib/avr/include/avr/power.h **** 
 566:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC)
 567:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
 568:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
 569:/usr/lib/avr/include/avr/power.h **** #endif
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC0)
 572:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 573:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 574:/usr/lib/avr/include/avr/power.h **** #endif
 575:/usr/lib/avr/include/avr/power.h **** 
 576:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC1)
 577:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 578:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 579:/usr/lib/avr/include/avr/power.h **** #endif
 580:/usr/lib/avr/include/avr/power.h **** 
 581:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC2)
 582:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 583:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 584:/usr/lib/avr/include/avr/power.h **** #endif
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSCR)
 587:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 588:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 589:/usr/lib/avr/include/avr/power.h **** #endif
 590:/usr/lib/avr/include/avr/power.h **** 
 591:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSPI)
 592:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 593:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 594:/usr/lib/avr/include/avr/power.h **** #endif
 595:/usr/lib/avr/include/avr/power.h **** 
 596:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM0)
 597:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 598:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 599:/usr/lib/avr/include/avr/power.h **** #endif
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM1)
 602:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 603:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 604:/usr/lib/avr/include/avr/power.h **** #endif
 605:/usr/lib/avr/include/avr/power.h **** 
 606:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM2)
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
 609:/usr/lib/avr/include/avr/power.h **** #endif
 610:/usr/lib/avr/include/avr/power.h **** 
 611:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTWI)
 612:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
 613:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
 614:/usr/lib/avr/include/avr/power.h **** #endif
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART)
 617:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 618:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 619:/usr/lib/avr/include/avr/power.h **** #endif
 620:/usr/lib/avr/include/avr/power.h **** 
 621:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART0)
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** #endif
 625:/usr/lib/avr/include/avr/power.h **** 
 626:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART1)
 627:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR &= (uint8_t)~(1 << PRUSART1))
 628:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR |= (uint8_t)(1 << PRUSART1))
 629:/usr/lib/avr/include/avr/power.h **** #endif
 630:/usr/lib/avr/include/avr/power.h **** 
 631:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSI)
 632:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
 633:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
 634:/usr/lib/avr/include/avr/power.h **** #endif
 635:/usr/lib/avr/include/avr/power.h **** 
 636:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRADC)
 637:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 638:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 639:/usr/lib/avr/include/avr/power.h **** #endif
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRC0)
 642:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
 643:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
 644:/usr/lib/avr/include/avr/power.h **** #endif
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCRC)
 647:/usr/lib/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
 648:/usr/lib/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
 649:/usr/lib/avr/include/avr/power.h **** #endif
 650:/usr/lib/avr/include/avr/power.h **** 
 651:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCU)
 652:/usr/lib/avr/include/avr/power.h **** #define power_crypto_enable()           (PRR0 &= (uint8_t)~(1 << PRCU))
 653:/usr/lib/avr/include/avr/power.h **** #define power_crypto_disable()          (PRR0 |= (uint8_t)(1 << PRCU))
 654:/usr/lib/avr/include/avr/power.h **** #endif
 655:/usr/lib/avr/include/avr/power.h **** 
 656:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRDS)
 657:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_enable()         (PRR0 &= (uint8_t)~(1 << PRDS))
 658:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_disable()        (PRR0 |= (uint8_t)(1 << PRDS))
 659:/usr/lib/avr/include/avr/power.h **** #endif
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLFR)
 662:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR0 &= (uint8_t)~(1 << PRLFR))            
 663:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR0 |= (uint8_t)(1 << PRLFR))            
 664:/usr/lib/avr/include/avr/power.h **** #endif
 665:/usr/lib/avr/include/avr/power.h **** 
 666:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLIN)
 667:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()              (PRR0 &= (uint8_t)~(1 << PRLIN))
 668:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()             (PRR0 |= (uint8_t)(1 << PRLIN))
 669:/usr/lib/avr/include/avr/power.h **** #endif
 670:/usr/lib/avr/include/avr/power.h **** 
 671:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRPGA)
 672:/usr/lib/avr/include/avr/power.h **** #define power_pga_enable()              (PRR0 &= (uint8_t)~(1 << PRPGA))
 673:/usr/lib/avr/include/avr/power.h **** #define power_pga_disable()             (PRR0 |= (uint8_t)(1 << PRPGA))
 674:/usr/lib/avr/include/avr/power.h **** #endif
 675:/usr/lib/avr/include/avr/power.h **** 
 676:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRRXDC)
 677:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()  (PRR0 &= (uint8_t)~(1 << PRRXDC))
 678:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_disable() (PRR0 |= (uint8_t)(1 << PRRXDC))
 679:/usr/lib/avr/include/avr/power.h **** #endif
 680:/usr/lib/avr/include/avr/power.h **** 
 681:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRSPI)
 682:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
 683:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
 684:/usr/lib/avr/include/avr/power.h **** #endif
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT0)
 687:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRT0))
 688:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRT0))
 689:/usr/lib/avr/include/avr/power.h **** #endif
 690:/usr/lib/avr/include/avr/power.h **** 
 691:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM0)
 692:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM0))
 693:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRTIM0))
 694:/usr/lib/avr/include/avr/power.h **** #endif
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT1)
 697:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRT1))
 698:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRT1))
 699:/usr/lib/avr/include/avr/power.h **** #endif
 700:/usr/lib/avr/include/avr/power.h **** 
 701:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM1)
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM1))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRTIM1))
 704:/usr/lib/avr/include/avr/power.h **** #endif
 705:/usr/lib/avr/include/avr/power.h **** 
 706:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT2)
 707:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRT2))
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRT2))
 709:/usr/lib/avr/include/avr/power.h **** #endif
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM2)
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM2))
 713:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRTIM2))
 714:/usr/lib/avr/include/avr/power.h **** #endif
 715:/usr/lib/avr/include/avr/power.h **** 
 716:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT3)
 717:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR0 &= (uint8_t)~(1 << PRT3))
 718:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR0 |= (uint8_t)(1 << PRT3))
 719:/usr/lib/avr/include/avr/power.h **** #endif
 720:/usr/lib/avr/include/avr/power.h **** 
 721:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTM)
 722:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_enable()   (PRR0 &= (uint8_t)~(1 << PRTM))
 723:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_disable()  (PRR0 |= (uint8_t)(1 << PRTM))
 724:/usr/lib/avr/include/avr/power.h **** #endif
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTWI)
 727:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()              (PRR0 &= (uint8_t)~(1 << PRTWI))
 728:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()             (PRR0 |= (uint8_t)(1 << PRTWI))
 729:/usr/lib/avr/include/avr/power.h **** #endif
 730:/usr/lib/avr/include/avr/power.h **** 
 731:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTXDC)
 732:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()   (PRR0 &= (uint8_t)~(1 << PRTXDC))
 733:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()  (PRR0 |= (uint8_t)(1 << PRTXDC))
 734:/usr/lib/avr/include/avr/power.h **** #endif
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART0)
 737:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART0))
 738:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()          (PRR0 |= (uint8_t)(1 << PRUSART0))
 739:/usr/lib/avr/include/avr/power.h **** #endif
 740:/usr/lib/avr/include/avr/power.h **** 
 741:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART1)
 742:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART1))
 743:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR0 |= (uint8_t)(1 << PRUSART1))
 744:/usr/lib/avr/include/avr/power.h **** #endif
 745:/usr/lib/avr/include/avr/power.h **** 
 746:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVADC)
 747:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()             (PRR0 &= (uint8_t)~(1 << PRVADC))
 748:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()            (PRR0 |= (uint8_t)(1 << PRVADC))
 749:/usr/lib/avr/include/avr/power.h **** #endif
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVM)
 752:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
 753:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
 754:/usr/lib/avr/include/avr/power.h **** #endif
 755:/usr/lib/avr/include/avr/power.h **** 
 756:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVRM)
 757:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()              (PRR0 &= (uint8_t)~(1 << PRVRM))
 758:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()             (PRR0 |= (uint8_t)(1 << PRVRM))
 759:/usr/lib/avr/include/avr/power.h **** #endif
 760:/usr/lib/avr/include/avr/power.h **** 
 761:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRAES)
 762:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PRR1 &= (uint8_t)~(1 << PRAES))
 763:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PRR1 |= (uint8_t)(1 << PRAES))
 764:/usr/lib/avr/include/avr/power.h **** #endif
 765:/usr/lib/avr/include/avr/power.h **** 
 766:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRCI)
 767:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_enable()       (PRR1 &= (uint8_t)~(1 << PRCI))
 768:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_disable()      (PRR1 |= (uint8_t)(1 << PRCI))
 769:/usr/lib/avr/include/avr/power.h **** #endif
 770:/usr/lib/avr/include/avr/power.h **** 
 771:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRHSSPI)
 772:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()            (PRR1 &= (uint8_t)~(1 << PRHSSPI))
 773:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()           (PRR1 |= (uint8_t)(1 << PRHSSPI))
 774:/usr/lib/avr/include/avr/power.h **** #endif
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRKB)
 777:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()               (PRR1 &= (uint8_t)~(1 << PRKB))
 778:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()              (PRR1 |= (uint8_t)(1 << PRKB))
 779:/usr/lib/avr/include/avr/power.h **** #endif
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFR)
 782:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR1 &= (uint8_t)~(1 << PRLFR))            
 783:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR1 |= (uint8_t)(1 << PRLFR))            
 784:/usr/lib/avr/include/avr/power.h **** #endif
 785:/usr/lib/avr/include/avr/power.h **** 
 786:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRSCI)
 787:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()              (PRR1 &= (uint8_t)~(1 << PRSCI))
 788:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()             (PRR1 |= (uint8_t)(1 << PRSCI))
 789:/usr/lib/avr/include/avr/power.h **** #endif
 790:/usr/lib/avr/include/avr/power.h **** 
 791:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT1)
 792:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
 793:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
 794:/usr/lib/avr/include/avr/power.h **** #endif
 795:/usr/lib/avr/include/avr/power.h **** 
 796:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT2)
 797:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
 798:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
 799:/usr/lib/avr/include/avr/power.h **** #endif
 800:/usr/lib/avr/include/avr/power.h **** 
 801:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT3)
 802:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
 803:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
 804:/usr/lib/avr/include/avr/power.h **** #endif
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT4)
 807:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
 808:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
 809:/usr/lib/avr/include/avr/power.h **** #endif
 810:/usr/lib/avr/include/avr/power.h **** 
 811:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT5)
 812:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
 813:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
 814:/usr/lib/avr/include/avr/power.h **** #endif
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM3)
 817:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM3))
 818:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRTIM3))
 819:/usr/lib/avr/include/avr/power.h **** #endif
 820:/usr/lib/avr/include/avr/power.h **** 
 821:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM4)
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM4))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRTIM4))
 824:/usr/lib/avr/include/avr/power.h **** #endif
 825:/usr/lib/avr/include/avr/power.h **** 
 826:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM5)
 827:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM5))
 828:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRTIM5))
 829:/usr/lib/avr/include/avr/power.h **** #endif
 830:/usr/lib/avr/include/avr/power.h **** 
 831:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTRX24)
 832:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_enable()      (PRR1 &= (uint8_t)~(1 << PRTRX24))
 833:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_disable()     (PRR1 |= (uint8_t)(1 << PRTRX24))
 834:/usr/lib/avr/include/avr/power.h **** #endif
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART1)
 837:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART1))
 838:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR1 |= (uint8_t)(1 << PRUSART1))
 839:/usr/lib/avr/include/avr/power.h **** #endif
 840:/usr/lib/avr/include/avr/power.h **** 
 841:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART2)
 842:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART2))
 843:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()          (PRR1 |= (uint8_t)(1 << PRUSART2))
 844:/usr/lib/avr/include/avr/power.h **** #endif
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSB)
 847:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PRR1 &= (uint8_t)~(1 << PRUSB))
 848:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PRR1 |= (uint8_t)(1 << PRUSB))
 849:/usr/lib/avr/include/avr/power.h **** #endif
 850:/usr/lib/avr/include/avr/power.h **** 
 851:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSBH)
 852:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()             (PRR1 &= (uint8_t)~(1 << PRUSBH))
 853:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()            (PRR1 |= (uint8_t)(1 << PRUSBH))
 854:/usr/lib/avr/include/avr/power.h **** #endif
 855:/usr/lib/avr/include/avr/power.h **** 
 856:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRDF)
 857:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
 858:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
 859:/usr/lib/avr/include/avr/power.h **** #endif
 860:/usr/lib/avr/include/avr/power.h **** 
 861:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRIDS)
 862:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
 863:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
 864:/usr/lib/avr/include/avr/power.h **** #endif
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM0)
 867:/usr/lib/avr/include/avr/power.h **** #define power_ram0_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM0))
 868:/usr/lib/avr/include/avr/power.h **** #define power_ram0_disable()            (PRR2 |= (uint8_t)(1 << PRRAM0))
 869:/usr/lib/avr/include/avr/power.h **** #endif
 870:/usr/lib/avr/include/avr/power.h **** 
 871:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM1)
 872:/usr/lib/avr/include/avr/power.h **** #define power_ram1_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM1))
 873:/usr/lib/avr/include/avr/power.h **** #define power_ram1_disable()            (PRR2 |= (uint8_t)(1 << PRRAM1))
 874:/usr/lib/avr/include/avr/power.h **** #endif
 875:/usr/lib/avr/include/avr/power.h **** 
 876:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM2)
 877:/usr/lib/avr/include/avr/power.h **** #define power_ram2_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM2))
 878:/usr/lib/avr/include/avr/power.h **** #define power_ram2_disable()            (PRR2 |= (uint8_t)(1 << PRRAM2))
 879:/usr/lib/avr/include/avr/power.h **** #endif
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM3)
 882:/usr/lib/avr/include/avr/power.h **** #define power_ram3_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM3))
 883:/usr/lib/avr/include/avr/power.h **** #define power_ram3_disable()            (PRR2 |= (uint8_t)(1 << PRRAM3))
 884:/usr/lib/avr/include/avr/power.h **** #endif
 885:/usr/lib/avr/include/avr/power.h **** 
 886:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRS)
 887:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
 888:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
 889:/usr/lib/avr/include/avr/power.h **** #endif
 890:/usr/lib/avr/include/avr/power.h **** 
 891:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSF)
 892:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
 893:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
 894:/usr/lib/avr/include/avr/power.h **** #endif
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSSM)
 897:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
 898:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
 899:/usr/lib/avr/include/avr/power.h **** #endif
 900:/usr/lib/avr/include/avr/power.h **** 
 901:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRTM)
 902:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
 903:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
 904:/usr/lib/avr/include/avr/power.h **** #endif
 905:/usr/lib/avr/include/avr/power.h **** 
 906:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXA)
 907:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
 908:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
 909:/usr/lib/avr/include/avr/power.h **** #endif
 910:/usr/lib/avr/include/avr/power.h **** 
 911:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXB)
 912:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
 913:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
 914:/usr/lib/avr/include/avr/power.h **** #endif
 915:/usr/lib/avr/include/avr/power.h **** 
 916:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_AES)
 917:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 918:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PR_PRGEN |= (uint8_t)PR_AES_bm)
 919:/usr/lib/avr/include/avr/power.h **** #endif
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_DMA)
 922:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()              (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 923:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()             (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 924:/usr/lib/avr/include/avr/power.h **** #endif
 925:/usr/lib/avr/include/avr/power.h **** 
 926:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EBI)
 927:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()              (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 928:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable()             (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 929:/usr/lib/avr/include/avr/power.h **** #endif
 930:/usr/lib/avr/include/avr/power.h **** 
 931:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EDMA)
 932:/usr/lib/avr/include/avr/power.h **** #define power_edma_enable()             (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
 933:/usr/lib/avr/include/avr/power.h **** #define power_edma_disable()            (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
 934:/usr/lib/avr/include/avr/power.h **** #endif
 935:/usr/lib/avr/include/avr/power.h **** 
 936:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EVSYS)
 937:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()            (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 938:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()           (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 939:/usr/lib/avr/include/avr/power.h **** #endif
 940:/usr/lib/avr/include/avr/power.h **** 
 941:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_LCD)
 942:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()              (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
 943:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()             (PR_PRGEN |= (uint8_t)PR_LCD_bm)
 944:/usr/lib/avr/include/avr/power.h **** #endif
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_RTC)
 947:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()              (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 948:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable()             (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 949:/usr/lib/avr/include/avr/power.h **** #endif
 950:/usr/lib/avr/include/avr/power.h **** 
 951:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_USB)
 952:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PR_PRGEN &= (uint8_t)(PR_USB_bm))
 954:/usr/lib/avr/include/avr/power.h **** #endif
 955:/usr/lib/avr/include/avr/power.h **** 
 956:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_XCL)
 957:/usr/lib/avr/include/avr/power.h **** #define power_xcl_enable()              (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
 958:/usr/lib/avr/include/avr/power.h **** #define power_xcl_disable()             (PR_PRGEN |= (uint8_t)PR_XCL_bm)
 959:/usr/lib/avr/include/avr/power.h **** #endif
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_AC)
 962:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 963:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 964:/usr/lib/avr/include/avr/power.h **** #endif
 965:/usr/lib/avr/include/avr/power.h **** 
 966:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_ADC)
 967:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 968:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 969:/usr/lib/avr/include/avr/power.h **** #endif
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_DAC)
 972:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 973:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 974:/usr/lib/avr/include/avr/power.h **** #endif
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_AC)
 977:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 978:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 979:/usr/lib/avr/include/avr/power.h **** #endif
 980:/usr/lib/avr/include/avr/power.h **** 
 981:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_ADC)
 982:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 983:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 984:/usr/lib/avr/include/avr/power.h **** #endif
 985:/usr/lib/avr/include/avr/power.h **** 
 986:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_DAC)
 987:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 988:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 989:/usr/lib/avr/include/avr/power.h **** #endif
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_HIRES)
 992:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 993:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 994:/usr/lib/avr/include/avr/power.h **** #endif
 995:/usr/lib/avr/include/avr/power.h **** 
 996:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_SPI)
 997:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 998:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 999:/usr/lib/avr/include/avr/power.h **** #endif
1000:/usr/lib/avr/include/avr/power.h **** 
1001:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC0)
1002:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1003:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1004:/usr/lib/avr/include/avr/power.h **** #endif
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC1)
1007:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1008:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1009:/usr/lib/avr/include/avr/power.h **** #endif
1010:/usr/lib/avr/include/avr/power.h **** 
1011:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC4)
1012:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1013:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_disable()    (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1014:/usr/lib/avr/include/avr/power.h **** #endif
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC5)
1017:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1018:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_disable()    (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1019:/usr/lib/avr/include/avr/power.h **** #endif
1020:/usr/lib/avr/include/avr/power.h **** 
1021:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TWI)
1022:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1023:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1024:/usr/lib/avr/include/avr/power.h **** #endif
1025:/usr/lib/avr/include/avr/power.h **** 
1026:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART0)
1027:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1028:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1029:/usr/lib/avr/include/avr/power.h **** #endif
1030:/usr/lib/avr/include/avr/power.h **** 
1031:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART1)
1032:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1033:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1034:/usr/lib/avr/include/avr/power.h **** #endif
1035:/usr/lib/avr/include/avr/power.h **** 
1036:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_HIRES)
1037:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1038:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1039:/usr/lib/avr/include/avr/power.h **** #endif
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_SPI)
1042:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1043:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1044:/usr/lib/avr/include/avr/power.h **** #endif
1045:/usr/lib/avr/include/avr/power.h **** 
1046:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC0)
1047:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1048:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1049:/usr/lib/avr/include/avr/power.h **** #endif
1050:/usr/lib/avr/include/avr/power.h **** 
1051:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC1)
1052:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1053:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1054:/usr/lib/avr/include/avr/power.h **** #endif
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC5)
1057:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_enable()     (PR_PRPD  &= (uint8_t)~(PR_TC5_bm))
1058:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_disable()    (PR_PRPD  |= (uint8_t)PR_TC5_bm)
1059:/usr/lib/avr/include/avr/power.h **** #endif
1060:/usr/lib/avr/include/avr/power.h **** 
1061:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TWI)
1062:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1063:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1064:/usr/lib/avr/include/avr/power.h **** #endif
1065:/usr/lib/avr/include/avr/power.h **** 
1066:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART0)
1067:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1068:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1069:/usr/lib/avr/include/avr/power.h **** #endif
1070:/usr/lib/avr/include/avr/power.h **** 
1071:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART1)
1072:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1073:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1074:/usr/lib/avr/include/avr/power.h **** #endif
1075:/usr/lib/avr/include/avr/power.h **** 
1076:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_HIRES)
1077:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1078:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1079:/usr/lib/avr/include/avr/power.h **** #endif
1080:/usr/lib/avr/include/avr/power.h **** 
1081:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_SPI)
1082:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1083:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1084:/usr/lib/avr/include/avr/power.h **** #endif
1085:/usr/lib/avr/include/avr/power.h **** 
1086:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC0)
1087:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1088:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1089:/usr/lib/avr/include/avr/power.h **** #endif
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC1)
1092:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1093:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1094:/usr/lib/avr/include/avr/power.h **** #endif
1095:/usr/lib/avr/include/avr/power.h **** 
1096:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TWI)
1097:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1098:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1099:/usr/lib/avr/include/avr/power.h **** #endif
1100:/usr/lib/avr/include/avr/power.h **** 
1101:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART0)
1102:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1103:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1104:/usr/lib/avr/include/avr/power.h **** #endif
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART1)
1107:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1108:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1109:/usr/lib/avr/include/avr/power.h **** #endif
1110:/usr/lib/avr/include/avr/power.h **** 
1111:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_HIRES)
1112:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1113:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1114:/usr/lib/avr/include/avr/power.h **** #endif
1115:/usr/lib/avr/include/avr/power.h **** 
1116:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_SPI)
1117:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1118:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1119:/usr/lib/avr/include/avr/power.h **** #endif
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC0)
1122:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1123:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1124:/usr/lib/avr/include/avr/power.h **** #endif
1125:/usr/lib/avr/include/avr/power.h **** 
1126:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC1)
1127:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1128:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1129:/usr/lib/avr/include/avr/power.h **** #endif
1130:/usr/lib/avr/include/avr/power.h **** 
1131:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TWI)
1132:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1133:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1134:/usr/lib/avr/include/avr/power.h **** #endif
1135:/usr/lib/avr/include/avr/power.h **** 
1136:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART0)
1137:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1138:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1139:/usr/lib/avr/include/avr/power.h **** #endif
1140:/usr/lib/avr/include/avr/power.h **** 
1141:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART1)
1142:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1143:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1144:/usr/lib/avr/include/avr/power.h **** #endif
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** 
1147:/usr/lib/avr/include/avr/power.h **** static __inline void
1148:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1149:/usr/lib/avr/include/avr/power.h **** __power_all_enable()
1150:/usr/lib/avr/include/avr/power.h **** {
1151:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1152:/usr/lib/avr/include/avr/power.h ****     PRR &= (uint8_t)~(__AVR_HAVE_PRR);
1153:/usr/lib/avr/include/avr/power.h **** #endif
1154:/usr/lib/avr/include/avr/power.h **** 
1155:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1156:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~(__AVR_HAVE_PRR0);
1157:/usr/lib/avr/include/avr/power.h **** #endif
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1160:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(__AVR_HAVE_PRR1);
1161:/usr/lib/avr/include/avr/power.h **** #endif
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1164:/usr/lib/avr/include/avr/power.h ****    PRR2 &= (uint8_t)~(__AVR_HAVE_PRR2);
1165:/usr/lib/avr/include/avr/power.h **** #endif
1166:/usr/lib/avr/include/avr/power.h **** 
1167:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1168:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(__AVR_HAVE_PRGEN);
1169:/usr/lib/avr/include/avr/power.h **** #endif
1170:/usr/lib/avr/include/avr/power.h **** 
1171:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1172:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(__AVR_HAVE_PRPA);
1173:/usr/lib/avr/include/avr/power.h **** #endif
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1176:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(__AVR_HAVE_PRPB);
1177:/usr/lib/avr/include/avr/power.h **** #endif
1178:/usr/lib/avr/include/avr/power.h **** 
1179:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1180:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(__AVR_HAVE_PRPC);
1181:/usr/lib/avr/include/avr/power.h **** #endif
1182:/usr/lib/avr/include/avr/power.h **** 
1183:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1184:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(__AVR_HAVE_PRPD);
1185:/usr/lib/avr/include/avr/power.h **** #endif
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1188:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(__AVR_HAVE_PRPE);
1189:/usr/lib/avr/include/avr/power.h **** #endif
1190:/usr/lib/avr/include/avr/power.h **** 
1191:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1192:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(__AVR_HAVE_PRPF);
1193:/usr/lib/avr/include/avr/power.h **** #endif
1194:/usr/lib/avr/include/avr/power.h **** }
1195:/usr/lib/avr/include/avr/power.h **** 
1196:/usr/lib/avr/include/avr/power.h **** static __inline void
1197:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1198:/usr/lib/avr/include/avr/power.h **** __power_all_disable()
1199:/usr/lib/avr/include/avr/power.h **** {
1200:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1201:/usr/lib/avr/include/avr/power.h ****     PRR |= (uint8_t)(__AVR_HAVE_PRR);
1202:/usr/lib/avr/include/avr/power.h **** #endif
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1205:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)(__AVR_HAVE_PRR0);
1206:/usr/lib/avr/include/avr/power.h **** #endif
1207:/usr/lib/avr/include/avr/power.h **** 
1208:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1209:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(__AVR_HAVE_PRR1);
1210:/usr/lib/avr/include/avr/power.h **** #endif
1211:/usr/lib/avr/include/avr/power.h **** 
1212:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1213:/usr/lib/avr/include/avr/power.h ****     PRR2 |= (uint8_t)(__AVR_HAVE_PRR2);
1214:/usr/lib/avr/include/avr/power.h **** #endif
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1217:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(__AVR_HAVE_PRGEN);
1218:/usr/lib/avr/include/avr/power.h **** #endif
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1221:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(__AVR_HAVE_PRPA);
1222:/usr/lib/avr/include/avr/power.h **** #endif
1223:/usr/lib/avr/include/avr/power.h **** 
1224:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1225:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(__AVR_HAVE_PRPB);
1226:/usr/lib/avr/include/avr/power.h **** #endif
1227:/usr/lib/avr/include/avr/power.h **** 
1228:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1229:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(__AVR_HAVE_PRPC);
1230:/usr/lib/avr/include/avr/power.h **** #endif
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1233:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(__AVR_HAVE_PRPD);
1234:/usr/lib/avr/include/avr/power.h **** #endif
1235:/usr/lib/avr/include/avr/power.h **** 
1236:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1237:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(__AVR_HAVE_PRPE);
1238:/usr/lib/avr/include/avr/power.h **** #endif
1239:/usr/lib/avr/include/avr/power.h **** 
1240:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1241:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(__AVR_HAVE_PRPF);
1242:/usr/lib/avr/include/avr/power.h **** #endif
1243:/usr/lib/avr/include/avr/power.h **** }
1244:/usr/lib/avr/include/avr/power.h **** 
1245:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_enable
1246:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() __power_all_enable()
1247:/usr/lib/avr/include/avr/power.h **** #endif
1248:/usr/lib/avr/include/avr/power.h **** 
1249:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_disable
1250:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() __power_all_disable()
1251:/usr/lib/avr/include/avr/power.h **** #endif
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1254:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1255:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1256:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1257:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1258:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1259:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1260:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1261:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM81__) \
1262:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__) \
1263:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1264:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1265:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1266:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1267:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1268:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1269:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1270:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1271:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1272:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
1273:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5272__) \
1274:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA6617C__) \
1275:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA664251__) \
1276:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1277:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1278:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284__) \
1279:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1280:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1281:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1282:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1283:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1284:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1285:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1286:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__) \
1287:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1288:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1289:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1290:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
1291:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1292:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1293:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1294:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
1295:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PB__) \
1296:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1297:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1298:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1299:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1300:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16M1__) \
1301:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1302:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
1303:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1304:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1305:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1310:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1311:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1312:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
1313:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
1314:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1315:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1316:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
1317:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
1318:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1319:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1320:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1321:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1323:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1324:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1325:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1326:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
1327:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
1328:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1329:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1330:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1331:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1332:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1333:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1334:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1335:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
1336:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PB__) \
1337:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1338:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1339:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1340:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1341:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1342:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1343:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1344:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1345:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PB__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1372:/usr/lib/avr/include/avr/power.h **** 
1373:/usr/lib/avr/include/avr/power.h **** 
1374:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1375:/usr/lib/avr/include/avr/power.h **** 
1376:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1377:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1378:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low.
1379:/usr/lib/avr/include/avr/power.h **** On some earlier AVRs (ATmega103, ATmega64, ATmega128), similar
1380:/usr/lib/avr/include/avr/power.h **** functionality can be achieved through the XTAL Divide Control Register.
1381:/usr/lib/avr/include/avr/power.h **** Below are two macros and an enumerated type that can be used to
1382:/usr/lib/avr/include/avr/power.h **** interface to the Clock Prescale Register or
1383:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1384:/usr/lib/avr/include/avr/power.h **** 
1385:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a clock prescaler. On those devices
1386:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register or XTAL Divide Control Register, these
1387:/usr/lib/avr/include/avr/power.h **** macros are not available.
1388:/usr/lib/avr/include/avr/power.h **** */
1389:/usr/lib/avr/include/avr/power.h **** 
1390:/usr/lib/avr/include/avr/power.h **** 
1391:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1392:/usr/lib/avr/include/avr/power.h **** \code 
1393:/usr/lib/avr/include/avr/power.h **** typedef enum
1394:/usr/lib/avr/include/avr/power.h **** {
1395:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1396:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1397:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1398:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1399:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1400:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1401:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1402:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1403:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1404:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1405:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1406:/usr/lib/avr/include/avr/power.h **** \endcode
1407:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1408:/usr/lib/avr/include/avr/power.h **** System Clock Prescale Register.
1409:/usr/lib/avr/include/avr/power.h **** 
1410:/usr/lib/avr/include/avr/power.h **** \code
1411:/usr/lib/avr/include/avr/power.h **** typedef enum
1412:/usr/lib/avr/include/avr/power.h **** {
1413:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 1,
1414:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 2,
1415:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 4,
1416:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 8,
1417:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 16,
1418:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 32,
1419:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 64,
1420:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 128
1421:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1422:/usr/lib/avr/include/avr/power.h **** \endcode
1423:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1424:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1425:/usr/lib/avr/include/avr/power.h **** 
1426:/usr/lib/avr/include/avr/power.h **** */
1427:/usr/lib/avr/include/avr/power.h **** typedef enum
1428:/usr/lib/avr/include/avr/power.h **** {
1429:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1430:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1431:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1432:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1433:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1434:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1435:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1436:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1437:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1438:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__) \
1439:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1440:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1441:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1442:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1443:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1444:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__)
1445:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1446:/usr/lib/avr/include/avr/power.h **** #endif
1447:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1448:/usr/lib/avr/include/avr/power.h **** 
1449:/usr/lib/avr/include/avr/power.h **** 
1450:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1451:/usr/lib/avr/include/avr/power.h **** 
1452:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1453:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1454:/usr/lib/avr/include/avr/power.h **** 
1455:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1456:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1457:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1458:/usr/lib/avr/include/avr/power.h **** 
1459:/usr/lib/avr/include/avr/power.h **** The type of \c x is \c clock_div_t.
1460:/usr/lib/avr/include/avr/power.h **** 
1461:/usr/lib/avr/include/avr/power.h **** \note For device with XTAL Divide Control Register (XDIV), \c x can actually range
1462:/usr/lib/avr/include/avr/power.h **** from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1467:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
 295               		.loc 5 1467 0
 296 001c 90E0      		ldi r25,0
 297 001e 80E8      		ldi r24,lo8(-128)
 298               	/* #APP */
 299               	 ;  1467 "/usr/lib/avr/include/avr/power.h" 1
 300 0020 0FB6      		in __tmp_reg__,__SREG__
 301 0022 F894      		cli
 302 0024 8093 6100 		sts 97, r24
 303 0028 9093 6100 		sts 97, r25
 304 002c 0FBE      		out __SREG__, __tmp_reg__
 305               	 ;  0 "" 2
 306               	/* #NOAPP */
 307               	.LBE124:
 308               	.LBE123:
 223:BootloaderCDC.c **** 	MCUCR = (1 << IVSEL);
 309               		.loc 1 223 0
 310 002e 81E0      		ldi r24,lo8(1)
 311 0030 85BF      		out 0x35,r24
 224:BootloaderCDC.c **** 
 312               		.loc 1 224 0
 313 0032 82E0      		ldi r24,lo8(2)
 314 0034 85BF      		out 0x35,r24
 227:BootloaderCDC.c **** }
 315               		.loc 1 227 0
 316 0036 0C94 0000 		jmp USB_Init
 317               	.LVL13:
 318               		.cfi_endproc
 319               	.LFE85:
 321               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 322               	.global	EVENT_USB_Device_ConfigurationChanged
 324               	EVENT_USB_Device_ConfigurationChanged:
 325               	.LFB86:
 234:BootloaderCDC.c **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 326               		.loc 1 234 0
 327               		.cfi_startproc
 328               	/* prologue: function */
 329               	/* frame size = 0 */
 330               	/* stack size = 0 */
 331               	.L__stack_usage = 0
 332               	.LVL14:
 333               	.LBB125:
 334               	.LBB126:
 297:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 335               		.loc 2 297 0
 336 0000 42E0      		ldi r20,lo8(2)
 337 0002 61EC      		ldi r22,lo8(-63)
 338 0004 82E0      		ldi r24,lo8(2)
 339 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 340               	.LVL15:
 341               	.LBE126:
 342               	.LBE125:
 343               	.LBB127:
 344               	.LBB128:
 345 000a 42E1      		ldi r20,lo8(18)
 346 000c 61E8      		ldi r22,lo8(-127)
 347 000e 83E0      		ldi r24,lo8(3)
 348 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 349               	.LVL16:
 350               	.LBE128:
 351               	.LBE127:
 352               	.LBB129:
 353               	.LBB130:
 354 0014 42E1      		ldi r20,lo8(18)
 355 0016 60E8      		ldi r22,lo8(-128)
 356 0018 84E0      		ldi r24,lo8(4)
 357 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 358               	.LVL17:
 359               	.LBE130:
 360               	.LBE129:
 361               		.cfi_endproc
 362               	.LFE86:
 364               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 365               	.global	EVENT_USB_Device_UnhandledControlRequest
 367               	EVENT_USB_Device_UnhandledControlRequest:
 368               	.LFB87:
 254:BootloaderCDC.c **** 	/* Process CDC specific control requests */
 369               		.loc 1 254 0
 370               		.cfi_startproc
 371               	/* prologue: function */
 372               	/* frame size = 0 */
 373               	/* stack size = 0 */
 374               	.L__stack_usage = 0
 256:BootloaderCDC.c **** 	{
 375               		.loc 1 256 0
 376 0000 8091 0000 		lds r24,USB_ControlRequest+1
 377 0004 8032      		cpi r24,lo8(32)
 378 0006 01F0      		breq .L31
 379 0008 8132      		cpi r24,lo8(33)
 380 000a 01F4      		brne .L29
 259:BootloaderCDC.c **** 			{
 381               		.loc 1 259 0
 382 000c 8091 0000 		lds r24,USB_ControlRequest
 383 0010 813A      		cpi r24,lo8(-95)
 384 0012 01F4      		brne .L29
 385               	.LBB131:
 386               	.LBB132:
 494:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 387               		.loc 2 494 0
 388 0014 8091 E800 		lds r24,232
 389 0018 877F      		andi r24,lo8(-9)
 390 001a 8093 E800 		sts 232,r24
 391               	.LBE132:
 392               	.LBE131:
 264:BootloaderCDC.c **** 				Endpoint_ClearOUT();
 393               		.loc 1 264 0
 394 001e 67E0      		ldi r22,lo8(7)
 395 0020 70E0      		ldi r23,0
 396 0022 80E0      		ldi r24,lo8(LineEncoding)
 397 0024 90E0      		ldi r25,hi8(LineEncoding)
 398 0026 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 399               	.LVL18:
 400               	.LBB133:
 401               	.LBB134:
 521:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 402               		.loc 2 521 0
 403 002a 8091 E800 		lds r24,232
 404 002e 8B77      		andi r24,lo8(123)
 405 0030 00C0      		rjmp .L33
 406               	.L31:
 407               	.LBE134:
 408               	.LBE133:
 270:BootloaderCDC.c **** 			{
 409               		.loc 1 270 0
 410 0032 8091 0000 		lds r24,USB_ControlRequest
 411 0036 8132      		cpi r24,lo8(33)
 412 0038 01F4      		brne .L29
 413               	.LBB135:
 414               	.LBB136:
 494:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 415               		.loc 2 494 0
 416 003a 8091 E800 		lds r24,232
 417 003e 877F      		andi r24,lo8(-9)
 418 0040 8093 E800 		sts 232,r24
 419               	.LBE136:
 420               	.LBE135:
 275:BootloaderCDC.c **** 				Endpoint_ClearIN();
 421               		.loc 1 275 0
 422 0044 67E0      		ldi r22,lo8(7)
 423 0046 70E0      		ldi r23,0
 424 0048 80E0      		ldi r24,lo8(LineEncoding)
 425 004a 90E0      		ldi r25,hi8(LineEncoding)
 426 004c 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 427               	.LVL19:
 428               	.LBB137:
 429               	.LBB138:
 506:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 430               		.loc 2 506 0
 431 0050 8091 E800 		lds r24,232
 432 0054 8E77      		andi r24,lo8(126)
 433               	.L33:
 434 0056 8093 E800 		sts 232,r24
 435               	.L29:
 436 005a 0895      		ret
 437               	.LBE138:
 438               	.LBE137:
 439               		.cfi_endproc
 440               	.LFE87:
 442               		.section	.rodata.str1.1,"aMS",@progbits,1
 443               	.LC0:
 444 0000 4C55 4641 		.string	"LUFACDC"
 444      4344 4300 
 445               		.section	.text.CDC_Task,"ax",@progbits
 446               	.global	CDC_Task
 448               	CDC_Task:
 449               	.LFB91:
 443:BootloaderCDC.c **** 			  return;
 444:BootloaderCDC.c **** 		}
 445:BootloaderCDC.c **** 	}
 446:BootloaderCDC.c **** 
 447:BootloaderCDC.c **** 	/* Write the next byte to the OUT endpoint */
 448:BootloaderCDC.c **** 	Endpoint_Write_Byte(Response);
 449:BootloaderCDC.c **** }
 450:BootloaderCDC.c **** 
 451:BootloaderCDC.c **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 452:BootloaderCDC.c ****  *  and send the appropriate response back to the host.
 453:BootloaderCDC.c ****  */
 454:BootloaderCDC.c **** void CDC_Task(void)
 455:BootloaderCDC.c **** {
 450               		.loc 1 455 0
 451               		.cfi_startproc
 452 0000 8F92      		push r8
 453               	.LCFI0:
 454               		.cfi_def_cfa_offset 3
 455               		.cfi_offset 8, -2
 456 0002 9F92      		push r9
 457               	.LCFI1:
 458               		.cfi_def_cfa_offset 4
 459               		.cfi_offset 9, -3
 460 0004 AF92      		push r10
 461               	.LCFI2:
 462               		.cfi_def_cfa_offset 5
 463               		.cfi_offset 10, -4
 464 0006 BF92      		push r11
 465               	.LCFI3:
 466               		.cfi_def_cfa_offset 6
 467               		.cfi_offset 11, -5
 468 0008 CF92      		push r12
 469               	.LCFI4:
 470               		.cfi_def_cfa_offset 7
 471               		.cfi_offset 12, -6
 472 000a DF92      		push r13
 473               	.LCFI5:
 474               		.cfi_def_cfa_offset 8
 475               		.cfi_offset 13, -7
 476 000c EF92      		push r14
 477               	.LCFI6:
 478               		.cfi_def_cfa_offset 9
 479               		.cfi_offset 14, -8
 480 000e FF92      		push r15
 481               	.LCFI7:
 482               		.cfi_def_cfa_offset 10
 483               		.cfi_offset 15, -9
 484 0010 0F93      		push r16
 485               	.LCFI8:
 486               		.cfi_def_cfa_offset 11
 487               		.cfi_offset 16, -10
 488 0012 1F93      		push r17
 489               	.LCFI9:
 490               		.cfi_def_cfa_offset 12
 491               		.cfi_offset 17, -11
 492 0014 CF93      		push r28
 493               	.LCFI10:
 494               		.cfi_def_cfa_offset 13
 495               		.cfi_offset 28, -12
 496 0016 DF93      		push r29
 497               	.LCFI11:
 498               		.cfi_def_cfa_offset 14
 499               		.cfi_offset 29, -13
 500               	/* prologue: function */
 501               	/* frame size = 0 */
 502               	/* stack size = 12 */
 503               	.L__stack_usage = 12
 504               	.LVL20:
 505               	.LBB173:
 506               	.LBB174:
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 507               		.loc 2 351 0
 508 0018 84E0      		ldi r24,lo8(4)
 509 001a 8093 E900 		sts 233,r24
 510               	.LBE174:
 511               	.LBE173:
 512               	.LBB175:
 513               	.LBB176:
 469:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 514               		.loc 2 469 0
 515 001e 8091 E800 		lds r24,232
 516               	.LBE176:
 517               	.LBE175:
 456:BootloaderCDC.c **** 	/* Select the OUT endpoint */
 457:BootloaderCDC.c **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 458:BootloaderCDC.c **** 
 459:BootloaderCDC.c **** 	/* Check if endpoint has a command in it sent from the host */
 460:BootloaderCDC.c **** 	if (Endpoint_IsOUTReceived())
 518               		.loc 1 460 0
 519 0022 82FF      		sbrs r24,2
 520 0024 00C0      		rjmp .L34
 521               	.LBB177:
 461:BootloaderCDC.c **** 	{
 462:BootloaderCDC.c **** 	  // adafruit mods - we are still processing data
 463:BootloaderCDC.c **** 	  boottimeout = 0;
 522               		.loc 1 463 0
 523 0026 1092 0000 		sts boottimeout,__zero_reg__
 464:BootloaderCDC.c **** 
 465:BootloaderCDC.c **** 
 466:BootloaderCDC.c **** 		/* Read in the bootloader command (first byte sent from host) */
 467:BootloaderCDC.c **** 		uint8_t Command = FetchNextCommandByte();
 524               		.loc 1 467 0
 525 002a 0E94 0000 		call FetchNextCommandByte
 526               	.LVL21:
 527 002e C82F      		mov r28,r24
 528               	.LVL22:
 468:BootloaderCDC.c **** 
 469:BootloaderCDC.c **** 		if ((Command == 'L') || (Command == 'P') || (Command == 'T') || (Command == 'E'))
 529               		.loc 1 469 0
 530 0030 8C34      		cpi r24,lo8(76)
 531 0032 01F4      		brne .+2
 532 0034 00C0      		rjmp .L121
 533               		.loc 1 469 0 is_stmt 0 discriminator 1
 534 0036 8035      		cpi r24,lo8(80)
 535 0038 01F4      		brne .+2
 536 003a 00C0      		rjmp .L121
 537               		.loc 1 469 0 discriminator 2
 538 003c 8435      		cpi r24,lo8(84)
 539 003e 01F0      		breq .L40
 540               		.loc 1 469 0 discriminator 3
 541 0040 8534      		cpi r24,lo8(69)
 542 0042 01F4      		brne .L41
 470:BootloaderCDC.c **** 		{
 471:BootloaderCDC.c **** 			if (Command == 'E')
 472:BootloaderCDC.c **** 			  RunBootloader = false;
 543               		.loc 1 472 0 is_stmt 1
 544 0044 1092 0000 		sts RunBootloader,__zero_reg__
 545 0048 00C0      		rjmp .L121
 546               	.L40:
 473:BootloaderCDC.c **** 			else if (Command == 'T')
 474:BootloaderCDC.c **** 			  FetchNextCommandByte();
 547               		.loc 1 474 0
 548 004a 0E94 0000 		call FetchNextCommandByte
 549               	.LVL23:
 550 004e 00C0      		rjmp .L121
 551               	.LVL24:
 552               	.L41:
 475:BootloaderCDC.c **** 
 476:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 477:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 478:BootloaderCDC.c **** 		}
 479:BootloaderCDC.c **** 		else if (Command == 't')
 553               		.loc 1 479 0
 554 0050 8437      		cpi r24,lo8(116)
 555 0052 01F4      		brne .L43
 480:BootloaderCDC.c **** 		{
 481:BootloaderCDC.c **** 			/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
 482:BootloaderCDC.c **** 			WriteNextResponseByte(0x44);
 556               		.loc 1 482 0
 557 0054 84E4      		ldi r24,lo8(68)
 558               	.LVL25:
 559 0056 0E94 0000 		call WriteNextResponseByte
 560               	.LVL26:
 483:BootloaderCDC.c **** 			WriteNextResponseByte(0x00);
 561               		.loc 1 483 0
 562 005a 80E0      		ldi r24,0
 563               	.LVL27:
 564               	.L120:
 565 005c 0E94 0000 		call WriteNextResponseByte
 566               	.LVL28:
 567 0060 00C0      		rjmp .L42
 568               	.LVL29:
 569               	.L43:
 484:BootloaderCDC.c **** 		}
 485:BootloaderCDC.c **** 		else if (Command == 'a')
 570               		.loc 1 485 0
 571 0062 8136      		cpi r24,lo8(97)
 572 0064 01F4      		brne .L44
 486:BootloaderCDC.c **** 		{
 487:BootloaderCDC.c **** 			/* Indicate auto-address increment is supported */
 488:BootloaderCDC.c **** 			WriteNextResponseByte('Y');
 573               		.loc 1 488 0
 574 0066 89E5      		ldi r24,lo8(89)
 575               	.LVL30:
 576 0068 00C0      		rjmp .L120
 577               	.LVL31:
 578               	.L44:
 489:BootloaderCDC.c **** 		}
 490:BootloaderCDC.c **** 		else if (Command == 'A')
 579               		.loc 1 490 0
 580 006a 8134      		cpi r24,lo8(65)
 581 006c 01F4      		brne .L45
 491:BootloaderCDC.c **** 		{
 492:BootloaderCDC.c **** 			/* Set the current address to that given by the host */
 493:BootloaderCDC.c **** 			CurrAddress   = (FetchNextCommandByte() << 9);
 582               		.loc 1 493 0
 583 006e 0E94 0000 		call FetchNextCommandByte
 584               	.LVL32:
 585 0072 90E0      		ldi r25,0
 586 0074 982F      		mov r25,r24
 587 0076 8827      		clr r24
 588 0078 990F      		lsl r25
 589 007a 092E      		mov __tmp_reg__,r25
 590 007c 000C      		lsl r0
 591 007e AA0B      		sbc r26,r26
 592 0080 BB0B      		sbc r27,r27
 593 0082 8093 0000 		sts CurrAddress,r24
 594 0086 9093 0000 		sts CurrAddress+1,r25
 595 008a A093 0000 		sts CurrAddress+2,r26
 596 008e B093 0000 		sts CurrAddress+3,r27
 494:BootloaderCDC.c **** 			CurrAddress  |= (FetchNextCommandByte() << 1);
 597               		.loc 1 494 0
 598 0092 0E94 0000 		call FetchNextCommandByte
 599               	.LVL33:
 600 0096 90E0      		ldi r25,0
 601 0098 880F      		lsl r24
 602 009a 991F      		rol r25
 603 009c 092E      		mov __tmp_reg__,r25
 604 009e 000C      		lsl r0
 605 00a0 AA0B      		sbc r26,r26
 606 00a2 BB0B      		sbc r27,r27
 607 00a4 4091 0000 		lds r20,CurrAddress
 608 00a8 5091 0000 		lds r21,CurrAddress+1
 609 00ac 6091 0000 		lds r22,CurrAddress+2
 610 00b0 7091 0000 		lds r23,CurrAddress+3
 611 00b4 842B      		or r24,r20
 612 00b6 952B      		or r25,r21
 613 00b8 A62B      		or r26,r22
 614 00ba B72B      		or r27,r23
 615               	.LVL34:
 616               	.L122:
 617 00bc 8093 0000 		sts CurrAddress,r24
 618 00c0 9093 0000 		sts CurrAddress+1,r25
 619 00c4 A093 0000 		sts CurrAddress+2,r26
 620 00c8 B093 0000 		sts CurrAddress+3,r27
 621               	.L121:
 495:BootloaderCDC.c **** 
 496:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 497:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 622               		.loc 1 497 0
 623 00cc 8DE0      		ldi r24,lo8(13)
 624 00ce 00C0      		rjmp .L120
 625               	.LVL35:
 626               	.L45:
 498:BootloaderCDC.c **** 		}
 499:BootloaderCDC.c **** 		else if (Command == 'p')
 627               		.loc 1 499 0
 628 00d0 8037      		cpi r24,lo8(112)
 629 00d2 01F4      		brne .L46
 500:BootloaderCDC.c **** 		{
 501:BootloaderCDC.c **** 			/* Indicate serial programmer back to the host */
 502:BootloaderCDC.c **** 			WriteNextResponseByte('S');
 630               		.loc 1 502 0
 631 00d4 83E5      		ldi r24,lo8(83)
 632               	.LVL36:
 633 00d6 00C0      		rjmp .L120
 634               	.LVL37:
 635               	.L46:
 503:BootloaderCDC.c **** 		}
 504:BootloaderCDC.c **** 		else if (Command == 'S')
 636               		.loc 1 504 0
 637 00d8 8335      		cpi r24,lo8(83)
 638 00da 01F4      		brne .L47
 639 00dc C0E0      		ldi r28,lo8(.LC0)
 640 00de D0E0      		ldi r29,hi8(.LC0)
 641 00e0 1C2F      		mov r17,r28
 642 00e2 195F      		subi r17,lo8(-(7))
 643               	.LVL38:
 644               	.L48:
 645               	.LBB178:
 505:BootloaderCDC.c **** 		{
 506:BootloaderCDC.c **** 			/* Write the 7-byte software identifier to the endpoint */
 507:BootloaderCDC.c **** 			for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 508:BootloaderCDC.c **** 			  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 646               		.loc 1 508 0 discriminator 3
 647 00e4 8991      		ld r24,Y+
 648               	.LVL39:
 649 00e6 0E94 0000 		call WriteNextResponseByte
 650               	.LVL40:
 507:BootloaderCDC.c **** 			  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 651               		.loc 1 507 0 discriminator 3
 652 00ea 1C13      		cpse r17,r28
 653 00ec 00C0      		rjmp .L48
 654 00ee 00C0      		rjmp .L42
 655               	.LVL41:
 656               	.L47:
 657               	.LBE178:
 509:BootloaderCDC.c **** 		}
 510:BootloaderCDC.c **** 		else if (Command == 'V')
 658               		.loc 1 510 0
 659 00f0 8635      		cpi r24,lo8(86)
 660 00f2 01F4      		brne .L49
 511:BootloaderCDC.c **** 		{
 512:BootloaderCDC.c **** 			WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 661               		.loc 1 512 0
 662 00f4 81E3      		ldi r24,lo8(49)
 663               	.LVL42:
 664 00f6 0E94 0000 		call WriteNextResponseByte
 665               	.LVL43:
 513:BootloaderCDC.c **** 			WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 666               		.loc 1 513 0
 667 00fa 80E3      		ldi r24,lo8(48)
 668 00fc 00C0      		rjmp .L120
 669               	.LVL44:
 670               	.L49:
 514:BootloaderCDC.c **** 		}
 515:BootloaderCDC.c **** 		else if (Command == 's')
 671               		.loc 1 515 0
 672 00fe 8337      		cpi r24,lo8(115)
 673 0100 01F4      		brne .L50
 516:BootloaderCDC.c **** 		{
 517:BootloaderCDC.c **** 			WriteNextResponseByte(AVR_SIGNATURE_3);
 674               		.loc 1 517 0
 675 0102 87E8      		ldi r24,lo8(-121)
 676               	.LVL45:
 677 0104 0E94 0000 		call WriteNextResponseByte
 678               	.LVL46:
 518:BootloaderCDC.c **** 			WriteNextResponseByte(AVR_SIGNATURE_2);
 679               		.loc 1 518 0
 680 0108 85E9      		ldi r24,lo8(-107)
 681 010a 0E94 0000 		call WriteNextResponseByte
 682               	.LVL47:
 519:BootloaderCDC.c **** 			WriteNextResponseByte(AVR_SIGNATURE_1);
 683               		.loc 1 519 0
 684 010e 8EE1      		ldi r24,lo8(30)
 685 0110 00C0      		rjmp .L120
 686               	.LVL48:
 687               	.L50:
 520:BootloaderCDC.c **** 		}
 521:BootloaderCDC.c **** 		else if (Command == 'b')
 688               		.loc 1 521 0
 689 0112 8236      		cpi r24,lo8(98)
 690 0114 01F4      		brne .L51
 522:BootloaderCDC.c **** 		{
 523:BootloaderCDC.c **** 			WriteNextResponseByte('Y');
 691               		.loc 1 523 0
 692 0116 89E5      		ldi r24,lo8(89)
 693               	.LVL49:
 694 0118 0E94 0000 		call WriteNextResponseByte
 695               	.LVL50:
 524:BootloaderCDC.c **** 
 525:BootloaderCDC.c **** 			/* Send block size to the host */
 526:BootloaderCDC.c **** 			WriteNextResponseByte(SPM_PAGESIZE >> 8);
 696               		.loc 1 526 0
 697 011c 80E0      		ldi r24,0
 698 011e 0E94 0000 		call WriteNextResponseByte
 699               	.LVL51:
 527:BootloaderCDC.c **** 			WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 700               		.loc 1 527 0
 701 0122 80E8      		ldi r24,lo8(-128)
 702 0124 00C0      		rjmp .L120
 703               	.LVL52:
 704               	.L51:
 528:BootloaderCDC.c **** 		}
 529:BootloaderCDC.c **** 		else if (Command == 'e')
 705               		.loc 1 529 0
 706 0126 8536      		cpi r24,lo8(101)
 707 0128 01F4      		brne .L52
 708 012a E0E0      		ldi r30,0
 709 012c F0E0      		ldi r31,0
 710               	.LBB179:
 530:BootloaderCDC.c **** 		{
 531:BootloaderCDC.c **** 			/* Clear the application section of flash */
 532:BootloaderCDC.c **** 			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
 533:BootloaderCDC.c **** 			{
 534:BootloaderCDC.c **** 				boot_page_erase(CurrFlashAddress);
 711               		.loc 1 534 0
 712 012e 83E0      		ldi r24,lo8(3)
 713               	.LVL53:
 535:BootloaderCDC.c **** 				boot_spm_busy_wait();
 536:BootloaderCDC.c **** 				boot_page_write(CurrFlashAddress);
 714               		.loc 1 536 0
 715 0130 95E0      		ldi r25,lo8(5)
 716               	.L55:
 534:BootloaderCDC.c **** 				boot_spm_busy_wait();
 717               		.loc 1 534 0
 718               	/* #APP */
 719               	 ;  534 "BootloaderCDC.c" 1
 720 0132 8093 5700 		sts 87, r24
 721 0136 E895      		spm
 722               		
 723               	 ;  0 "" 2
 724               	/* #NOAPP */
 725               	.L53:
 535:BootloaderCDC.c **** 				boot_spm_busy_wait();
 726               		.loc 1 535 0 discriminator 1
 727 0138 07B6      		in __tmp_reg__,0x37
 728 013a 00FC      		sbrc __tmp_reg__,0
 729 013c 00C0      		rjmp .L53
 730               		.loc 1 536 0
 731               	/* #APP */
 732               	 ;  536 "BootloaderCDC.c" 1
 733 013e 9093 5700 		sts 87, r25
 734 0142 E895      		spm
 735               		
 736               	 ;  0 "" 2
 737               	/* #NOAPP */
 738               	.L54:
 537:BootloaderCDC.c **** 				boot_spm_busy_wait();
 739               		.loc 1 537 0 discriminator 1
 740 0144 07B6      		in __tmp_reg__,0x37
 741 0146 00FC      		sbrc __tmp_reg__,0
 742 0148 00C0      		rjmp .L54
 743               	.LVL54:
 744 014a EF57      		subi r30,127
 745 014c FF4F      		sbci r31,-1
 532:BootloaderCDC.c **** 			{
 746               		.loc 1 532 0 discriminator 2
 747 014e EF35      		cpi r30,95
 748 0150 40E7      		ldi r20,112
 749 0152 F407      		cpc r31,r20
 750 0154 01F4      		brne .L55
 751 0156 00C0      		rjmp .L121
 752               	.LVL55:
 753               	.L52:
 754               	.LBE179:
 538:BootloaderCDC.c **** 
 539:BootloaderCDC.c **** 				CurrFlashAddress += SPM_PAGESIZE;
 540:BootloaderCDC.c **** 			}
 541:BootloaderCDC.c **** 
 542:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 543:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 544:BootloaderCDC.c **** 		}
 545:BootloaderCDC.c **** 		else if (Command == 'l')
 755               		.loc 1 545 0
 756 0158 8C36      		cpi r24,lo8(108)
 757 015a 01F4      		brne .L56
 758               	.LBB180:
 546:BootloaderCDC.c **** 		{
 547:BootloaderCDC.c **** 			/* Set the lock bits to those given by the host */
 548:BootloaderCDC.c **** 			boot_lock_bits_set(FetchNextCommandByte());
 759               		.loc 1 548 0
 760 015c 0E94 0000 		call FetchNextCommandByte
 761               	.LVL56:
 762 0160 8095      		com r24
 763               	.LVL57:
 764 0162 99E0      		ldi r25,lo8(9)
 765               	/* #APP */
 766               	 ;  548 "BootloaderCDC.c" 1
 767 0164 E1E0      		ldi r30, 1
 768 0166 F0E0      		ldi r31, 0
 769 0168 082E      		mov r0, r24
 770 016a 9093 5700 		sts 87, r25
 771 016e E895      		spm
 772               		
 773               	 ;  0 "" 2
 774               	/* #NOAPP */
 775 0170 00C0      		rjmp .L121
 776               	.LVL58:
 777               	.L56:
 778               	.LBE180:
 549:BootloaderCDC.c **** 
 550:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 551:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 552:BootloaderCDC.c **** 		}
 553:BootloaderCDC.c **** 		else if (Command == 'r')
 779               		.loc 1 553 0
 780 0172 8237      		cpi r24,lo8(114)
 781 0174 01F4      		brne .L57
 782               	.LBB181:
 554:BootloaderCDC.c **** 		{
 555:BootloaderCDC.c **** 			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 783               		.loc 1 555 0
 784 0176 E1E0      		ldi r30,lo8(1)
 785 0178 F0E0      		ldi r31,0
 786 017a 00C0      		rjmp .L123
 787               	.L57:
 788               	.LBE181:
 556:BootloaderCDC.c **** 		}
 557:BootloaderCDC.c **** 		else if (Command == 'F')
 789               		.loc 1 557 0
 790 017c 8634      		cpi r24,lo8(70)
 791 017e 01F4      		brne .L58
 792               	.LBB182:
 558:BootloaderCDC.c **** 		{
 559:BootloaderCDC.c **** 			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 793               		.loc 1 559 0
 794 0180 E0E0      		ldi r30,0
 795 0182 F0E0      		ldi r31,0
 796 0184 00C0      		rjmp .L123
 797               	.L58:
 798               	.LBE182:
 560:BootloaderCDC.c **** 		}
 561:BootloaderCDC.c **** 		else if (Command == 'N')
 799               		.loc 1 561 0
 800 0186 8E34      		cpi r24,lo8(78)
 801 0188 01F4      		brne .L59
 802               	.LBB183:
 562:BootloaderCDC.c **** 		{
 563:BootloaderCDC.c **** 			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 803               		.loc 1 563 0
 804 018a E3E0      		ldi r30,lo8(3)
 805 018c F0E0      		ldi r31,0
 806 018e 00C0      		rjmp .L123
 807               	.L59:
 808               	.LBE183:
 564:BootloaderCDC.c **** 		}
 565:BootloaderCDC.c **** 		else if (Command == 'Q')
 809               		.loc 1 565 0
 810 0190 8135      		cpi r24,lo8(81)
 811 0192 01F4      		brne .L60
 812               	.LBB184:
 566:BootloaderCDC.c **** 		{
 567:BootloaderCDC.c **** 			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 813               		.loc 1 567 0
 814 0194 E2E0      		ldi r30,lo8(2)
 815 0196 F0E0      		ldi r31,0
 816               	.L123:
 817 0198 89E0      		ldi r24,lo8(9)
 818               	.LVL59:
 819               	/* #APP */
 820               	 ;  567 "BootloaderCDC.c" 1
 821 019a 8093 5700 		sts 87, r24
 822 019e 8491      		lpm r24, Z
 823               		
 824               	 ;  0 "" 2
 825               	.LVL60:
 826               	/* #NOAPP */
 827 01a0 00C0      		rjmp .L120
 828               	.LVL61:
 829               	.L60:
 830               	.LBE184:
 568:BootloaderCDC.c **** 		}
 569:BootloaderCDC.c **** 		else if (Command == 'C')
 831               		.loc 1 569 0
 832 01a2 8334      		cpi r24,lo8(67)
 833 01a4 01F4      		brne .L61
 570:BootloaderCDC.c **** 		{
 571:BootloaderCDC.c **** 			/* Write the high byte to the current flash page */
 572:BootloaderCDC.c **** 			boot_page_fill(CurrAddress, FetchNextCommandByte());
 834               		.loc 1 572 0
 835 01a6 C091 0000 		lds r28,CurrAddress
 836 01aa D091 0000 		lds r29,CurrAddress+1
 837 01ae 0E94 0000 		call FetchNextCommandByte
 838               	.LVL62:
 839 01b2 90E0      		ldi r25,0
 840 01b4 21E0      		ldi r18,lo8(1)
 841 01b6 FE01      		movw r30,r28
 842               	/* #APP */
 843               	 ;  572 "BootloaderCDC.c" 1
 844 01b8 0C01      		movw  r0, r24
 845 01ba 2093 5700 		sts 87, r18
 846 01be E895      		spm
 847 01c0 1124      		clr  r1
 848               		
 849               	 ;  0 "" 2
 850               	/* #NOAPP */
 851 01c2 00C0      		rjmp .L121
 852               	.LVL63:
 853               	.L61:
 573:BootloaderCDC.c **** 
 574:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 575:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 576:BootloaderCDC.c **** 		}
 577:BootloaderCDC.c **** 		else if (Command == 'c')
 854               		.loc 1 577 0
 855 01c4 8336      		cpi r24,lo8(99)
 856 01c6 01F4      		brne .L62
 578:BootloaderCDC.c **** 		{
 579:BootloaderCDC.c **** 			/* Write the low byte to the current flash page */
 580:BootloaderCDC.c **** 			boot_page_fill(CurrAddress | 1, FetchNextCommandByte());
 857               		.loc 1 580 0
 858 01c8 C091 0000 		lds r28,CurrAddress
 859 01cc D091 0000 		lds r29,CurrAddress+1
 860 01d0 C160      		ori r28,1
 861 01d2 0E94 0000 		call FetchNextCommandByte
 862               	.LVL64:
 863 01d6 90E0      		ldi r25,0
 864 01d8 21E0      		ldi r18,lo8(1)
 865 01da FE01      		movw r30,r28
 866               	/* #APP */
 867               	 ;  580 "BootloaderCDC.c" 1
 868 01dc 0C01      		movw  r0, r24
 869 01de 2093 5700 		sts 87, r18
 870 01e2 E895      		spm
 871 01e4 1124      		clr  r1
 872               		
 873               	 ;  0 "" 2
 874               	/* #NOAPP */
 875 01e6 00C0      		rjmp .L124
 876               	.LVL65:
 877               	.L62:
 581:BootloaderCDC.c **** 
 582:BootloaderCDC.c **** 			/* Increment the address */
 583:BootloaderCDC.c **** 			CurrAddress += 2;
 584:BootloaderCDC.c **** 
 585:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 586:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 587:BootloaderCDC.c **** 		}
 588:BootloaderCDC.c **** 		else if (Command == 'm')
 878               		.loc 1 588 0
 879 01e8 8D36      		cpi r24,lo8(109)
 880 01ea 01F4      		brne .L63
 589:BootloaderCDC.c **** 		{
 590:BootloaderCDC.c **** 			/* Commit the flash page to memory */
 591:BootloaderCDC.c **** 			boot_page_write(CurrAddress);
 881               		.loc 1 591 0
 882 01ec E091 0000 		lds r30,CurrAddress
 883 01f0 F091 0000 		lds r31,CurrAddress+1
 884 01f4 85E0      		ldi r24,lo8(5)
 885               	.LVL66:
 886               	/* #APP */
 887               	 ;  591 "BootloaderCDC.c" 1
 888 01f6 8093 5700 		sts 87, r24
 889 01fa E895      		spm
 890               		
 891               	 ;  0 "" 2
 892               	/* #NOAPP */
 893               	.L64:
 592:BootloaderCDC.c **** 
 593:BootloaderCDC.c **** 			/* Wait until write operation has completed */
 594:BootloaderCDC.c **** 			boot_spm_busy_wait();
 894               		.loc 1 594 0 discriminator 1
 895 01fc 07B6      		in __tmp_reg__,0x37
 896 01fe 00FC      		sbrc __tmp_reg__,0
 897 0200 00C0      		rjmp .L64
 898 0202 00C0      		rjmp .L121
 899               	.LVL67:
 900               	.L63:
 595:BootloaderCDC.c **** 
 596:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 597:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 598:BootloaderCDC.c **** 		}
 599:BootloaderCDC.c **** 		else if ((Command == 'B') || (Command == 'g'))
 901               		.loc 1 599 0
 902 0204 8234      		cpi r24,lo8(66)
 903 0206 01F0      		breq .L65
 904               		.loc 1 599 0 is_stmt 0 discriminator 1
 905 0208 8736      		cpi r24,lo8(103)
 906 020a 01F0      		breq .+2
 907 020c 00C0      		rjmp .L66
 908               	.L65:
 909               	.LVL68:
 910               	.LBB185:
 911               	.LBB186:
 296:BootloaderCDC.c **** 	BlockSize |=  FetchNextCommandByte();
 912               		.loc 1 296 0 is_stmt 1
 913 020e 0E94 0000 		call FetchNextCommandByte
 914               	.LVL69:
 915 0212 082F      		mov r16,r24
 916               	.LVL70:
 297:BootloaderCDC.c **** 
 917               		.loc 1 297 0
 918 0214 0E94 0000 		call FetchNextCommandByte
 919               	.LVL71:
 920 0218 D82F      		mov r29,r24
 921               	.LVL72:
 299:BootloaderCDC.c **** 
 922               		.loc 1 299 0
 923 021a 0E94 0000 		call FetchNextCommandByte
 924               	.LVL73:
 925 021e 182F      		mov r17,r24
 926               	.LVL74:
 301:BootloaderCDC.c **** 	{
 927               		.loc 1 301 0
 928 0220 8BEB      		ldi r24,lo8(-69)
 929 0222 810F      		add r24,r17
 930 0224 8230      		cpi r24,lo8(2)
 931 0226 00F0      		brlo .L67
 932               	.LVL75:
 933               	.L86:
 304:BootloaderCDC.c **** 
 934               		.loc 1 304 0
 935 0228 8FE3      		ldi r24,lo8(63)
 936 022a 00C0      		rjmp .L120
 937               	.LVL76:
 938               	.L67:
 296:BootloaderCDC.c **** 	BlockSize |=  FetchNextCommandByte();
 939               		.loc 1 296 0
 940 022c 2D2F      		mov r18,r29
 941 022e 30E0      		ldi r19,0
 297:BootloaderCDC.c **** 
 942               		.loc 1 297 0
 943 0230 302B      		or r19,r16
 310:BootloaderCDC.c **** 	{
 944               		.loc 1 310 0
 945 0232 C736      		cpi r28,lo8(103)
 946 0234 01F0      		breq .+2
 947 0236 00C0      		rjmp .L68
 948               	.LVL77:
 313:BootloaderCDC.c **** 
 949               		.loc 1 313 0
 950 0238 81E1      		ldi r24,lo8(17)
 951               	/* #APP */
 952               	 ;  313 "BootloaderCDC.c" 1
 953 023a 8093 5700 		sts 87, r24
 954 023e E895      		spm
 955               		
 956               	 ;  0 "" 2
 957               	/* #NOAPP */
 958 0240 E901      		movw r28,r18
 959               	.LVL78:
 293:BootloaderCDC.c **** 	uint8_t  LowByte  = 0;
 960               		.loc 1 293 0
 961 0242 00E0      		ldi r16,0
 962               	.LVL79:
 330:BootloaderCDC.c **** 			}
 963               		.loc 1 330 0
 964 0244 FF24      		clr r15
 965 0246 F394      		inc r15
 966               	.LVL80:
 967               	.L69:
 315:BootloaderCDC.c **** 		{
 968               		.loc 1 315 0
 969 0248 2097      		sbiw r28,0
 970 024a 01F4      		brne .+2
 971 024c 00C0      		rjmp .L42
 317:BootloaderCDC.c **** 			{
 972               		.loc 1 317 0
 973 024e 1634      		cpi r17,lo8(70)
 974 0250 01F4      		brne .L70
 975               	.LVL81:
 976               	.LBB187:
 323:BootloaderCDC.c **** 				#endif
 977               		.loc 1 323 0
 978 0252 E091 0000 		lds r30,CurrAddress
 979 0256 F091 0000 		lds r31,CurrAddress+1
 980 025a E02B      		or r30,r16
 981               	/* #APP */
 982               	 ;  323 "BootloaderCDC.c" 1
 983 025c 8491      		lpm r24, Z
 984               		
 985               	 ;  0 "" 2
 986               	.LVL82:
 987               	/* #NOAPP */
 988               	.LBE187:
 989 025e 0E94 0000 		call WriteNextResponseByte
 990               	.LVL83:
 327:BootloaderCDC.c **** 				  CurrAddress += 2;
 991               		.loc 1 327 0
 992 0262 0023      		tst r16
 993 0264 01F0      		breq .L71
 328:BootloaderCDC.c **** 
 994               		.loc 1 328 0
 995 0266 8091 0000 		lds r24,CurrAddress
 996 026a 9091 0000 		lds r25,CurrAddress+1
 997 026e A091 0000 		lds r26,CurrAddress+2
 998 0272 B091 0000 		lds r27,CurrAddress+3
 999 0276 0296      		adiw r24,2
 1000 0278 A11D      		adc r26,__zero_reg__
 1001 027a B11D      		adc r27,__zero_reg__
 1002 027c 8093 0000 		sts CurrAddress,r24
 1003 0280 9093 0000 		sts CurrAddress+1,r25
 1004 0284 A093 0000 		sts CurrAddress+2,r26
 1005 0288 B093 0000 		sts CurrAddress+3,r27
 1006               	.L71:
 330:BootloaderCDC.c **** 			}
 1007               		.loc 1 330 0
 1008 028c 0F25      		eor r16,r15
 1009               	.LVL84:
 1010 028e 00C0      		rjmp .L72
 1011               	.L70:
 335:BootloaderCDC.c **** 
 1012               		.loc 1 335 0
 1013 0290 8091 0000 		lds r24,CurrAddress
 1014 0294 9091 0000 		lds r25,CurrAddress+1
 1015 0298 A091 0000 		lds r26,CurrAddress+2
 1016 029c B091 0000 		lds r27,CurrAddress+3
 1017 02a0 B695      		lsr r27
 1018 02a2 A795      		ror r26
 1019 02a4 9795      		ror r25
 1020 02a6 8795      		ror r24
 1021 02a8 0E94 0000 		call eeprom_read_byte
 1022               	.LVL85:
 1023 02ac 0E94 0000 		call WriteNextResponseByte
 1024               	.LVL86:
 338:BootloaderCDC.c **** 			}
 1025               		.loc 1 338 0
 1026 02b0 8091 0000 		lds r24,CurrAddress
 1027 02b4 9091 0000 		lds r25,CurrAddress+1
 1028 02b8 A091 0000 		lds r26,CurrAddress+2
 1029 02bc B091 0000 		lds r27,CurrAddress+3
 1030 02c0 0296      		adiw r24,2
 1031 02c2 A11D      		adc r26,__zero_reg__
 1032 02c4 B11D      		adc r27,__zero_reg__
 1033 02c6 8093 0000 		sts CurrAddress,r24
 1034 02ca 9093 0000 		sts CurrAddress+1,r25
 1035 02ce A093 0000 		sts CurrAddress+2,r26
 1036 02d2 B093 0000 		sts CurrAddress+3,r27
 1037               	.L72:
 1038 02d6 2197      		sbiw r28,1
 1039               	.LVL87:
 1040 02d8 00C0      		rjmp .L69
 1041               	.LVL88:
 1042               	.L68:
 1043               	.LBB188:
 344:BootloaderCDC.c **** 
 1044               		.loc 1 344 0
 1045 02da C090 0000 		lds r12,CurrAddress
 1046 02de D090 0000 		lds r13,CurrAddress+1
 1047 02e2 E090 0000 		lds r14,CurrAddress+2
 1048 02e6 F090 0000 		lds r15,CurrAddress+3
 346:BootloaderCDC.c **** 		{
 1049               		.loc 1 346 0
 1050 02ea 1634      		cpi r17,lo8(70)
 1051 02ec 01F4      		brne .L75
 348:BootloaderCDC.c **** 			boot_spm_busy_wait();
 1052               		.loc 1 348 0
 1053 02ee 83E0      		ldi r24,lo8(3)
 1054 02f0 F601      		movw r30,r12
 1055               	/* #APP */
 1056               	 ;  348 "BootloaderCDC.c" 1
 1057 02f2 8093 5700 		sts 87, r24
 1058 02f6 E895      		spm
 1059               		
 1060               	 ;  0 "" 2
 1061               	/* #NOAPP */
 1062               	.L76:
 349:BootloaderCDC.c **** 		}
 1063               		.loc 1 349 0
 1064 02f8 07B6      		in __tmp_reg__,0x37
 1065 02fa 00FC      		sbrc __tmp_reg__,0
 1066 02fc 00C0      		rjmp .L76
 1067               	.L75:
 365:BootloaderCDC.c **** 				}
 1068               		.loc 1 365 0
 1069 02fe E901      		movw r28,r18
 1070               	.LVL89:
 1071 0300 B12C      		mov r11,__zero_reg__
 1072 0302 00E0      		ldi r16,0
 1073               	.LVL90:
 371:BootloaderCDC.c **** 				}
 1074               		.loc 1 371 0
 1075 0304 AA24      		clr r10
 1076 0306 A394      		inc r10
 1077               	.LVL91:
 1078               	.L77:
 352:BootloaderCDC.c **** 		{
 1079               		.loc 1 352 0
 1080 0308 2097      		sbiw r28,0
 1081 030a 01F4      		brne .+2
 1082 030c 00C0      		rjmp .L125
 354:BootloaderCDC.c **** 			{
 1083               		.loc 1 354 0
 1084 030e 1634      		cpi r17,lo8(70)
 1085 0310 01F4      		brne .L78
 357:BootloaderCDC.c **** 				{
 1086               		.loc 1 357 0
 1087 0312 0023      		tst r16
 1088 0314 01F0      		breq .L79
 360:BootloaderCDC.c **** 
 1089               		.loc 1 360 0
 1090 0316 8090 0000 		lds r8,CurrAddress
 1091 031a 9090 0000 		lds r9,CurrAddress+1
 1092 031e 0E94 0000 		call FetchNextCommandByte
 1093               	.LVL92:
 1094 0322 2B2D      		mov r18,r11
 1095 0324 30E0      		ldi r19,0
 1096 0326 A901      		movw r20,r18
 1097 0328 582B      		or r21,r24
 1098 032a F401      		movw r30,r8
 1099               	/* #APP */
 1100               	 ;  360 "BootloaderCDC.c" 1
 1101 032c 0A01      		movw  r0, r20
 1102 032e A092 5700 		sts 87, r10
 1103 0332 E895      		spm
 1104 0334 1124      		clr  r1
 1105               		
 1106               	 ;  0 "" 2
 363:BootloaderCDC.c **** 
 1107               		.loc 1 363 0
 1108               	/* #NOAPP */
 1109 0336 8091 0000 		lds r24,CurrAddress
 1110 033a 9091 0000 		lds r25,CurrAddress+1
 1111 033e A091 0000 		lds r26,CurrAddress+2
 1112 0342 B091 0000 		lds r27,CurrAddress+3
 1113 0346 0296      		adiw r24,2
 1114 0348 A11D      		adc r26,__zero_reg__
 1115 034a B11D      		adc r27,__zero_reg__
 1116 034c 8093 0000 		sts CurrAddress,r24
 1117 0350 9093 0000 		sts CurrAddress+1,r25
 1118 0354 A093 0000 		sts CurrAddress+2,r26
 1119 0358 B093 0000 		sts CurrAddress+3,r27
 1120               	.LVL93:
 365:BootloaderCDC.c **** 				}
 1121               		.loc 1 365 0
 1122 035c 00E0      		ldi r16,0
 1123 035e 00C0      		rjmp .L80
 1124               	.LVL94:
 1125               	.L79:
 369:BootloaderCDC.c **** 
 1126               		.loc 1 369 0
 1127 0360 0E94 0000 		call FetchNextCommandByte
 1128               	.LVL95:
 1129 0364 B82E      		mov r11,r24
 1130               	.LVL96:
 371:BootloaderCDC.c **** 				}
 1131               		.loc 1 371 0
 1132 0366 01E0      		ldi r16,lo8(1)
 1133 0368 00C0      		rjmp .L80
 1134               	.LVL97:
 1135               	.L78:
 377:BootloaderCDC.c **** 
 1136               		.loc 1 377 0
 1137 036a 0E94 0000 		call FetchNextCommandByte
 1138               	.LVL98:
 1139 036e 682F      		mov r22,r24
 1140 0370 8091 0000 		lds r24,CurrAddress
 1141 0374 9091 0000 		lds r25,CurrAddress+1
 1142 0378 A091 0000 		lds r26,CurrAddress+2
 1143 037c B091 0000 		lds r27,CurrAddress+3
 1144 0380 B695      		lsr r27
 1145 0382 A795      		ror r26
 1146 0384 9795      		ror r25
 1147 0386 8795      		ror r24
 1148 0388 0E94 0000 		call eeprom_write_byte
 1149               	.LVL99:
 380:BootloaderCDC.c **** 			}
 1150               		.loc 1 380 0
 1151 038c 4091 0000 		lds r20,CurrAddress
 1152 0390 5091 0000 		lds r21,CurrAddress+1
 1153 0394 6091 0000 		lds r22,CurrAddress+2
 1154 0398 7091 0000 		lds r23,CurrAddress+3
 1155 039c 4E5F      		subi r20,-2
 1156 039e 5F4F      		sbci r21,-1
 1157 03a0 6F4F      		sbci r22,-1
 1158 03a2 7F4F      		sbci r23,-1
 1159 03a4 4093 0000 		sts CurrAddress,r20
 1160 03a8 5093 0000 		sts CurrAddress+1,r21
 1161 03ac 6093 0000 		sts CurrAddress+2,r22
 1162 03b0 7093 0000 		sts CurrAddress+3,r23
 1163               	.LVL100:
 1164               	.L80:
 1165 03b4 2197      		sbiw r28,1
 1166               	.LVL101:
 1167 03b6 00C0      		rjmp .L77
 1168               	.LVL102:
 1169               	.L125:
 385:BootloaderCDC.c **** 		{
 1170               		.loc 1 385 0
 1171 03b8 1634      		cpi r17,lo8(70)
 1172 03ba 01F0      		breq .+2
 1173 03bc 00C0      		rjmp .L121
 388:BootloaderCDC.c **** 
 1174               		.loc 1 388 0
 1175 03be 85E0      		ldi r24,lo8(5)
 1176 03c0 F601      		movw r30,r12
 1177               	/* #APP */
 1178               	 ;  388 "BootloaderCDC.c" 1
 1179 03c2 8093 5700 		sts 87, r24
 1180 03c6 E895      		spm
 1181               		
 1182               	 ;  0 "" 2
 1183               	/* #NOAPP */
 1184               	.L82:
 391:BootloaderCDC.c **** 		}
 1185               		.loc 1 391 0
 1186 03c8 07B6      		in __tmp_reg__,0x37
 1187 03ca 00FC      		sbrc __tmp_reg__,0
 1188 03cc 00C0      		rjmp .L82
 1189 03ce 00C0      		rjmp .L121
 1190               	.LVL103:
 1191               	.L66:
 1192               	.LBE188:
 1193               	.LBE186:
 1194               	.LBE185:
 600:BootloaderCDC.c **** 		{
 601:BootloaderCDC.c **** 			/* Delegate the block write/read to a separate function for clarity */
 602:BootloaderCDC.c **** 			ReadWriteMemoryBlock(Command);
 603:BootloaderCDC.c **** 		}
 604:BootloaderCDC.c **** 		else if (Command == 'R')
 1195               		.loc 1 604 0
 1196 03d0 8235      		cpi r24,lo8(82)
 1197 03d2 01F4      		brne .L83
 1198               	.LBB189:
 1199               	.LBB190:
 605:BootloaderCDC.c **** 		{
 606:BootloaderCDC.c **** 			#if (FLASHEND > 0xFFFF)
 607:BootloaderCDC.c **** 			uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 608:BootloaderCDC.c **** 			#else
 609:BootloaderCDC.c **** 			uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1200               		.loc 1 609 0
 1201 03d4 E091 0000 		lds r30,CurrAddress
 1202 03d8 F091 0000 		lds r31,CurrAddress+1
 1203               	.LVL104:
 1204               	/* #APP */
 1205               	 ;  609 "BootloaderCDC.c" 1
 1206 03dc C591      		lpm r28, Z+
 1207 03de D491      		lpm r29, Z
 1208               		
 1209               	 ;  0 "" 2
 1210               	.LVL105:
 1211               	/* #NOAPP */
 1212               	.LBE190:
 610:BootloaderCDC.c **** 			#endif
 611:BootloaderCDC.c **** 
 612:BootloaderCDC.c **** 			WriteNextResponseByte(ProgramWord >> 8);
 1213               		.loc 1 612 0
 1214 03e0 8D2F      		mov r24,r29
 1215               	.LVL106:
 1216 03e2 0E94 0000 		call WriteNextResponseByte
 1217               	.LVL107:
 613:BootloaderCDC.c **** 			WriteNextResponseByte(ProgramWord & 0xFF);
 1218               		.loc 1 613 0
 1219 03e6 8C2F      		mov r24,r28
 1220 03e8 00C0      		rjmp .L120
 1221               	.LVL108:
 1222               	.L83:
 1223               	.LBE189:
 614:BootloaderCDC.c **** 		}
 615:BootloaderCDC.c **** 		else if (Command == 'D')
 1224               		.loc 1 615 0
 1225 03ea 8434      		cpi r24,lo8(68)
 1226 03ec 01F4      		brne .L84
 616:BootloaderCDC.c **** 		{
 617:BootloaderCDC.c **** 			/* Read the byte from the endpoint and write it to the EEPROM */
 618:BootloaderCDC.c **** 			eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1227               		.loc 1 618 0
 1228 03ee 0E94 0000 		call FetchNextCommandByte
 1229               	.LVL109:
 1230 03f2 682F      		mov r22,r24
 1231 03f4 8091 0000 		lds r24,CurrAddress
 1232 03f8 9091 0000 		lds r25,CurrAddress+1
 1233 03fc A091 0000 		lds r26,CurrAddress+2
 1234 0400 B091 0000 		lds r27,CurrAddress+3
 1235 0404 B695      		lsr r27
 1236 0406 A795      		ror r26
 1237 0408 9795      		ror r25
 1238 040a 8795      		ror r24
 1239 040c 0E94 0000 		call eeprom_write_byte
 1240               	.LVL110:
 1241               	.L124:
 619:BootloaderCDC.c **** 
 620:BootloaderCDC.c **** 			/* Increment the address after use */
 621:BootloaderCDC.c **** 			CurrAddress += 2;
 1242               		.loc 1 621 0
 1243 0410 8091 0000 		lds r24,CurrAddress
 1244 0414 9091 0000 		lds r25,CurrAddress+1
 1245 0418 A091 0000 		lds r26,CurrAddress+2
 1246 041c B091 0000 		lds r27,CurrAddress+3
 1247 0420 0296      		adiw r24,2
 1248 0422 A11D      		adc r26,__zero_reg__
 1249 0424 B11D      		adc r27,__zero_reg__
 1250 0426 00C0      		rjmp .L122
 1251               	.LVL111:
 1252               	.L84:
 622:BootloaderCDC.c **** 
 623:BootloaderCDC.c **** 			/* Send confirmation byte back to the host */
 624:BootloaderCDC.c **** 			WriteNextResponseByte('\r');
 625:BootloaderCDC.c **** 		}
 626:BootloaderCDC.c **** 		else if (Command == 'd')
 1253               		.loc 1 626 0
 1254 0428 8436      		cpi r24,lo8(100)
 1255 042a 01F4      		brne .L85
 627:BootloaderCDC.c **** 		{
 628:BootloaderCDC.c **** 			/* Read the EEPROM byte and write it to the endpoint */
 629:BootloaderCDC.c **** 			WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1256               		.loc 1 629 0
 1257 042c 8091 0000 		lds r24,CurrAddress
 1258 0430 9091 0000 		lds r25,CurrAddress+1
 1259 0434 A091 0000 		lds r26,CurrAddress+2
 1260 0438 B091 0000 		lds r27,CurrAddress+3
 1261               	.LVL112:
 1262 043c B695      		lsr r27
 1263 043e A795      		ror r26
 1264 0440 9795      		ror r25
 1265 0442 8795      		ror r24
 1266 0444 0E94 0000 		call eeprom_read_byte
 1267               	.LVL113:
 1268 0448 0E94 0000 		call WriteNextResponseByte
 1269               	.LVL114:
 630:BootloaderCDC.c **** 
 631:BootloaderCDC.c **** 			/* Increment the address after use */
 632:BootloaderCDC.c **** 			CurrAddress += 2;
 1270               		.loc 1 632 0
 1271 044c 8091 0000 		lds r24,CurrAddress
 1272 0450 9091 0000 		lds r25,CurrAddress+1
 1273 0454 A091 0000 		lds r26,CurrAddress+2
 1274 0458 B091 0000 		lds r27,CurrAddress+3
 1275 045c 0296      		adiw r24,2
 1276 045e A11D      		adc r26,__zero_reg__
 1277 0460 B11D      		adc r27,__zero_reg__
 1278 0462 8093 0000 		sts CurrAddress,r24
 1279 0466 9093 0000 		sts CurrAddress+1,r25
 1280 046a A093 0000 		sts CurrAddress+2,r26
 1281 046e B093 0000 		sts CurrAddress+3,r27
 1282 0472 00C0      		rjmp .L42
 1283               	.LVL115:
 1284               	.L85:
 633:BootloaderCDC.c **** 		}
 634:BootloaderCDC.c **** 		else if (Command == 27)
 1285               		.loc 1 634 0
 1286 0474 8B31      		cpi r24,lo8(27)
 1287 0476 01F0      		breq .+2
 1288 0478 00C0      		rjmp .L86
 1289               	.LVL116:
 1290               	.L42:
 1291               	.LBB191:
 1292               	.LBB192:
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 1293               		.loc 2 351 0
 1294 047a 83E0      		ldi r24,lo8(3)
 1295 047c 8093 E900 		sts 233,r24
 1296               	.LBE192:
 1297               	.LBE191:
 1298               	.LBB193:
 1299               	.LBB194:
 410:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 1300               		.loc 2 410 0
 1301 0480 9091 E800 		lds r25,232
 1302               	.LVL117:
 1303               	.LBE194:
 1304               	.LBE193:
 1305               	.LBB195:
 1306               	.LBB196:
 506:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 1307               		.loc 2 506 0
 1308 0484 8091 E800 		lds r24,232
 1309 0488 8E77      		andi r24,lo8(126)
 1310 048a 8093 E800 		sts 232,r24
 1311               	.LBE196:
 1312               	.LBE195:
 635:BootloaderCDC.c **** 		{
 636:BootloaderCDC.c **** 			/* Escape is sync, ignore */
 637:BootloaderCDC.c **** 		}
 638:BootloaderCDC.c **** 		else
 639:BootloaderCDC.c **** 		{
 640:BootloaderCDC.c **** 			/* Unknown command, return fail code */
 641:BootloaderCDC.c **** 			WriteNextResponseByte('?');
 642:BootloaderCDC.c **** 		}
 643:BootloaderCDC.c **** 
 644:BootloaderCDC.c **** 		/* Select the IN endpoint */
 645:BootloaderCDC.c **** 		Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 646:BootloaderCDC.c **** 
 647:BootloaderCDC.c **** 		/* Remember if the endpoint is completely full before clearing it */
 648:BootloaderCDC.c **** 		bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 649:BootloaderCDC.c **** 
 650:BootloaderCDC.c **** 		/* Send the endpoint data to the host */
 651:BootloaderCDC.c **** 		Endpoint_ClearIN();
 652:BootloaderCDC.c **** 
 653:BootloaderCDC.c **** 		/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to sig
 654:BootloaderCDC.c **** 		if (IsEndpointFull)
 1313               		.loc 1 654 0
 1314 048e 95FD      		sbrc r25,5
 1315 0490 00C0      		rjmp .L91
 1316               	.L87:
 1317               	.LBB197:
 1318               	.LBB198:
 457:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 1319               		.loc 2 457 0
 1320 0492 8091 E800 		lds r24,232
 1321               	.LBE198:
 1322               	.LBE197:
 655:BootloaderCDC.c **** 		{
 656:BootloaderCDC.c **** 			while (!(Endpoint_IsINReady()))
 1323               		.loc 1 656 0
 1324 0496 80FD      		sbrc r24,0
 1325 0498 00C0      		rjmp .L126
 657:BootloaderCDC.c **** 			{
 658:BootloaderCDC.c **** 				if (USB_DeviceState == DEVICE_STATE_Unattached)
 1326               		.loc 1 658 0
 1327 049a 8EB3      		in r24,0x1e
 1328 049c 8111      		cpse r24,__zero_reg__
 1329 049e 00C0      		rjmp .L87
 1330 04a0 00C0      		rjmp .L34
 1331               	.L126:
 1332               	.LBB199:
 1333               	.LBB200:
 506:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 1334               		.loc 2 506 0
 1335 04a2 8091 E800 		lds r24,232
 1336 04a6 8E77      		andi r24,lo8(126)
 1337 04a8 8093 E800 		sts 232,r24
 1338 04ac 00C0      		rjmp .L91
 1339               	.L92:
 1340               	.LBE200:
 1341               	.LBE199:
 659:BootloaderCDC.c **** 				  return;
 660:BootloaderCDC.c **** 			}
 661:BootloaderCDC.c **** 
 662:BootloaderCDC.c **** 			Endpoint_ClearIN();
 663:BootloaderCDC.c **** 		}
 664:BootloaderCDC.c **** 
 665:BootloaderCDC.c **** 		/* Wait until the data has been sent to the host */
 666:BootloaderCDC.c **** 		while (!(Endpoint_IsINReady()))
 667:BootloaderCDC.c **** 		{
 668:BootloaderCDC.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 1342               		.loc 1 668 0
 1343 04ae 8EB3      		in r24,0x1e
 1344 04b0 8823      		tst r24
 1345 04b2 01F0      		breq .L34
 1346               	.L91:
 1347               	.LBB201:
 1348               	.LBB202:
 457:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 1349               		.loc 2 457 0
 1350 04b4 8091 E800 		lds r24,232
 1351               	.LBE202:
 1352               	.LBE201:
 666:BootloaderCDC.c **** 		{
 1353               		.loc 1 666 0
 1354 04b8 80FF      		sbrs r24,0
 1355 04ba 00C0      		rjmp .L92
 1356               	.LVL118:
 1357               	.LBB203:
 1358               	.LBB204:
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 1359               		.loc 2 351 0
 1360 04bc 84E0      		ldi r24,lo8(4)
 1361 04be 8093 E900 		sts 233,r24
 1362               	.LBE204:
 1363               	.LBE203:
 1364               	.LBB205:
 1365               	.LBB206:
 521:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 1366               		.loc 2 521 0
 1367 04c2 8091 E800 		lds r24,232
 1368 04c6 8B77      		andi r24,lo8(123)
 1369 04c8 8093 E800 		sts 232,r24
 1370               	.LVL119:
 1371               	.L34:
 1372               	/* epilogue start */
 1373               	.LBE206:
 1374               	.LBE205:
 1375               	.LBE177:
 669:BootloaderCDC.c **** 			  return;
 670:BootloaderCDC.c **** 		}
 671:BootloaderCDC.c **** 
 672:BootloaderCDC.c **** 		/* Select the OUT endpoint */
 673:BootloaderCDC.c **** 		Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 674:BootloaderCDC.c **** 
 675:BootloaderCDC.c **** 		/* Acknowledge the command from the host */
 676:BootloaderCDC.c **** 		Endpoint_ClearOUT();
 677:BootloaderCDC.c **** 	}
 678:BootloaderCDC.c **** }
 1376               		.loc 1 678 0
 1377 04cc DF91      		pop r29
 1378 04ce CF91      		pop r28
 1379 04d0 1F91      		pop r17
 1380 04d2 0F91      		pop r16
 1381 04d4 FF90      		pop r15
 1382 04d6 EF90      		pop r14
 1383 04d8 DF90      		pop r13
 1384 04da CF90      		pop r12
 1385 04dc BF90      		pop r11
 1386 04de AF90      		pop r10
 1387 04e0 9F90      		pop r9
 1388 04e2 8F90      		pop r8
 1389 04e4 0895      		ret
 1390               		.cfi_endproc
 1391               	.LFE91:
 1393               		.section	.text.startup.main,"ax",@progbits
 1394               	.global	main
 1396               	main:
 1397               	.LFB84:
 114:BootloaderCDC.c ****   /* Adafruit Mods - unless they pressed the button, get out of the bootloader and into userland */
 1398               		.loc 1 114 0
 1399               		.cfi_startproc
 1400               	/* prologue: function */
 1401               	/* frame size = 0 */
 1402               	/* stack size = 0 */
 1403               	.L__stack_usage = 0
 116:BootloaderCDC.c ****   MCUSR = 0;
 1404               		.loc 1 116 0
 1405 0000 94B7      		in r25,0x34
 1406               	.LVL120:
 117:BootloaderCDC.c **** 
 1407               		.loc 1 117 0
 1408 0002 14BE      		out 0x34,__zero_reg__
 120:BootloaderCDC.c ****   WDTCSR = 0;
 1409               		.loc 1 120 0
 1410 0004 8091 6000 		lds r24,96
 1411 0008 8861      		ori r24,lo8(24)
 1412 000a 8093 6000 		sts 96,r24
 121:BootloaderCDC.c **** 
 1413               		.loc 1 121 0
 1414 000e 1092 6000 		sts 96,__zero_reg__
 137:BootloaderCDC.c **** 
 1415               		.loc 1 137 0
 1416 0012 1092 0000 		sts boottimeout,__zero_reg__
 139:BootloaderCDC.c ****     // if its a not an external reset...
 1417               		.loc 1 139 0
 1418 0016 91FD      		sbrc r25,1
 1419 0018 00C0      		rjmp .L128
 1420               	.LVL121:
 1421               	.LBB207:
 139:BootloaderCDC.c ****     // if its a not an external reset...
 1422               		.loc 1 139 0 is_stmt 0 discriminator 1
 1423 001a E0E0      		ldi r30,0
 1424 001c F0E0      		ldi r31,0
 1425               	/* #APP */
 1426               	 ;  139 "BootloaderCDC.c" 1
 1427 001e 8591      		lpm r24, Z+
 1428 0020 9491      		lpm r25, Z
 1429               		
 1430               	 ;  0 "" 2
 1431               	.LVL122:
 1432               	/* #NOAPP */
 1433               	.LBE207:
 1434 0022 0196      		adiw r24,1
 1435 0024 01F0      		breq .L128
 141:BootloaderCDC.c ****   }
 1436               		.loc 1 141 0 is_stmt 1
 1437 0026 E091 0000 		lds r30,app_start
 1438 002a F091 0000 		lds r31,app_start+1
 1439 002e 0995      		icall
 1440               	.LVL123:
 1441               	.L128:
 147:BootloaderCDC.c **** 
 1442               		.loc 1 147 0
 1443 0030 0E94 0000 		call SetupHardware
 1444               	.LVL124:
 151:BootloaderCDC.c **** 	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
 1445               		.loc 1 151 0
 1446 0034 6E9A      		sbi 0xd,6
 152:BootloaderCDC.c **** 
 1447               		.loc 1 152 0
 1448 0036 769A      		sbi 0xe,6
 1449               	.LVL125:
 161:BootloaderCDC.c **** 
 1450               		.loc 1 161 0
 1451               	/* #APP */
 1452               	 ;  161 "BootloaderCDC.c" 1
 1453 0038 7894      		sei
 1454               	 ;  0 "" 2
 157:BootloaderCDC.c **** 	// end adafruit mods
 1455               		.loc 1 157 0
 1456               	/* #NOAPP */
 1457 003a 11E0      		ldi r17,lo8(1)
 156:BootloaderCDC.c **** 	int8_t pulsedirection = 1;
 1458               		.loc 1 156 0
 1459 003c C0E0      		ldi r28,0
 155:BootloaderCDC.c **** 	uint8_t brightness = 0; // for the LED pulsing
 1460               		.loc 1 155 0
 1461 003e D0E0      		ldi r29,0
 1462               	.LBB208:
 196:BootloaderCDC.c **** 		    // jump to code
 1463               		.loc 1 196 0
 1464 0040 E12C      		mov r14,__zero_reg__
 1465 0042 F12C      		mov r15,__zero_reg__
 1466               	.LVL126:
 1467               	.L129:
 1468               	.LBE208:
 163:BootloaderCDC.c **** 	{
 1469               		.loc 1 163 0
 1470 0044 8091 0000 		lds r24,RunBootloader
 1471 0048 8823      		tst r24
 1472 004a 01F0      		breq .L146
 165:BootloaderCDC.c **** 		USB_USBTask();
 1473               		.loc 1 165 0
 1474 004c 0E94 0000 		call CDC_Task
 1475               	.LVL127:
 166:BootloaderCDC.c **** 		
 1476               		.loc 1 166 0
 1477 0050 0E94 0000 		call USB_USBTask
 1478               	.LVL128:
 169:BootloaderCDC.c **** 		
 1479               		.loc 1 169 0
 1480 0054 DF5F      		subi r29,lo8(-(1))
 1481               	.LVL129:
 172:BootloaderCDC.c **** 		  brightness += pulsedirection;
 1482               		.loc 1 172 0
 1483 0056 01F4      		brne .L130
 173:BootloaderCDC.c **** 		  BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
 1484               		.loc 1 173 0
 1485 0058 C10F      		add r28,r17
 1486               	.LVL130:
 174:BootloaderCDC.c **** 		}
 1487               		.loc 1 174 0
 1488 005a 769A      		sbi 0xe,6
 1489               	.L130:
 178:BootloaderCDC.c **** 		  BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED);
 1490               		.loc 1 178 0
 1491 005c DC13      		cpse r29,r28
 1492 005e 00C0      		rjmp .L131
 179:BootloaderCDC.c **** 		}
 1493               		.loc 1 179 0
 1494 0060 7698      		cbi 0xe,6
 1495               	.L131:
 183:BootloaderCDC.c **** 		  pulsedirection = -1;
 1496               		.loc 1 183 0
 1497 0062 CF3F      		cpi r28,lo8(-1)
 1498 0064 01F0      		breq .L136
 186:BootloaderCDC.c **** 		  pulsedirection = 1;
 1499               		.loc 1 186 0
 1500 0066 C111      		cpse r28,__zero_reg__
 1501 0068 00C0      		rjmp .L132
 186:BootloaderCDC.c **** 		  pulsedirection = 1;
 1502               		.loc 1 186 0 is_stmt 0 discriminator 1
 1503 006a 1130      		cpi r17,lo8(1)
 1504 006c 01F0      		breq .L132
 1505               	.LVL131:
 190:BootloaderCDC.c **** 		} 
 1506               		.loc 1 190 0 is_stmt 1
 1507 006e 8091 0000 		lds r24,boottimeout
 1508 0072 8F5F      		subi r24,lo8(-(1))
 1509 0074 8093 0000 		sts boottimeout,r24
 187:BootloaderCDC.c **** 
 1510               		.loc 1 187 0
 1511 0078 11E0      		ldi r17,lo8(1)
 1512 007a 00C0      		rjmp .L132
 1513               	.LVL132:
 1514               	.L136:
 184:BootloaderCDC.c **** 		}
 1515               		.loc 1 184 0
 1516 007c 1FEF      		ldi r17,lo8(-1)
 1517               	.LVL133:
 1518               	.L132:
 194:BootloaderCDC.c **** 		  // check to see if we have any code loaded. if the first byte is blank, we shouldn't go
 1519               		.loc 1 194 0
 1520 007e 8091 0000 		lds r24,boottimeout
 1521 0082 8530      		cpi r24,lo8(5)
 1522 0084 00F0      		brlo .L129
 1523               	.LVL134:
 1524               	.LBB209:
 196:BootloaderCDC.c **** 		    // jump to code
 1525               		.loc 1 196 0
 1526 0086 F701      		movw r30,r14
 1527               	/* #APP */
 1528               	 ;  196 "BootloaderCDC.c" 1
 1529 0088 8591      		lpm r24, Z+
 1530 008a 9491      		lpm r25, Z
 1531               		
 1532               	 ;  0 "" 2
 1533               	.LVL135:
 1534               	/* #NOAPP */
 1535               	.LBE209:
 1536 008c 0196      		adiw r24,1
 1537 008e 01F0      		breq .L129
 198:BootloaderCDC.c **** 		  }
 1538               		.loc 1 198 0
 1539 0090 1092 0000 		sts RunBootloader,__zero_reg__
 1540 0094 00C0      		rjmp .L129
 1541               	.LVL136:
 1542               	.L146:
 1543               	.LBB210:
 1544               	.LBB211:
 1545               		.file 6 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  \brief USB low level USB controller definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  This file contains structures, function prototypes and macros related to the low level configur
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  USB controller, to start, stop and reset the USB library core.
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  */
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** /** \ingroup Group_USB
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  @defgroup Group_USBManagement USB Interface Management
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  *  @{
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h ****  */
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** #ifndef __USBCONTROLLER_H__
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** #define __USBCONTROLLER_H__
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include <avr/interrupt.h>
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include <stdbool.h>
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include "../../../Common/Common.h"
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include "../HighLevel/Events.h"
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include "../HighLevel/USBTask.h"
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#include "USBInterrupt.h"
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "Host.h"
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "OTG.h"
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "Pipe.h"
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "../HighLevel/HostStandardReq.h"
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "../HighLevel/PipeStream.h"
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "Device.h"
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "Endpoint.h"
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "../HighLevel/DeviceStandardReq.h"
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#include "../HighLevel/EndpointStream.h"
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if defined(__cplusplus)
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			extern "C" {
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 	/* Preprocessor Checks and Defines: */
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if !defined(F_CLOCK)
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#error F_CLOCK is not defined. You must define F_CLOCK to the frequency of the unprescaled input
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if (F_CLOCK == 8000000)
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#endif
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#elif (F_CLOCK == 16000000)
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#endif
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#if !defined(USB_PLL_PSC)
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#error No PLL prescale value available for chosen F_CPU value and AVR model.
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		#endif
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 	/* Public Interface - May be used in end-application: */
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		/* Macros: */
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  regulator should be enabled to regulate the data pin voltages to within the USB standard.
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 151:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 152:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Mask for a CONTROL type endpoint or pipe.
 153:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *
 154:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 155:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 156:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define EP_TYPE_CONTROL                    0x00
 157:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 158:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Mask for an ISOCHRONOUS type endpoint or pipe.
 159:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *
 160:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 161:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 162:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define EP_TYPE_ISOCHRONOUS                0x01
 163:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 164:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Mask for a BULK type endpoint or pipe.
 165:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *
 166:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 167:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 168:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define EP_TYPE_BULK                       0x02
 169:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 170:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Mask for an INTERRUPT type endpoint or pipe.
 171:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *
 172:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 173:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 174:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#define EP_TYPE_INTERRUPT                  0x03
 175:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 176:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 177:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 178:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 179:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 180:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *
 181:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 182:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 183:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 */
 184:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 185:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#endif
 186:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 187:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 		/* Inline Functions: */
 188:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 189:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				/** Returns boolean true if the VBUS line is currently high (i.e. the USB host is supplying pow
 190:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *  otherwise returns false.
 191:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *
 192:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 193:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				 */
 194:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 195:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void)
 196:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				{
 197:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 198:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				}
 199:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			#endif
 200:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 
 201:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 202:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 203:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 204:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			 */
 205:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 206:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			static inline void USB_Detach(void)
 207:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 			{
 208:../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
 1546               		.loc 6 208 0
 1547 0096 8091 E000 		lds r24,224
 1548 009a 8160      		ori r24,lo8(1)
 1549 009c 8093 E000 		sts 224,r24
 1550               	.LVL137:
 1551               	.LBE211:
 1552               	.LBE210:
 1553               	.LBB212:
 1554               	.LBB213:
 425:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 1555               		.loc 4 425 0
 1556 00a0 9CE0      		ldi r25,lo8(12)
 1557 00a2 88E1      		ldi r24,lo8(24)
 1558               	/* #APP */
 1559               	 ;  425 "/usr/lib/avr/include/avr/wdt.h" 1
 1560 00a4 0FB6      		in __tmp_reg__,__SREG__
 1561 00a6 F894      		cli
 1562 00a8 A895      		wdr
 1563 00aa 8093 6000 		sts 96, r24
 1564 00ae 0FBE      		out __SREG__,__tmp_reg__
 1565 00b0 9093 6000 		sts 96, r25
 1566               	 	
 1567               	 ;  0 "" 2
 1568               	/* #NOAPP */
 1569               	.L135:
 1570               	.LBE213:
 1571               	.LBE212:
 209:BootloaderCDC.c **** }
 1572               		.loc 1 209 0 discriminator 1
 1573 00b4 00C0      		rjmp .L135
 1574               		.cfi_endproc
 1575               	.LFE84:
 1577               	.global	app_start
 1578               		.section .bss
 1581               	app_start:
 1582 0000 0000      		.zero	2
 1583               	.global	boottimeout
 1586               	boottimeout:
 1587 0002 00        		.zero	1
 1588               	.global	RunBootloader
 1589               		.data
 1592               	RunBootloader:
 1593 0000 01        		.byte	1
 1594               		.comm	CurrAddress,4,1
 1595               	.global	LineEncoding
 1598               	LineEncoding:
 1599 0001 00        		.byte	0
 1600 0002 00        		.byte	0
 1601 0003 00        		.byte	0
 1602 0004 00        		.byte	0
 1603 0005 00        		.byte	0
 1604 0006 00        		.byte	0
 1605 0007 08        		.byte	8
 1606               		.text
 1607               	.Letext0:
 1608               		.file 7 "/usr/lib/avr/include/stdint.h"
 1609               		.file 8 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
 1610               		.file 9 "BootloaderCDC.h"
 1611               		.file 10 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
 1612               		.file 11 "../../LUFA/Drivers/USB/HighLevel/USBTask.h"
 1613               		.file 12 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/EndpointStream.h"
 1614               		.file 13 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 BootloaderCDC.c
     /tmp/cc2cY991.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2cY991.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2cY991.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2cY991.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2cY991.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2cY991.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/cc2cY991.s:78     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/cc2cY991.s:143    .text.blink:0000000000000000 blink
     /tmp/cc2cY991.s:223    .text.USBConnected:0000000000000000 USBConnected
     /tmp/cc2cY991.s:260    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/cc2cY991.s:324    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/cc2cY991.s:367    .text.EVENT_USB_Device_UnhandledControlRequest:0000000000000000 EVENT_USB_Device_UnhandledControlRequest
     /tmp/cc2cY991.s:1598   .data:0000000000000001 LineEncoding
     /tmp/cc2cY991.s:448    .text.CDC_Task:0000000000000000 CDC_Task
     /tmp/cc2cY991.s:1586   .bss:0000000000000002 boottimeout
     /tmp/cc2cY991.s:1592   .data:0000000000000000 RunBootloader
                            *COM*:0000000000000004 CurrAddress
     /tmp/cc2cY991.s:1396   .text.startup.main:0000000000000000 main
     /tmp/cc2cY991.s:1581   .bss:0000000000000000 app_start

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
eeprom_read_byte
eeprom_write_byte
USB_USBTask
__do_copy_data
__do_clear_bss
