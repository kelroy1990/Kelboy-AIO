
BootloaderCDC.elf:     formato del fichero elf32-avr

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .data         0000008c  00800100  00007dc4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc4  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080018c  0080018c  00000ee4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f29  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001023  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001910  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  000079cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019dc  00000000  00000000  00007fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026b4  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000c050  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00007000 <__vectors>:
    7000:	5f c0       	rjmp	.+190    	; 0x70c0 <__ctors_end>
    7002:	00 00       	nop
    7004:	78 c0       	rjmp	.+240    	; 0x70f6 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	76 c0       	rjmp	.+236    	; 0x70f6 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	74 c0       	rjmp	.+232    	; 0x70f6 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	72 c0       	rjmp	.+228    	; 0x70f6 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	70 c0       	rjmp	.+224    	; 0x70f6 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	6e c0       	rjmp	.+220    	; 0x70f6 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	6c c0       	rjmp	.+216    	; 0x70f6 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	6a c0       	rjmp	.+212    	; 0x70f6 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	68 c0       	rjmp	.+208    	; 0x70f6 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	4c c4       	rjmp	.+2200   	; 0x78c2 <__vector_10>
    702a:	00 00       	nop
    702c:	64 c0       	rjmp	.+200    	; 0x70f6 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	62 c0       	rjmp	.+196    	; 0x70f6 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	60 c0       	rjmp	.+192    	; 0x70f6 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	5e c0       	rjmp	.+188    	; 0x70f6 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	5c c0       	rjmp	.+184    	; 0x70f6 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	5a c0       	rjmp	.+180    	; 0x70f6 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	58 c0       	rjmp	.+176    	; 0x70f6 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	56 c0       	rjmp	.+172    	; 0x70f6 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	54 c0       	rjmp	.+168    	; 0x70f6 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	52 c0       	rjmp	.+164    	; 0x70f6 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	50 c0       	rjmp	.+160    	; 0x70f6 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	4e c0       	rjmp	.+156    	; 0x70f6 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	4c c0       	rjmp	.+152    	; 0x70f6 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	4a c0       	rjmp	.+148    	; 0x70f6 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	48 c0       	rjmp	.+144    	; 0x70f6 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	46 c0       	rjmp	.+140    	; 0x70f6 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	44 c0       	rjmp	.+136    	; 0x70f6 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	42 c0       	rjmp	.+132    	; 0x70f6 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	40 c0       	rjmp	.+128    	; 0x70f6 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	3e c0       	rjmp	.+124    	; 0x70f6 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	3c c0       	rjmp	.+120    	; 0x70f6 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	3a c0       	rjmp	.+116    	; 0x70f6 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	38 c0       	rjmp	.+112    	; 0x70f6 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	36 c0       	rjmp	.+108    	; 0x70f6 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	34 c0       	rjmp	.+104    	; 0x70f6 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	32 c0       	rjmp	.+100    	; 0x70f6 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	30 c0       	rjmp	.+96     	; 0x70f6 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	2e c0       	rjmp	.+92     	; 0x70f6 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	2c c0       	rjmp	.+88     	; 0x70f6 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	2a c0       	rjmp	.+84     	; 0x70f6 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	28 c0       	rjmp	.+80     	; 0x70f6 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	26 c0       	rjmp	.+76     	; 0x70f6 <__bad_interrupt>
    70aa:	00 00       	nop
    70ac:	3c 3d       	cpi	r19, 0xDC	; 220
    70ae:	58 3d       	cpi	r21, 0xD8	; 216
    70b0:	11 3e       	cpi	r17, 0xE1	; 225
    70b2:	58 3d       	cpi	r21, 0xD8	; 216
    70b4:	11 3e       	cpi	r17, 0xE1	; 225
    70b6:	90 3d       	cpi	r25, 0xD0	; 208
    70b8:	b5 3d       	cpi	r27, 0xD5	; 213
    70ba:	11 3e       	cpi	r17, 0xE1	; 225
    70bc:	d5 3d       	cpi	r29, 0xD5	; 213
    70be:	e7 3d       	cpi	r30, 0xD7	; 215

000070c0 <__ctors_end>:
    70c0:	11 24       	eor	r1, r1
    70c2:	1f be       	out	0x3f, r1	; 63
    70c4:	cf ef       	ldi	r28, 0xFF	; 255
    70c6:	da e0       	ldi	r29, 0x0A	; 10
    70c8:	de bf       	out	0x3e, r29	; 62
    70ca:	cd bf       	out	0x3d, r28	; 61

000070cc <__do_copy_data>:
    70cc:	11 e0       	ldi	r17, 0x01	; 1
    70ce:	a0 e0       	ldi	r26, 0x00	; 0
    70d0:	b1 e0       	ldi	r27, 0x01	; 1
    70d2:	e4 ec       	ldi	r30, 0xC4	; 196
    70d4:	fd e7       	ldi	r31, 0x7D	; 125
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <__do_copy_data+0x10>
    70d8:	05 90       	lpm	r0, Z+
    70da:	0d 92       	st	X+, r0
    70dc:	ac 38       	cpi	r26, 0x8C	; 140
    70de:	b1 07       	cpc	r27, r17
    70e0:	d9 f7       	brne	.-10     	; 0x70d8 <__do_copy_data+0xc>

000070e2 <__do_clear_bss>:
    70e2:	21 e0       	ldi	r18, 0x01	; 1
    70e4:	ac e8       	ldi	r26, 0x8C	; 140
    70e6:	b1 e0       	ldi	r27, 0x01	; 1
    70e8:	01 c0       	rjmp	.+2      	; 0x70ec <.do_clear_bss_start>

000070ea <.do_clear_bss_loop>:
    70ea:	1d 92       	st	X+, r1

000070ec <.do_clear_bss_start>:
    70ec:	ad 39       	cpi	r26, 0x9D	; 157
    70ee:	b2 07       	cpc	r27, r18
    70f0:	e1 f7       	brne	.-8      	; 0x70ea <.do_clear_bss_loop>
    70f2:	d9 d2       	rcall	.+1458   	; 0x76a6 <main>
    70f4:	65 c6       	rjmp	.+3274   	; 0x7dc0 <_exit>

000070f6 <__bad_interrupt>:
    70f6:	84 cf       	rjmp	.-248    	; 0x7000 <__vectors>

000070f8 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70f8:	84 e0       	ldi	r24, 0x04	; 4
    70fa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70fe:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    7102:	85 fd       	sbrc	r24, 5
    7104:	0d c0       	rjmp	.+26     	; 0x7120 <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7106:	80 91 e8 00 	lds	r24, 0x00E8
    710a:	8b 77       	andi	r24, 0x7B	; 123
    710c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7110:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7114:	82 fd       	sbrc	r24, 2
    7116:	f3 cf       	rjmp	.-26     	; 0x70fe <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7118:	8e b3       	in	r24, 0x1e	; 30
    711a:	81 11       	cpse	r24, r1
    711c:	f9 cf       	rjmp	.-14     	; 0x7110 <FetchNextCommandByte+0x18>
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    7120:	80 91 f1 00 	lds	r24, 0x00F1
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_Byte();
}
    7124:	08 95       	ret

00007126 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7126:	93 e0       	ldi	r25, 0x03	; 3
    7128:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    712c:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7130:	95 ff       	sbrs	r25, 5
    7132:	03 c0       	rjmp	.+6      	; 0x713a <WriteNextResponseByte+0x14>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    7134:	80 93 f1 00 	sts	0x00F1, r24
    7138:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    713a:	90 91 e8 00 	lds	r25, 0x00E8
    713e:	9e 77       	andi	r25, 0x7E	; 126
    7140:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7144:	90 91 e8 00 	lds	r25, 0x00E8
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7148:	90 fd       	sbrc	r25, 0
    714a:	f4 cf       	rjmp	.-24     	; 0x7134 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    714c:	9e b3       	in	r25, 0x1e	; 30
    714e:	91 11       	cpse	r25, r1
    7150:	f9 cf       	rjmp	.-14     	; 0x7144 <WriteNextResponseByte+0x1e>
    7152:	08 95       	ret

00007154 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    7154:	84 b7       	in	r24, 0x34	; 52
    7156:	87 7f       	andi	r24, 0xF7	; 247
    7158:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    715a:	0f b6       	in	r0, 0x3f	; 63
    715c:	f8 94       	cli
    715e:	a8 95       	wdr
    7160:	80 91 60 00 	lds	r24, 0x0060
    7164:	88 61       	ori	r24, 0x18	; 24
    7166:	80 93 60 00 	sts	0x0060, r24
    716a:	10 92 60 00 	sts	0x0060, r1
    716e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	80 e8       	ldi	r24, 0x80	; 128
    7174:	0f b6       	in	r0, 0x3f	; 63
    7176:	f8 94       	cli
    7178:	80 93 61 00 	sts	0x0061, r24
    717c:	90 93 61 00 	sts	0x0061, r25
    7180:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    7182:	81 e0       	ldi	r24, 0x01	; 1
    7184:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    7186:	82 e0       	ldi	r24, 0x02	; 2
    7188:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB Subsystem */
	USB_Init();
    718a:	85 c3       	rjmp	.+1802   	; 0x7896 <USB_Init>

0000718c <EVENT_USB_Device_ConfigurationChanged>:
    718c:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    718e:	61 ec       	ldi	r22, 0xC1	; 193
    7190:	82 e0       	ldi	r24, 0x02	; 2
    7192:	0c d3       	rcall	.+1560   	; 0x77ac <Endpoint_ConfigureEndpoint_Prv>
    7194:	42 e1       	ldi	r20, 0x12	; 18
    7196:	61 e8       	ldi	r22, 0x81	; 129
    7198:	83 e0       	ldi	r24, 0x03	; 3
    719a:	08 d3       	rcall	.+1552   	; 0x77ac <Endpoint_ConfigureEndpoint_Prv>
    719c:	42 e1       	ldi	r20, 0x12	; 18
    719e:	60 e8       	ldi	r22, 0x80	; 128
    71a0:	84 e0       	ldi	r24, 0x04	; 4
    71a2:	04 c3       	rjmp	.+1544   	; 0x77ac <Endpoint_ConfigureEndpoint_Prv>

000071a4 <EVENT_USB_Device_UnhandledControlRequest>:
    71a4:	80 91 96 01 	lds	r24, 0x0196
    71a8:	80 32       	cpi	r24, 0x20	; 32
 *  which are all issued via the control endpoint), so that they can be handled appropriately for the application.
 */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    71aa:	a1 f0       	breq	.+40     	; 0x71d4 <EVENT_USB_Device_UnhandledControlRequest+0x30>
    71ac:	81 32       	cpi	r24, 0x21	; 33
    71ae:	29 f5       	brne	.+74     	; 0x71fa <EVENT_USB_Device_UnhandledControlRequest+0x56>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    71b0:	80 91 95 01 	lds	r24, 0x0195
    71b4:	81 3a       	cpi	r24, 0xA1	; 161
    71b6:	09 f5       	brne	.+66     	; 0x71fa <EVENT_USB_Device_UnhandledControlRequest+0x56>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71b8:	80 91 e8 00 	lds	r24, 0x00E8
    71bc:	87 7f       	andi	r24, 0xF7	; 247
    71be:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
    71c2:	67 e0       	ldi	r22, 0x07	; 7
    71c4:	70 e0       	ldi	r23, 0x00	; 0
    71c6:	81 e0       	ldi	r24, 0x01	; 1
    71c8:	91 e0       	ldi	r25, 0x01	; 1
    71ca:	35 d5       	rcall	.+2666   	; 0x7c36 <Endpoint_Write_Control_Stream_LE>
    71cc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    71d0:	8b 77       	andi	r24, 0x7B	; 123
    71d2:	11 c0       	rjmp	.+34     	; 0x71f6 <EVENT_USB_Device_UnhandledControlRequest+0x52>
    71d4:	80 91 95 01 	lds	r24, 0x0195
				Endpoint_ClearOUT();
			}

			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    71d8:	81 32       	cpi	r24, 0x21	; 33
    71da:	79 f4       	brne	.+30     	; 0x71fa <EVENT_USB_Device_UnhandledControlRequest+0x56>
    71dc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71e0:	87 7f       	andi	r24, 0xF7	; 247
    71e2:	80 93 e8 00 	sts	0x00E8, r24
    71e6:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
    71e8:	70 e0       	ldi	r23, 0x00	; 0
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	91 e0       	ldi	r25, 0x01	; 1
    71ee:	80 d5       	rcall	.+2816   	; 0x7cf0 <Endpoint_Read_Control_Stream_LE>
    71f0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    71f4:	8e 77       	andi	r24, 0x7E	; 126
    71f6:	80 93 e8 00 	sts	0x00E8, r24
    71fa:	08 95       	ret

000071fc <CDC_Task>:
    71fc:	8f 92       	push	r8
    71fe:	9f 92       	push	r9

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    7200:	af 92       	push	r10
    7202:	bf 92       	push	r11
    7204:	cf 92       	push	r12
    7206:	df 92       	push	r13
    7208:	ef 92       	push	r14
    720a:	ff 92       	push	r15
    720c:	0f 93       	push	r16
    720e:	1f 93       	push	r17
    7210:	cf 93       	push	r28
    7212:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7214:	84 e0       	ldi	r24, 0x04	; 4
    7216:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    721a:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (Endpoint_IsOUTReceived())
    721e:	82 ff       	sbrs	r24, 2
    7220:	35 c2       	rjmp	.+1130   	; 0x768c <CDC_Task+0x490>
	{
	  // adafruit mods - we are still processing data
	  boottimeout = 0;
    7222:	10 92 8e 01 	sts	0x018E, r1


		/* Read in the bootloader command (first byte sent from host) */
		uint8_t Command = FetchNextCommandByte();
    7226:	68 df       	rcall	.-304    	; 0x70f8 <FetchNextCommandByte>
    7228:	c8 2f       	mov	r28, r24
    722a:	8c 34       	cpi	r24, 0x4C	; 76

		if ((Command == 'L') || (Command == 'P') || (Command == 'T') || (Command == 'E'))
    722c:	09 f4       	brne	.+2      	; 0x7230 <CDC_Task+0x34>
    722e:	46 c0       	rjmp	.+140    	; 0x72bc <CDC_Task+0xc0>
    7230:	80 35       	cpi	r24, 0x50	; 80
    7232:	09 f4       	brne	.+2      	; 0x7236 <CDC_Task+0x3a>
    7234:	43 c0       	rjmp	.+134    	; 0x72bc <CDC_Task+0xc0>
    7236:	84 35       	cpi	r24, 0x54	; 84
    7238:	29 f0       	breq	.+10     	; 0x7244 <CDC_Task+0x48>
    723a:	85 34       	cpi	r24, 0x45	; 69
    723c:	29 f4       	brne	.+10     	; 0x7248 <CDC_Task+0x4c>
    723e:	10 92 00 01 	sts	0x0100, r1
		{
			if (Command == 'E')
			  RunBootloader = false;
    7242:	3c c0       	rjmp	.+120    	; 0x72bc <CDC_Task+0xc0>
    7244:	59 df       	rcall	.-334    	; 0x70f8 <FetchNextCommandByte>
			else if (Command == 'T')
			  FetchNextCommandByte();
    7246:	3a c0       	rjmp	.+116    	; 0x72bc <CDC_Task+0xc0>
    7248:	84 37       	cpi	r24, 0x74	; 116
    724a:	29 f4       	brne	.+10     	; 0x7256 <CDC_Task+0x5a>

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 't')
    724c:	84 e4       	ldi	r24, 0x44	; 68
    724e:	6b df       	rcall	.-298    	; 0x7126 <WriteNextResponseByte>
		{
			/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
			WriteNextResponseByte(0x44);
    7250:	80 e0       	ldi	r24, 0x00	; 0
    7252:	69 df       	rcall	.-302    	; 0x7126 <WriteNextResponseByte>
    7254:	f2 c1       	rjmp	.+996    	; 0x763a <CDC_Task+0x43e>
			WriteNextResponseByte(0x00);
    7256:	81 36       	cpi	r24, 0x61	; 97
    7258:	11 f4       	brne	.+4      	; 0x725e <CDC_Task+0x62>
    725a:	89 e5       	ldi	r24, 0x59	; 89
    725c:	fa cf       	rjmp	.-12     	; 0x7252 <CDC_Task+0x56>
		}
		else if (Command == 'a')
    725e:	81 34       	cpi	r24, 0x41	; 65
    7260:	79 f5       	brne	.+94     	; 0x72c0 <CDC_Task+0xc4>
		{
			/* Indicate auto-address increment is supported */
			WriteNextResponseByte('Y');
    7262:	4a df       	rcall	.-364    	; 0x70f8 <FetchNextCommandByte>
    7264:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (Command == 'A')
    7266:	98 2f       	mov	r25, r24
    7268:	88 27       	eor	r24, r24
		{
			/* Set the current address to that given by the host */
			CurrAddress   = (FetchNextCommandByte() << 9);
    726a:	99 0f       	add	r25, r25
    726c:	09 2e       	mov	r0, r25
    726e:	00 0c       	add	r0, r0
    7270:	aa 0b       	sbc	r26, r26
    7272:	bb 0b       	sbc	r27, r27
    7274:	80 93 8f 01 	sts	0x018F, r24
    7278:	90 93 90 01 	sts	0x0190, r25
    727c:	a0 93 91 01 	sts	0x0191, r26
    7280:	b0 93 92 01 	sts	0x0192, r27
    7284:	39 df       	rcall	.-398    	; 0x70f8 <FetchNextCommandByte>
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	88 0f       	add	r24, r24
    728a:	99 1f       	adc	r25, r25
    728c:	09 2e       	mov	r0, r25
			CurrAddress  |= (FetchNextCommandByte() << 1);
    728e:	00 0c       	add	r0, r0
    7290:	aa 0b       	sbc	r26, r26
    7292:	bb 0b       	sbc	r27, r27
    7294:	40 91 8f 01 	lds	r20, 0x018F
    7298:	50 91 90 01 	lds	r21, 0x0190
    729c:	60 91 91 01 	lds	r22, 0x0191
    72a0:	70 91 92 01 	lds	r23, 0x0192
    72a4:	84 2b       	or	r24, r20
    72a6:	95 2b       	or	r25, r21
    72a8:	a6 2b       	or	r26, r22
    72aa:	b7 2b       	or	r27, r23
    72ac:	80 93 8f 01 	sts	0x018F, r24
    72b0:	90 93 90 01 	sts	0x0190, r25
    72b4:	a0 93 91 01 	sts	0x0191, r26
    72b8:	b0 93 92 01 	sts	0x0192, r27
    72bc:	8d e0       	ldi	r24, 0x0D	; 13
    72be:	c9 cf       	rjmp	.-110    	; 0x7252 <CDC_Task+0x56>
    72c0:	80 37       	cpi	r24, 0x70	; 112
    72c2:	11 f4       	brne	.+4      	; 0x72c8 <CDC_Task+0xcc>
    72c4:	83 e5       	ldi	r24, 0x53	; 83
    72c6:	c5 cf       	rjmp	.-118    	; 0x7252 <CDC_Task+0x56>

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
    72c8:	83 35       	cpi	r24, 0x53	; 83
    72ca:	49 f4       	brne	.+18     	; 0x72de <CDC_Task+0xe2>
		}
		else if (Command == 'p')
    72cc:	c4 e8       	ldi	r28, 0x84	; 132
    72ce:	d1 e0       	ldi	r29, 0x01	; 1
		{
			/* Indicate serial programmer back to the host */
			WriteNextResponseByte('S');
    72d0:	1c 2f       	mov	r17, r28
    72d2:	19 5f       	subi	r17, 0xF9	; 249
		}
		else if (Command == 'S')
    72d4:	89 91       	ld	r24, Y+
    72d6:	27 df       	rcall	.-434    	; 0x7126 <WriteNextResponseByte>
    72d8:	1c 13       	cpse	r17, r28
    72da:	fc cf       	rjmp	.-8      	; 0x72d4 <CDC_Task+0xd8>
    72dc:	ae c1       	rjmp	.+860    	; 0x763a <CDC_Task+0x43e>
    72de:	86 35       	cpi	r24, 0x56	; 86
		{
			/* Write the 7-byte software identifier to the endpoint */
			for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
			  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    72e0:	21 f4       	brne	.+8      	; 0x72ea <CDC_Task+0xee>
    72e2:	81 e3       	ldi	r24, 0x31	; 49
    72e4:	20 df       	rcall	.-448    	; 0x7126 <WriteNextResponseByte>
			WriteNextResponseByte('S');
		}
		else if (Command == 'S')
		{
			/* Write the 7-byte software identifier to the endpoint */
			for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    72e6:	80 e3       	ldi	r24, 0x30	; 48
    72e8:	b4 cf       	rjmp	.-152    	; 0x7252 <CDC_Task+0x56>
    72ea:	83 37       	cpi	r24, 0x73	; 115
			  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
		}
		else if (Command == 'V')
    72ec:	31 f4       	brne	.+12     	; 0x72fa <CDC_Task+0xfe>
    72ee:	87 e8       	ldi	r24, 0x87	; 135
		{
			WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    72f0:	1a df       	rcall	.-460    	; 0x7126 <WriteNextResponseByte>
    72f2:	85 e9       	ldi	r24, 0x95	; 149
    72f4:	18 df       	rcall	.-464    	; 0x7126 <WriteNextResponseByte>
			WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    72f6:	8e e1       	ldi	r24, 0x1E	; 30
    72f8:	ac cf       	rjmp	.-168    	; 0x7252 <CDC_Task+0x56>
		}
		else if (Command == 's')
    72fa:	82 36       	cpi	r24, 0x62	; 98
    72fc:	31 f4       	brne	.+12     	; 0x730a <CDC_Task+0x10e>
		{
			WriteNextResponseByte(AVR_SIGNATURE_3);
    72fe:	89 e5       	ldi	r24, 0x59	; 89
    7300:	12 df       	rcall	.-476    	; 0x7126 <WriteNextResponseByte>
    7302:	80 e0       	ldi	r24, 0x00	; 0
			WriteNextResponseByte(AVR_SIGNATURE_2);
    7304:	10 df       	rcall	.-480    	; 0x7126 <WriteNextResponseByte>
    7306:	80 e8       	ldi	r24, 0x80	; 128
    7308:	a4 cf       	rjmp	.-184    	; 0x7252 <CDC_Task+0x56>
			WriteNextResponseByte(AVR_SIGNATURE_1);
    730a:	85 36       	cpi	r24, 0x65	; 101
    730c:	b9 f4       	brne	.+46     	; 0x733c <CDC_Task+0x140>
		}
		else if (Command == 'b')
    730e:	e0 e0       	ldi	r30, 0x00	; 0
    7310:	f0 e0       	ldi	r31, 0x00	; 0
		{
			WriteNextResponseByte('Y');
    7312:	83 e0       	ldi	r24, 0x03	; 3
    7314:	95 e0       	ldi	r25, 0x05	; 5
    7316:	80 93 57 00 	sts	0x0057, r24

			/* Send block size to the host */
			WriteNextResponseByte(SPM_PAGESIZE >> 8);
    731a:	e8 95       	spm
    731c:	07 b6       	in	r0, 0x37	; 55
			WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    731e:	00 fc       	sbrc	r0, 0
    7320:	fd cf       	rjmp	.-6      	; 0x731c <CDC_Task+0x120>
		}
		else if (Command == 'e')
    7322:	90 93 57 00 	sts	0x0057, r25
    7326:	e8 95       	spm
    7328:	07 b6       	in	r0, 0x37	; 55
		{
			/* Clear the application section of flash */
			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
			{
				boot_page_erase(CurrFlashAddress);
    732a:	00 fc       	sbrc	r0, 0
				boot_spm_busy_wait();
				boot_page_write(CurrFlashAddress);
    732c:	fd cf       	rjmp	.-6      	; 0x7328 <CDC_Task+0x12c>
		else if (Command == 'e')
		{
			/* Clear the application section of flash */
			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
			{
				boot_page_erase(CurrFlashAddress);
    732e:	ef 57       	subi	r30, 0x7F	; 127
    7330:	ff 4f       	sbci	r31, 0xFF	; 255
    7332:	ef 35       	cpi	r30, 0x5F	; 95
				boot_spm_busy_wait();
    7334:	40 e7       	ldi	r20, 0x70	; 112
    7336:	f4 07       	cpc	r31, r20
    7338:	71 f7       	brne	.-36     	; 0x7316 <CDC_Task+0x11a>
				boot_page_write(CurrFlashAddress);
    733a:	c0 cf       	rjmp	.-128    	; 0x72bc <CDC_Task+0xc0>
    733c:	8c 36       	cpi	r24, 0x6C	; 108
    733e:	51 f4       	brne	.+20     	; 0x7354 <CDC_Task+0x158>
				boot_spm_busy_wait();
    7340:	db de       	rcall	.-586    	; 0x70f8 <FetchNextCommandByte>
    7342:	80 95       	com	r24
    7344:	99 e0       	ldi	r25, 0x09	; 9
    7346:	e1 e0       	ldi	r30, 0x01	; 1
    7348:	f0 e0       	ldi	r31, 0x00	; 0
			WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
		}
		else if (Command == 'e')
		{
			/* Clear the application section of flash */
			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
    734a:	08 2e       	mov	r0, r24
    734c:	90 93 57 00 	sts	0x0057, r25
    7350:	e8 95       	spm
    7352:	b4 cf       	rjmp	.-152    	; 0x72bc <CDC_Task+0xc0>
			}

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'l')
    7354:	82 37       	cpi	r24, 0x72	; 114
    7356:	19 f4       	brne	.+6      	; 0x735e <CDC_Task+0x162>
		{
			/* Set the lock bits to those given by the host */
			boot_lock_bits_set(FetchNextCommandByte());
    7358:	e1 e0       	ldi	r30, 0x01	; 1
    735a:	f0 e0       	ldi	r31, 0x00	; 0
    735c:	0e c0       	rjmp	.+28     	; 0x737a <CDC_Task+0x17e>
    735e:	86 34       	cpi	r24, 0x46	; 70
    7360:	19 f4       	brne	.+6      	; 0x7368 <CDC_Task+0x16c>
    7362:	e0 e0       	ldi	r30, 0x00	; 0
    7364:	f0 e0       	ldi	r31, 0x00	; 0
    7366:	09 c0       	rjmp	.+18     	; 0x737a <CDC_Task+0x17e>
    7368:	8e 34       	cpi	r24, 0x4E	; 78
    736a:	19 f4       	brne	.+6      	; 0x7372 <CDC_Task+0x176>
    736c:	e3 e0       	ldi	r30, 0x03	; 3

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'r')
    736e:	f0 e0       	ldi	r31, 0x00	; 0
    7370:	04 c0       	rjmp	.+8      	; 0x737a <CDC_Task+0x17e>
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7372:	81 35       	cpi	r24, 0x51	; 81
    7374:	39 f4       	brne	.+14     	; 0x7384 <CDC_Task+0x188>
    7376:	e2 e0       	ldi	r30, 0x02	; 2
		}
		else if (Command == 'F')
    7378:	f0 e0       	ldi	r31, 0x00	; 0
    737a:	89 e0       	ldi	r24, 0x09	; 9
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    737c:	80 93 57 00 	sts	0x0057, r24
    7380:	84 91       	lpm	r24, Z
		}
		else if (Command == 'N')
    7382:	67 cf       	rjmp	.-306    	; 0x7252 <CDC_Task+0x56>
    7384:	83 34       	cpi	r24, 0x43	; 67
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    7386:	71 f4       	brne	.+28     	; 0x73a4 <CDC_Task+0x1a8>
    7388:	c0 91 8f 01 	lds	r28, 0x018F
		}
		else if (Command == 'Q')
    738c:	d0 91 90 01 	lds	r29, 0x0190
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7390:	b3 de       	rcall	.-666    	; 0x70f8 <FetchNextCommandByte>
    7392:	90 e0       	ldi	r25, 0x00	; 0
    7394:	21 e0       	ldi	r18, 0x01	; 1
    7396:	fe 01       	movw	r30, r28
    7398:	0c 01       	movw	r0, r24
    739a:	20 93 57 00 	sts	0x0057, r18
		}
		else if (Command == 'C')
    739e:	e8 95       	spm
    73a0:	11 24       	eor	r1, r1
		{
			/* Write the high byte to the current flash page */
			boot_page_fill(CurrAddress, FetchNextCommandByte());
    73a2:	8c cf       	rjmp	.-232    	; 0x72bc <CDC_Task+0xc0>
    73a4:	83 36       	cpi	r24, 0x63	; 99
    73a6:	79 f4       	brne	.+30     	; 0x73c6 <CDC_Task+0x1ca>
    73a8:	c0 91 8f 01 	lds	r28, 0x018F
    73ac:	d0 91 90 01 	lds	r29, 0x0190
    73b0:	c1 60       	ori	r28, 0x01	; 1
    73b2:	a2 de       	rcall	.-700    	; 0x70f8 <FetchNextCommandByte>
    73b4:	90 e0       	ldi	r25, 0x00	; 0
    73b6:	21 e0       	ldi	r18, 0x01	; 1
    73b8:	fe 01       	movw	r30, r28
    73ba:	0c 01       	movw	r0, r24
    73bc:	20 93 57 00 	sts	0x0057, r18

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'c')
    73c0:	e8 95       	spm
    73c2:	11 24       	eor	r1, r1
		{
			/* Write the low byte to the current flash page */
			boot_page_fill(CurrAddress | 1, FetchNextCommandByte());
    73c4:	07 c1       	rjmp	.+526    	; 0x75d4 <CDC_Task+0x3d8>
    73c6:	8d 36       	cpi	r24, 0x6D	; 109
    73c8:	61 f4       	brne	.+24     	; 0x73e2 <CDC_Task+0x1e6>
    73ca:	e0 91 8f 01 	lds	r30, 0x018F
    73ce:	f0 91 90 01 	lds	r31, 0x0190
    73d2:	85 e0       	ldi	r24, 0x05	; 5
    73d4:	80 93 57 00 	sts	0x0057, r24
    73d8:	e8 95       	spm
    73da:	07 b6       	in	r0, 0x37	; 55
    73dc:	00 fc       	sbrc	r0, 0
    73de:	fd cf       	rjmp	.-6      	; 0x73da <CDC_Task+0x1de>
    73e0:	6d cf       	rjmp	.-294    	; 0x72bc <CDC_Task+0xc0>
    73e2:	82 34       	cpi	r24, 0x42	; 66
			CurrAddress += 2;

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'm')
    73e4:	19 f0       	breq	.+6      	; 0x73ec <CDC_Task+0x1f0>
    73e6:	87 36       	cpi	r24, 0x67	; 103
		{
			/* Commit the flash page to memory */
			boot_page_write(CurrAddress);
    73e8:	09 f0       	breq	.+2      	; 0x73ec <CDC_Task+0x1f0>
    73ea:	d7 c0       	rjmp	.+430    	; 0x759a <CDC_Task+0x39e>
    73ec:	85 de       	rcall	.-758    	; 0x70f8 <FetchNextCommandByte>
    73ee:	08 2f       	mov	r16, r24
    73f0:	83 de       	rcall	.-762    	; 0x70f8 <FetchNextCommandByte>
    73f2:	d8 2f       	mov	r29, r24
    73f4:	81 de       	rcall	.-766    	; 0x70f8 <FetchNextCommandByte>
    73f6:	18 2f       	mov	r17, r24

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    73f8:	8b eb       	ldi	r24, 0xBB	; 187
    73fa:	81 0f       	add	r24, r17
    73fc:	82 30       	cpi	r24, 0x02	; 2
    73fe:	10 f0       	brcs	.+4      	; 0x7404 <CDC_Task+0x208>

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if ((Command == 'B') || (Command == 'g'))
    7400:	8f e3       	ldi	r24, 0x3F	; 63
    7402:	27 cf       	rjmp	.-434    	; 0x7252 <CDC_Task+0x56>
    7404:	2d 2f       	mov	r18, r29
    7406:	30 e0       	ldi	r19, 0x00	; 0
    7408:	30 2b       	or	r19, r16
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    740a:	c7 36       	cpi	r28, 0x67	; 103
    740c:	09 f0       	breq	.+2      	; 0x7410 <CDC_Task+0x214>
    740e:	4e c0       	rjmp	.+156    	; 0x74ac <CDC_Task+0x2b0>
	BlockSize |=  FetchNextCommandByte();
    7410:	81 e1       	ldi	r24, 0x11	; 17
    7412:	80 93 57 00 	sts	0x0057, r24

	MemoryType =  FetchNextCommandByte();
    7416:	e8 95       	spm
    7418:	e9 01       	movw	r28, r18
    741a:	00 e0       	ldi	r16, 0x00	; 0

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    741c:	ff 24       	eor	r15, r15
    741e:	f3 94       	inc	r15
    7420:	20 97       	sbiw	r28, 0x00	; 0
    7422:	09 f4       	brne	.+2      	; 0x7426 <CDC_Task+0x22a>
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    7424:	0a c1       	rjmp	.+532    	; 0x763a <CDC_Task+0x43e>
    7426:	16 34       	cpi	r17, 0x46	; 70
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7428:	f1 f4       	brne	.+60     	; 0x7466 <CDC_Task+0x26a>
    742a:	e0 91 8f 01 	lds	r30, 0x018F

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
    742e:	f0 91 90 01 	lds	r31, 0x0190
    7432:	e0 2b       	or	r30, r16
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    7434:	84 91       	lpm	r24, Z
    7436:	77 de       	rcall	.-786    	; 0x7126 <WriteNextResponseByte>
    7438:	00 23       	and	r16, r16
    743a:	99 f0       	breq	.+38     	; 0x7462 <CDC_Task+0x266>
    743c:	80 91 8f 01 	lds	r24, 0x018F

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    7440:	90 91 90 01 	lds	r25, 0x0190
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    7444:	a0 91 91 01 	lds	r26, 0x0191
    7448:	b0 91 92 01 	lds	r27, 0x0192
		{
			if (MemoryType == 'F')
    744c:	02 96       	adiw	r24, 0x02	; 2
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    744e:	a1 1d       	adc	r26, r1
    7450:	b1 1d       	adc	r27, r1
    7452:	80 93 8f 01 	sts	0x018F, r24
    7456:	90 93 90 01 	sts	0x0190, r25
    745a:	a0 93 91 01 	sts	0x0191, r26
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    745e:	b0 93 92 01 	sts	0x0192, r27
				  CurrAddress += 2;
    7462:	0f 25       	eor	r16, r15
    7464:	21 c0       	rjmp	.+66     	; 0x74a8 <CDC_Task+0x2ac>
    7466:	80 91 8f 01 	lds	r24, 0x018F
    746a:	90 91 90 01 	lds	r25, 0x0190
    746e:	a0 91 91 01 	lds	r26, 0x0191
    7472:	b0 91 92 01 	lds	r27, 0x0192
    7476:	b6 95       	lsr	r27
    7478:	a7 95       	ror	r26
    747a:	97 95       	ror	r25
    747c:	87 95       	ror	r24
    747e:	8a d4       	rcall	.+2324   	; 0x7d94 <eeprom_read_byte>
    7480:	52 de       	rcall	.-860    	; 0x7126 <WriteNextResponseByte>
    7482:	80 91 8f 01 	lds	r24, 0x018F
    7486:	90 91 90 01 	lds	r25, 0x0190

				HighByte = !HighByte;
    748a:	a0 91 91 01 	lds	r26, 0x0191
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    748e:	b0 91 92 01 	lds	r27, 0x0192
    7492:	02 96       	adiw	r24, 0x02	; 2
    7494:	a1 1d       	adc	r26, r1
    7496:	b1 1d       	adc	r27, r1
    7498:	80 93 8f 01 	sts	0x018F, r24
    749c:	90 93 90 01 	sts	0x0190, r25
    74a0:	a0 93 91 01 	sts	0x0191, r26
    74a4:	b0 93 92 01 	sts	0x0192, r27
    74a8:	21 97       	sbiw	r28, 0x01	; 1
    74aa:	ba cf       	rjmp	.-140    	; 0x7420 <CDC_Task+0x224>

				/* Increment the address counter after use */
				CurrAddress += 2;
    74ac:	c0 90 8f 01 	lds	r12, 0x018F
    74b0:	d0 90 90 01 	lds	r13, 0x0190
    74b4:	e0 90 91 01 	lds	r14, 0x0191
    74b8:	f0 90 92 01 	lds	r15, 0x0192
    74bc:	16 34       	cpi	r17, 0x46	; 70
    74be:	41 f4       	brne	.+16     	; 0x74d0 <CDC_Task+0x2d4>
    74c0:	83 e0       	ldi	r24, 0x03	; 3
    74c2:	f6 01       	movw	r30, r12
    74c4:	80 93 57 00 	sts	0x0057, r24
    74c8:	e8 95       	spm
    74ca:	07 b6       	in	r0, 0x37	; 55
    74cc:	00 fc       	sbrc	r0, 0
    74ce:	fd cf       	rjmp	.-6      	; 0x74ca <CDC_Task+0x2ce>
    74d0:	e9 01       	movw	r28, r18
    74d2:	b1 2c       	mov	r11, r1
    74d4:	00 e0       	ldi	r16, 0x00	; 0
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    74d6:	aa 24       	eor	r10, r10
    74d8:	a3 94       	inc	r10
    74da:	20 97       	sbiw	r28, 0x00	; 0
    74dc:	09 f4       	brne	.+2      	; 0x74e0 <CDC_Task+0x2e4>
    74de:	51 c0       	rjmp	.+162    	; 0x7582 <CDC_Task+0x386>
    74e0:	16 34       	cpi	r17, 0x46	; 70
    74e2:	51 f5       	brne	.+84     	; 0x7538 <CDC_Task+0x33c>
    74e4:	00 23       	and	r16, r16

		if (MemoryType == 'F')
    74e6:	21 f1       	breq	.+72     	; 0x7530 <CDC_Task+0x334>
    74e8:	80 90 8f 01 	lds	r8, 0x018F
		{
			boot_page_erase(PageStartAddress);
    74ec:	90 90 90 01 	lds	r9, 0x0190
    74f0:	03 de       	rcall	.-1018   	; 0x70f8 <FetchNextCommandByte>
    74f2:	2b 2d       	mov	r18, r11
			boot_spm_busy_wait();
    74f4:	30 e0       	ldi	r19, 0x00	; 0
    74f6:	a9 01       	movw	r20, r18
    74f8:	58 2b       	or	r21, r24
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));

					/* Increment the address counter after use */
					CurrAddress += 2;

					HighByte = false;
    74fa:	f4 01       	movw	r30, r8
    74fc:	0a 01       	movw	r0, r20
    74fe:	a0 92 57 00 	sts	0x0057, r10
				}
				else
				{
					LowByte = FetchNextCommandByte();

					HighByte = true;
    7502:	e8 95       	spm
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    7504:	11 24       	eor	r1, r1
    7506:	80 91 8f 01 	lds	r24, 0x018F
		{
			if (MemoryType == 'F')
    750a:	90 91 90 01 	lds	r25, 0x0190
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    750e:	a0 91 91 01 	lds	r26, 0x0191
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7512:	b0 91 92 01 	lds	r27, 0x0192
    7516:	02 96       	adiw	r24, 0x02	; 2
    7518:	a1 1d       	adc	r26, r1
    751a:	b1 1d       	adc	r27, r1
    751c:	80 93 8f 01 	sts	0x018F, r24
    7520:	90 93 90 01 	sts	0x0190, r25
    7524:	a0 93 91 01 	sts	0x0191, r26
    7528:	b0 93 92 01 	sts	0x0192, r27
    752c:	00 e0       	ldi	r16, 0x00	; 0
    752e:	27 c0       	rjmp	.+78     	; 0x757e <CDC_Task+0x382>
    7530:	e3 dd       	rcall	.-1082   	; 0x70f8 <FetchNextCommandByte>

					/* Increment the address counter after use */
					CurrAddress += 2;
    7532:	b8 2e       	mov	r11, r24
    7534:	01 e0       	ldi	r16, 0x01	; 1
    7536:	23 c0       	rjmp	.+70     	; 0x757e <CDC_Task+0x382>
    7538:	df dd       	rcall	.-1090   	; 0x70f8 <FetchNextCommandByte>
    753a:	68 2f       	mov	r22, r24
    753c:	80 91 8f 01 	lds	r24, 0x018F
    7540:	90 91 90 01 	lds	r25, 0x0190
    7544:	a0 91 91 01 	lds	r26, 0x0191
    7548:	b0 91 92 01 	lds	r27, 0x0192
    754c:	b6 95       	lsr	r27
    754e:	a7 95       	ror	r26
    7550:	97 95       	ror	r25
    7552:	87 95       	ror	r24
    7554:	27 d4       	rcall	.+2126   	; 0x7da4 <eeprom_write_byte>
    7556:	40 91 8f 01 	lds	r20, 0x018F

					HighByte = false;
    755a:	50 91 90 01 	lds	r21, 0x0190
				}
				else
				{
					LowByte = FetchNextCommandByte();
    755e:	60 91 91 01 	lds	r22, 0x0191

					HighByte = true;
    7562:	70 91 92 01 	lds	r23, 0x0192
				}
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7566:	4e 5f       	subi	r20, 0xFE	; 254
    7568:	5f 4f       	sbci	r21, 0xFF	; 255
    756a:	6f 4f       	sbci	r22, 0xFF	; 255
    756c:	7f 4f       	sbci	r23, 0xFF	; 255
    756e:	40 93 8f 01 	sts	0x018F, r20
    7572:	50 93 90 01 	sts	0x0190, r21
    7576:	60 93 91 01 	sts	0x0191, r22
    757a:	70 93 92 01 	sts	0x0192, r23
    757e:	21 97       	sbiw	r28, 0x01	; 1
    7580:	ac cf       	rjmp	.-168    	; 0x74da <CDC_Task+0x2de>
    7582:	16 34       	cpi	r17, 0x46	; 70
    7584:	09 f0       	breq	.+2      	; 0x7588 <CDC_Task+0x38c>
    7586:	9a ce       	rjmp	.-716    	; 0x72bc <CDC_Task+0xc0>

				/* Increment the address counter after use */
				CurrAddress += 2;
    7588:	85 e0       	ldi	r24, 0x05	; 5
    758a:	f6 01       	movw	r30, r12
    758c:	80 93 57 00 	sts	0x0057, r24
    7590:	e8 95       	spm
    7592:	07 b6       	in	r0, 0x37	; 55
    7594:	00 fc       	sbrc	r0, 0
    7596:	fd cf       	rjmp	.-6      	; 0x7592 <CDC_Task+0x396>
    7598:	91 ce       	rjmp	.-734    	; 0x72bc <CDC_Task+0xc0>
    759a:	82 35       	cpi	r24, 0x52	; 82
    759c:	51 f4       	brne	.+20     	; 0x75b2 <CDC_Task+0x3b6>
    759e:	e0 91 8f 01 	lds	r30, 0x018F
    75a2:	f0 91 90 01 	lds	r31, 0x0190
    75a6:	c5 91       	lpm	r28, Z+
    75a8:	d4 91       	lpm	r29, Z
    75aa:	8d 2f       	mov	r24, r29
    75ac:	bc dd       	rcall	.-1160   	; 0x7126 <WriteNextResponseByte>
    75ae:	8c 2f       	mov	r24, r28
    75b0:	50 ce       	rjmp	.-864    	; 0x7252 <CDC_Task+0x56>
    75b2:	84 34       	cpi	r24, 0x44	; 68
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    75b4:	d9 f4       	brne	.+54     	; 0x75ec <CDC_Task+0x3f0>
    75b6:	a0 dd       	rcall	.-1216   	; 0x70f8 <FetchNextCommandByte>
    75b8:	68 2f       	mov	r22, r24
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    75ba:	80 91 8f 01 	lds	r24, 0x018F
    75be:	90 91 90 01 	lds	r25, 0x0190
    75c2:	a0 91 91 01 	lds	r26, 0x0191

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    75c6:	b0 91 92 01 	lds	r27, 0x0192
    75ca:	b6 95       	lsr	r27
		else if ((Command == 'B') || (Command == 'g'))
		{
			/* Delegate the block write/read to a separate function for clarity */
			ReadWriteMemoryBlock(Command);
		}
		else if (Command == 'R')
    75cc:	a7 95       	ror	r26
    75ce:	97 95       	ror	r25
		{
			#if (FLASHEND > 0xFFFF)
			uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
			#else
			uint16_t ProgramWord = pgm_read_word(CurrAddress);
    75d0:	87 95       	ror	r24
    75d2:	e8 d3       	rcall	.+2000   	; 0x7da4 <eeprom_write_byte>
    75d4:	80 91 8f 01 	lds	r24, 0x018F
    75d8:	90 91 90 01 	lds	r25, 0x0190
			#endif

			WriteNextResponseByte(ProgramWord >> 8);
    75dc:	a0 91 91 01 	lds	r26, 0x0191
    75e0:	b0 91 92 01 	lds	r27, 0x0192
			WriteNextResponseByte(ProgramWord & 0xFF);
    75e4:	02 96       	adiw	r24, 0x02	; 2
		}
		else if (Command == 'D')
    75e6:	a1 1d       	adc	r26, r1
    75e8:	b1 1d       	adc	r27, r1
		{
			/* Read the byte from the endpoint and write it to the EEPROM */
			eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75ea:	60 ce       	rjmp	.-832    	; 0x72ac <CDC_Task+0xb0>
    75ec:	84 36       	cpi	r24, 0x64	; 100
    75ee:	11 f5       	brne	.+68     	; 0x7634 <CDC_Task+0x438>
    75f0:	80 91 8f 01 	lds	r24, 0x018F
    75f4:	90 91 90 01 	lds	r25, 0x0190
    75f8:	a0 91 91 01 	lds	r26, 0x0191
    75fc:	b0 91 92 01 	lds	r27, 0x0192
    7600:	b6 95       	lsr	r27
    7602:	a7 95       	ror	r26
    7604:	97 95       	ror	r25
    7606:	87 95       	ror	r24
    7608:	c5 d3       	rcall	.+1930   	; 0x7d94 <eeprom_read_byte>
    760a:	8d dd       	rcall	.-1254   	; 0x7126 <WriteNextResponseByte>

			/* Increment the address after use */
			CurrAddress += 2;
    760c:	80 91 8f 01 	lds	r24, 0x018F
    7610:	90 91 90 01 	lds	r25, 0x0190
    7614:	a0 91 91 01 	lds	r26, 0x0191
    7618:	b0 91 92 01 	lds	r27, 0x0192
    761c:	02 96       	adiw	r24, 0x02	; 2
    761e:	a1 1d       	adc	r26, r1
    7620:	b1 1d       	adc	r27, r1
    7622:	80 93 8f 01 	sts	0x018F, r24

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'd')
    7626:	90 93 90 01 	sts	0x0190, r25
		{
			/* Read the EEPROM byte and write it to the endpoint */
			WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    762a:	a0 93 91 01 	sts	0x0191, r26
    762e:	b0 93 92 01 	sts	0x0192, r27
    7632:	03 c0       	rjmp	.+6      	; 0x763a <CDC_Task+0x43e>
    7634:	8b 31       	cpi	r24, 0x1B	; 27
    7636:	09 f0       	breq	.+2      	; 0x763a <CDC_Task+0x43e>
    7638:	e3 ce       	rjmp	.-570    	; 0x7400 <CDC_Task+0x204>
    763a:	83 e0       	ldi	r24, 0x03	; 3
    763c:	80 93 e9 00 	sts	0x00E9, r24
    7640:	90 91 e8 00 	lds	r25, 0x00E8
    7644:	80 91 e8 00 	lds	r24, 0x00E8

			/* Increment the address after use */
			CurrAddress += 2;
    7648:	8e 77       	andi	r24, 0x7E	; 126
    764a:	80 93 e8 00 	sts	0x00E8, r24
    764e:	95 fd       	sbrc	r25, 5
    7650:	11 c0       	rjmp	.+34     	; 0x7674 <CDC_Task+0x478>
    7652:	80 91 e8 00 	lds	r24, 0x00E8
    7656:	80 fd       	sbrc	r24, 0
    7658:	04 c0       	rjmp	.+8      	; 0x7662 <CDC_Task+0x466>
    765a:	8e b3       	in	r24, 0x1e	; 30
    765c:	81 11       	cpse	r24, r1
    765e:	f9 cf       	rjmp	.-14     	; 0x7652 <CDC_Task+0x456>
    7660:	15 c0       	rjmp	.+42     	; 0x768c <CDC_Task+0x490>
    7662:	80 91 e8 00 	lds	r24, 0x00E8
    7666:	8e 77       	andi	r24, 0x7E	; 126
    7668:	80 93 e8 00 	sts	0x00E8, r24
    766c:	03 c0       	rjmp	.+6      	; 0x7674 <CDC_Task+0x478>
    766e:	8e b3       	in	r24, 0x1e	; 30
		}
		else if (Command == 27)
    7670:	88 23       	and	r24, r24
    7672:	61 f0       	breq	.+24     	; 0x768c <CDC_Task+0x490>
    7674:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7678:	80 ff       	sbrs	r24, 0
    767a:	f9 cf       	rjmp	.-14     	; 0x766e <CDC_Task+0x472>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    767c:	84 e0       	ldi	r24, 0x04	; 4
    767e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7682:	80 91 e8 00 	lds	r24, 0x00E8
    7686:	8b 77       	andi	r24, 0x7B	; 123
    7688:	80 93 e8 00 	sts	0x00E8, r24

		/* Send the endpoint data to the host */
		Endpoint_ClearIN();

		/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
		if (IsEndpointFull)
    768c:	df 91       	pop	r29
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    768e:	cf 91       	pop	r28
    7690:	1f 91       	pop	r17
		{
			while (!(Endpoint_IsINReady()))
    7692:	0f 91       	pop	r16
    7694:	ff 90       	pop	r15
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    7696:	ef 90       	pop	r14
    7698:	df 90       	pop	r13
    769a:	cf 90       	pop	r12
    769c:	bf 90       	pop	r11
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    769e:	af 90       	pop	r10
    76a0:	9f 90       	pop	r9
    76a2:	8f 90       	pop	r8
    76a4:	08 95       	ret

000076a6 <main>:
    76a6:	94 b7       	in	r25, 0x34	; 52
    76a8:	14 be       	out	0x34, r1	; 52
		}

		/* Wait until the data has been sent to the host */
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    76aa:	80 91 60 00 	lds	r24, 0x0060
    76ae:	88 61       	ori	r24, 0x18	; 24
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76b0:	80 93 60 00 	sts	0x0060, r24

			Endpoint_ClearIN();
		}

		/* Wait until the data has been sent to the host */
		while (!(Endpoint_IsINReady()))
    76b4:	10 92 60 00 	sts	0x0060, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    76b8:	10 92 8e 01 	sts	0x018E, r1
    76bc:	91 fd       	sbrc	r25, 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    76be:	0b c0       	rjmp	.+22     	; 0x76d6 <main+0x30>
    76c0:	e0 e0       	ldi	r30, 0x00	; 0
    76c2:	f0 e0       	ldi	r31, 0x00	; 0
    76c4:	85 91       	lpm	r24, Z+
    76c6:	94 91       	lpm	r25, Z
		Endpoint_SelectEndpoint(CDC_RX_EPNUM);

		/* Acknowledge the command from the host */
		Endpoint_ClearOUT();
	}
}
    76c8:	01 96       	adiw	r24, 0x01	; 1
    76ca:	29 f0       	breq	.+10     	; 0x76d6 <main+0x30>
    76cc:	e0 91 8c 01 	lds	r30, 0x018C
    76d0:	f0 91 8d 01 	lds	r31, 0x018D
    76d4:	09 95       	icall
    76d6:	3e dd       	rcall	.-1412   	; 0x7154 <SetupHardware>
    76d8:	6e 9a       	sbi	0x0d, 6	; 13
    76da:	76 9a       	sbi	0x0e, 6	; 14
    76dc:	78 94       	sei
    76de:	11 e0       	ldi	r17, 0x01	; 1
    76e0:	c0 e0       	ldi	r28, 0x00	; 0
	BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);

	uint16_t blinkycounter = 0;
	uint8_t pwmcounter = 0; // for the LED pulsing
	uint8_t brightness = 0; // for the LED pulsing
    76e2:	d0 e0       	ldi	r29, 0x00	; 0

	BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);

	uint16_t blinkycounter = 0;
	uint8_t pwmcounter = 0; // for the LED pulsing
    76e4:	e1 2c       	mov	r14, r1
		} 
		
		// we took a long time, lets restart
		if (boottimeout >= BOOTLOADTIMEOUT) {
		  // check to see if we have any code loaded. if the first byte is blank, we shouldn't go
		  if (pgm_read_word_near(0) != 0xFFFF) {
    76e6:	f1 2c       	mov	r15, r1
    76e8:	80 91 00 01 	lds	r24, 0x0100
	// end adafruit mods

	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
    76ec:	88 23       	and	r24, r24
    76ee:	19 f1       	breq	.+70     	; 0x7736 <main+0x90>
    76f0:	85 dd       	rcall	.-1270   	; 0x71fc <CDC_Task>
	{
		CDC_Task();
    76f2:	39 d3       	rcall	.+1650   	; 0x7d66 <USB_USBTask>
    76f4:	df 5f       	subi	r29, 0xFF	; 255
		USB_USBTask();
    76f6:	11 f4       	brne	.+4      	; 0x76fc <main+0x56>
    76f8:	c1 0f       	add	r28, r17
		
		// Adafruit mods = we'll pulse an LED to indicate the bootloader is active
		pwmcounter++;
    76fa:	76 9a       	sbi	0x0e, 6	; 14
		
		// after each PWM cycle, increase/decrease the brightness
		if (pwmcounter == 0) {
    76fc:	dc 13       	cpse	r29, r28
		  brightness += pulsedirection;
    76fe:	01 c0       	rjmp	.+2      	; 0x7702 <main+0x5c>
		  BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
    7700:	76 98       	cbi	0x0e, 6	; 14
		}

		// PWM compare match
		if (pwmcounter == brightness) {
    7702:	cf 3f       	cpi	r28, 0xFF	; 255
    7704:	59 f0       	breq	.+22     	; 0x771c <main+0x76>
		  BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED);
    7706:	c1 11       	cpse	r28, r1
		}

		// make the bootloade LED pulse up and down
		if (brightness == 255) {
    7708:	0a c0       	rjmp	.+20     	; 0x771e <main+0x78>
    770a:	11 30       	cpi	r17, 0x01	; 1
		  pulsedirection = -1;
		}
		if ((brightness == 0) && (pulsedirection != 1)) {
    770c:	41 f0       	breq	.+16     	; 0x771e <main+0x78>
    770e:	80 91 8e 01 	lds	r24, 0x018E
    7712:	8f 5f       	subi	r24, 0xFF	; 255
		  pulsedirection = 1;

		  // each full pulse takes about one second
		  boottimeout++;
    7714:	80 93 8e 01 	sts	0x018E, r24
    7718:	11 e0       	ldi	r17, 0x01	; 1
    771a:	01 c0       	rjmp	.+2      	; 0x771e <main+0x78>
    771c:	1f ef       	ldi	r17, 0xFF	; 255
		// make the bootloade LED pulse up and down
		if (brightness == 255) {
		  pulsedirection = -1;
		}
		if ((brightness == 0) && (pulsedirection != 1)) {
		  pulsedirection = 1;
    771e:	80 91 8e 01 	lds	r24, 0x018E
		  BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED);
		}

		// make the bootloade LED pulse up and down
		if (brightness == 255) {
		  pulsedirection = -1;
    7722:	85 30       	cpi	r24, 0x05	; 5
		  // each full pulse takes about one second
		  boottimeout++;
		} 
		
		// we took a long time, lets restart
		if (boottimeout >= BOOTLOADTIMEOUT) {
    7724:	08 f3       	brcs	.-62     	; 0x76e8 <main+0x42>
    7726:	f7 01       	movw	r30, r14
    7728:	85 91       	lpm	r24, Z+
    772a:	94 91       	lpm	r25, Z
		  // check to see if we have any code loaded. if the first byte is blank, we shouldn't go
		  if (pgm_read_word_near(0) != 0xFFFF) {
    772c:	01 96       	adiw	r24, 0x01	; 1
    772e:	e1 f2       	breq	.-72     	; 0x76e8 <main+0x42>
    7730:	10 92 00 01 	sts	0x0100, r1
    7734:	d9 cf       	rjmp	.-78     	; 0x76e8 <main+0x42>
		    // jump to code
		    RunBootloader = false;
    7736:	80 91 e0 00 	lds	r24, 0x00E0
    773a:	81 60       	ori	r24, 0x01	; 1
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    773c:	80 93 e0 00 	sts	0x00E0, r24
    7740:	9c e0       	ldi	r25, 0x0C	; 12
    7742:	88 e1       	ldi	r24, 0x18	; 24
    7744:	0f b6       	in	r0, 0x3f	; 63
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    7746:	f8 94       	cli
    7748:	a8 95       	wdr
    774a:	80 93 60 00 	sts	0x0060, r24
    774e:	0f be       	out	0x3f, r0	; 63
    7750:	90 93 60 00 	sts	0x0060, r25
    7754:	ff cf       	rjmp	.-2      	; 0x7754 <main+0xae>

00007756 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    7756:	29 2f       	mov	r18, r25
    7758:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    775a:	22 30       	cpi	r18, 0x02	; 2
    775c:	31 05       	cpc	r19, r1
    775e:	59 f0       	breq	.+22     	; 0x7776 <CALLBACK_USB_GetDescriptor+0x20>
    7760:	23 30       	cpi	r18, 0x03	; 3
    7762:	31 05       	cpc	r19, r1
    7764:	69 f0       	breq	.+26     	; 0x7780 <CALLBACK_USB_GetDescriptor+0x2a>
    7766:	21 30       	cpi	r18, 0x01	; 1
    7768:	31 05       	cpc	r19, r1
    776a:	c1 f4       	brne	.+48     	; 0x779c <CALLBACK_USB_GetDescriptor+0x46>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    776c:	82 e1       	ldi	r24, 0x12	; 18
    776e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    7770:	22 e7       	ldi	r18, 0x72	; 114
    7772:	31 e0       	ldi	r19, 0x01	; 1
    7774:	17 c0       	rjmp	.+46     	; 0x77a4 <CALLBACK_USB_GetDescriptor+0x4e>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7776:	8e e3       	ldi	r24, 0x3E	; 62
    7778:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    777a:	24 e3       	ldi	r18, 0x34	; 52
    777c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    777e:	12 c0       	rjmp	.+36     	; 0x77a4 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7780:	81 11       	cpse	r24, r1
    7782:	06 c0       	rjmp	.+12     	; 0x7790 <CALLBACK_USB_GetDescriptor+0x3a>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    7784:	80 91 30 01 	lds	r24, 0x0130
    7788:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    778a:	20 e3       	ldi	r18, 0x30	; 48
    778c:	31 e0       	ldi	r19, 0x01	; 1
    778e:	0a c0       	rjmp	.+20     	; 0x77a4 <CALLBACK_USB_GetDescriptor+0x4e>
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    7790:	80 91 08 01 	lds	r24, 0x0108
    7794:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
    7796:	28 e0       	ldi	r18, 0x08	; 8
    7798:	31 e0       	ldi	r19, 0x01	; 1
    779a:	04 c0       	rjmp	.+8      	; 0x77a4 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    779c:	80 e0       	ldi	r24, 0x00	; 0
    779e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    77a0:	20 e0       	ldi	r18, 0x00	; 0
    77a2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    77a4:	fa 01       	movw	r30, r20
    77a6:	31 83       	std	Z+1, r19	; 0x01
    77a8:	20 83       	st	Z, r18
	return Size;
}
    77aa:	08 95       	ret

000077ac <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    77ac:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    77b0:	eb ee       	ldi	r30, 0xEB	; 235
    77b2:	f0 e0       	ldi	r31, 0x00	; 0
    77b4:	80 81       	ld	r24, Z
    77b6:	81 60       	ori	r24, 0x01	; 1
    77b8:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    77ba:	ed ee       	ldi	r30, 0xED	; 237
    77bc:	f0 e0       	ldi	r31, 0x00	; 0
    77be:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    77c0:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    77c4:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    77c6:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
    77ca:	88 1f       	adc	r24, r24
    77cc:	88 27       	eor	r24, r24
    77ce:	88 1f       	adc	r24, r24
    77d0:	08 95       	ret

000077d2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    77d2:	80 91 95 01 	lds	r24, 0x0195
    77d6:	87 ff       	sbrs	r24, 7
    77d8:	0f c0       	rjmp	.+30     	; 0x77f8 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    77da:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    77de:	82 fd       	sbrc	r24, 2
    77e0:	04 c0       	rjmp	.+8      	; 0x77ea <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    77e2:	8e b3       	in	r24, 0x1e	; 30
    77e4:	81 11       	cpse	r24, r1
    77e6:	f9 cf       	rjmp	.-14     	; 0x77da <Endpoint_ClearStatusStage+0x8>
    77e8:	10 c0       	rjmp	.+32     	; 0x780a <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    77ea:	80 91 e8 00 	lds	r24, 0x00E8
    77ee:	8b 77       	andi	r24, 0x7B	; 123
    77f0:	0a c0       	rjmp	.+20     	; 0x7806 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    77f2:	8e b3       	in	r24, 0x1e	; 30
    77f4:	88 23       	and	r24, r24
    77f6:	49 f0       	breq	.+18     	; 0x780a <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    77f8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    77fc:	80 ff       	sbrs	r24, 0
    77fe:	f9 cf       	rjmp	.-14     	; 0x77f2 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7800:	80 91 e8 00 	lds	r24, 0x00E8
    7804:	8e 77       	andi	r24, 0x7E	; 126
    7806:	80 93 e8 00 	sts	0x00E8, r24
    780a:	08 95       	ret

0000780c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    780c:	4d d0       	rcall	.+154    	; 0x78a8 <USB_INT_DisableAllInterrupts>
    780e:	54 d0       	rcall	.+168    	; 0x78b8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7810:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    7814:	98 2f       	mov	r25, r24
    7816:	9f 77       	andi	r25, 0x7F	; 127

				USBCON = (Temp & ~(1 << USBE));
    7818:	90 93 d8 00 	sts	0x00D8, r25
    781c:	80 68       	ori	r24, 0x80	; 128
    781e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
    7822:	8a e4       	ldi	r24, 0x4A	; 74
    7824:	82 bf       	out	0x32, r24	; 50
	USB_Controller_Reset();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7826:	80 e1       	ldi	r24, 0x10	; 16
    7828:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    782a:	89 b5       	in	r24, 0x29	; 41
    782c:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
    782e:	89 bd       	out	0x29, r24	; 41
    7830:	09 b4       	in	r0, 0x29	; 41
    7832:	00 fe       	sbrs	r0, 0
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    7834:	fd cf       	rjmp	.-6      	; 0x7830 <USB_ResetInterface+0x24>
    7836:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    783a:	8f 7d       	andi	r24, 0xDF	; 223
    783c:	80 93 d8 00 	sts	0x00D8, r24
    7840:	1e ba       	out	0x1e, r1	; 30
    7842:	10 92 93 01 	sts	0x0193, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
    7846:	80 91 e0 00 	lds	r24, 0x00E0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    784a:	8b 7f       	andi	r24, 0xFB	; 251
    784c:	80 93 e0 00 	sts	0x00E0, r24
    7850:	80 91 d8 00 	lds	r24, 0x00D8
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
    7854:	81 60       	ori	r24, 0x01	; 1
    7856:	80 93 d8 00 	sts	0x00D8, r24
    785a:	42 e0       	ldi	r20, 0x02	; 2
    785c:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    785e:	80 e0       	ldi	r24, 0x00	; 0
    7860:	a5 df       	rcall	.-182    	; 0x77ac <Endpoint_ConfigureEndpoint_Prv>
    7862:	80 91 e1 00 	lds	r24, 0x00E1
    7866:	8e 7f       	andi	r24, 0xFE	; 254

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
    7868:	80 93 e1 00 	sts	0x00E1, r24
    786c:	80 91 e2 00 	lds	r24, 0x00E2
    7870:	81 60       	ori	r24, 0x01	; 1
	USB_INT_Enable(USB_INT_SUSPI);
    7872:	80 93 e2 00 	sts	0x00E2, r24
    7876:	80 91 e2 00 	lds	r24, 0x00E2
    787a:	88 60       	ori	r24, 0x08	; 8
	USB_INT_Enable(USB_INT_EORSTI);
    787c:	80 93 e2 00 	sts	0x00E2, r24
    7880:	80 91 e0 00 	lds	r24, 0x00E0
    7884:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7886:	80 93 e0 00 	sts	0x00E0, r24
    788a:	80 91 d8 00 	lds	r24, 0x00D8
    788e:	80 61       	ori	r24, 0x10	; 16

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7890:	80 93 d8 00 	sts	0x00D8, r24
    7894:	08 95       	ret

00007896 <USB_Init>:
    7896:	e7 ed       	ldi	r30, 0xD7	; 215
    7898:	f0 e0       	ldi	r31, 0x00	; 0
    789a:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    789c:	81 60       	ori	r24, 0x01	; 1
    789e:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    78a0:	81 e0       	ldi	r24, 0x01	; 1
    78a2:	80 93 94 01 	sts	0x0194, r24

	USB_ResetInterface();
    78a6:	b2 cf       	rjmp	.-156    	; 0x780c <USB_ResetInterface>

000078a8 <USB_INT_DisableAllInterrupts>:
    78a8:	e8 ed       	ldi	r30, 0xD8	; 216
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    78aa:	f0 e0       	ldi	r31, 0x00	; 0
    78ac:	80 81       	ld	r24, Z
    78ae:	8e 7f       	andi	r24, 0xFE	; 254
    78b0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    78b2:	10 92 e2 00 	sts	0x00E2, r1
    78b6:	08 95       	ret

000078b8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    78b8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    78bc:	10 92 e1 00 	sts	0x00E1, r1
    78c0:	08 95       	ret

000078c2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    78c2:	1f 92       	push	r1
    78c4:	0f 92       	push	r0
    78c6:	0f b6       	in	r0, 0x3f	; 63
    78c8:	0f 92       	push	r0
    78ca:	11 24       	eor	r1, r1
    78cc:	2f 93       	push	r18
    78ce:	3f 93       	push	r19
    78d0:	4f 93       	push	r20
    78d2:	5f 93       	push	r21
    78d4:	6f 93       	push	r22
    78d6:	7f 93       	push	r23
    78d8:	8f 93       	push	r24
    78da:	9f 93       	push	r25
    78dc:	af 93       	push	r26
    78de:	bf 93       	push	r27
    78e0:	ef 93       	push	r30
    78e2:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    78e4:	80 91 da 00 	lds	r24, 0x00DA
    78e8:	80 ff       	sbrs	r24, 0
    78ea:	13 c0       	rjmp	.+38     	; 0x7912 <__vector_10+0x50>
    78ec:	80 91 d8 00 	lds	r24, 0x00D8
    78f0:	80 ff       	sbrs	r24, 0
    78f2:	0f c0       	rjmp	.+30     	; 0x7912 <__vector_10+0x50>
	{
		USB_INT_Clear(USB_INT_VBUS);
    78f4:	80 91 da 00 	lds	r24, 0x00DA
    78f8:	8e 7f       	andi	r24, 0xFE	; 254
    78fa:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    78fe:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
    7902:	80 ff       	sbrs	r24, 0
    7904:	04 c0       	rjmp	.+8      	; 0x790e <__vector_10+0x4c>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    7906:	81 e0       	ldi	r24, 0x01	; 1
    7908:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    790a:	94 d1       	rcall	.+808    	; 0x7c34 <USB_Event_Stub>
    790c:	02 c0       	rjmp	.+4      	; 0x7912 <__vector_10+0x50>
    790e:	1e ba       	out	0x1e, r1	; 30
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
    7910:	91 d1       	rcall	.+802    	; 0x7c34 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7912:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7916:	80 ff       	sbrs	r24, 0
    7918:	1c c0       	rjmp	.+56     	; 0x7952 <__vector_10+0x90>
    791a:	80 91 e2 00 	lds	r24, 0x00E2
    791e:	80 ff       	sbrs	r24, 0
    7920:	18 c0       	rjmp	.+48     	; 0x7952 <__vector_10+0x90>
    7922:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_SUSPI);
    7926:	8e 7f       	andi	r24, 0xFE	; 254
    7928:	80 93 e1 00 	sts	0x00E1, r24
    792c:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_SUSPI);
    7930:	8e 7f       	andi	r24, 0xFE	; 254
    7932:	80 93 e2 00 	sts	0x00E2, r24
    7936:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUPI);
    793a:	80 61       	ori	r24, 0x10	; 16
    793c:	80 93 e2 00 	sts	0x00E2, r24
    7940:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7944:	80 62       	ori	r24, 0x20	; 32
    7946:	80 93 d8 00 	sts	0x00D8, r24
    794a:	19 bc       	out	0x29, r1	; 41
    794c:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    794e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7950:	71 d1       	rcall	.+738    	; 0x7c34 <USB_Event_Stub>
    7952:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7956:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7958:	2d c0       	rjmp	.+90     	; 0x79b4 <__vector_10+0xf2>
    795a:	80 91 e2 00 	lds	r24, 0x00E2
    795e:	84 ff       	sbrs	r24, 4
    7960:	29 c0       	rjmp	.+82     	; 0x79b4 <__vector_10+0xf2>
    7962:	80 e1       	ldi	r24, 0x10	; 16
    7964:	89 bd       	out	0x29, r24	; 41
    7966:	89 b5       	in	r24, 0x29	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    7968:	82 60       	ori	r24, 0x02	; 2
    796a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    796c:	09 b4       	in	r0, 0x29	; 41
    796e:	00 fe       	sbrs	r0, 0
    7970:	fd cf       	rjmp	.-6      	; 0x796c <__vector_10+0xaa>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7972:	80 91 d8 00 	lds	r24, 0x00D8
    7976:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7978:	80 93 d8 00 	sts	0x00D8, r24
    797c:	80 91 e1 00 	lds	r24, 0x00E1
    7980:	8f 7e       	andi	r24, 0xEF	; 239
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    7982:	80 93 e1 00 	sts	0x00E1, r24
    7986:	80 91 e2 00 	lds	r24, 0x00E2
    798a:	8f 7e       	andi	r24, 0xEF	; 239

		USB_INT_Disable(USB_INT_WAKEUPI);
    798c:	80 93 e2 00 	sts	0x00E2, r24
    7990:	80 91 e2 00 	lds	r24, 0x00E2
    7994:	81 60       	ori	r24, 0x01	; 1
		USB_INT_Enable(USB_INT_SUSPI);
    7996:	80 93 e2 00 	sts	0x00E2, r24
    799a:	80 91 93 01 	lds	r24, 0x0193
    799e:	81 11       	cpse	r24, r1

		if (USB_ConfigurationNumber)
    79a0:	06 c0       	rjmp	.+12     	; 0x79ae <__vector_10+0xec>
    79a2:	80 91 e3 00 	lds	r24, 0x00E3
    79a6:	87 fd       	sbrc	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    79a8:	02 c0       	rjmp	.+4      	; 0x79ae <__vector_10+0xec>
    79aa:	81 e0       	ldi	r24, 0x01	; 1
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    79ac:	01 c0       	rjmp	.+2      	; 0x79b0 <__vector_10+0xee>
    79ae:	84 e0       	ldi	r24, 0x04	; 4
    79b0:	8e bb       	out	0x1e, r24	; 30
    79b2:	40 d1       	rcall	.+640    	; 0x7c34 <USB_Event_Stub>
    79b4:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    79b8:	83 ff       	sbrs	r24, 3
    79ba:	21 c0       	rjmp	.+66     	; 0x79fe <__vector_10+0x13c>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    79bc:	80 91 e2 00 	lds	r24, 0x00E2
    79c0:	83 ff       	sbrs	r24, 3
    79c2:	1d c0       	rjmp	.+58     	; 0x79fe <__vector_10+0x13c>
    79c4:	80 91 e1 00 	lds	r24, 0x00E1
    79c8:	87 7f       	andi	r24, 0xF7	; 247
    79ca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);
    79ce:	82 e0       	ldi	r24, 0x02	; 2
    79d0:	8e bb       	out	0x1e, r24	; 30
    79d2:	10 92 93 01 	sts	0x0193, r1

		USB_DeviceState         = DEVICE_STATE_Default;
    79d6:	80 91 e1 00 	lds	r24, 0x00E1
		USB_ConfigurationNumber = 0;
    79da:	8e 7f       	andi	r24, 0xFE	; 254
    79dc:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Clear(USB_INT_SUSPI);
    79e0:	80 91 e2 00 	lds	r24, 0x00E2
    79e4:	8e 7f       	andi	r24, 0xFE	; 254
    79e6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Disable(USB_INT_SUSPI);
    79ea:	80 91 e2 00 	lds	r24, 0x00E2
    79ee:	80 61       	ori	r24, 0x10	; 16
    79f0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    79f4:	42 e0       	ldi	r20, 0x02	; 2
    79f6:	60 e0       	ldi	r22, 0x00	; 0
    79f8:	80 e0       	ldi	r24, 0x00	; 0
    79fa:	d8 de       	rcall	.-592    	; 0x77ac <Endpoint_ConfigureEndpoint_Prv>
    79fc:	1b d1       	rcall	.+566    	; 0x7c34 <USB_Event_Stub>
    79fe:	80 91 e1 00 	lds	r24, 0x00E1
    7a02:	82 ff       	sbrs	r24, 2
    7a04:	0a c0       	rjmp	.+20     	; 0x7a1a <__vector_10+0x158>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7a06:	80 91 e2 00 	lds	r24, 0x00E2
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    7a0a:	82 ff       	sbrs	r24, 2
    7a0c:	06 c0       	rjmp	.+12     	; 0x7a1a <__vector_10+0x158>
    7a0e:	80 91 e1 00 	lds	r24, 0x00E1
    7a12:	8b 7f       	andi	r24, 0xFB	; 251
    7a14:	80 93 e1 00 	sts	0x00E1, r24
    7a18:	0d d1       	rcall	.+538    	; 0x7c34 <USB_Event_Stub>
	{
		USB_INT_Clear(USB_INT_SOFI);
    7a1a:	ff 91       	pop	r31
    7a1c:	ef 91       	pop	r30
    7a1e:	bf 91       	pop	r27
    7a20:	af 91       	pop	r26
    7a22:	9f 91       	pop	r25

		EVENT_USB_Device_StartOfFrame();
    7a24:	8f 91       	pop	r24
    7a26:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7a28:	6f 91       	pop	r22
    7a2a:	5f 91       	pop	r21
    7a2c:	4f 91       	pop	r20
    7a2e:	3f 91       	pop	r19
    7a30:	2f 91       	pop	r18
    7a32:	0f 90       	pop	r0
    7a34:	0f be       	out	0x3f, r0	; 63
    7a36:	0f 90       	pop	r0
    7a38:	1f 90       	pop	r1
    7a3a:	18 95       	reti

00007a3c <USB_Device_ProcessControlRequest>:
    7a3c:	0f 93       	push	r16
    7a3e:	1f 93       	push	r17
    7a40:	cf 93       	push	r28
    7a42:	df 93       	push	r29
    7a44:	00 d0       	rcall	.+0      	; 0x7a46 <USB_Device_ProcessControlRequest+0xa>
    7a46:	cd b7       	in	r28, 0x3d	; 61
    7a48:	de b7       	in	r29, 0x3e	; 62
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7a4a:	e5 e9       	ldi	r30, 0x95	; 149
    7a4c:	f1 e0       	ldi	r31, 0x01	; 1
    7a4e:	88 e0       	ldi	r24, 0x08	; 8
    7a50:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    7a52:	90 91 f1 00 	lds	r25, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    7a56:	91 93       	st	Z+, r25
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7a58:	8e 13       	cpse	r24, r30
    7a5a:	fb cf       	rjmp	.-10     	; 0x7a52 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7a5c:	80 91 95 01 	lds	r24, 0x0195

	switch (USB_ControlRequest.bRequest)
    7a60:	90 91 96 01 	lds	r25, 0x0196
    7a64:	49 2f       	mov	r20, r25
    7a66:	50 e0       	ldi	r21, 0x00	; 0
    7a68:	4a 30       	cpi	r20, 0x0A	; 10
    7a6a:	51 05       	cpc	r21, r1
    7a6c:	08 f0       	brcs	.+2      	; 0x7a70 <USB_Device_ProcessControlRequest+0x34>
    7a6e:	d9 c0       	rjmp	.+434    	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
    7a70:	fa 01       	movw	r30, r20
    7a72:	ea 5a       	subi	r30, 0xAA	; 170
    7a74:	f7 4c       	sbci	r31, 0xC7	; 199
    7a76:	88 c1       	rjmp	.+784    	; 0x7d88 <__tablejump2__>
    7a78:	80 38       	cpi	r24, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7a7a:	09 f4       	brne	.+2      	; 0x7a7e <USB_Device_ProcessControlRequest+0x42>
    7a7c:	c3 c0       	rjmp	.+390    	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7a7e:	82 38       	cpi	r24, 0x82	; 130
    7a80:	09 f0       	breq	.+2      	; 0x7a84 <USB_Device_ProcessControlRequest+0x48>
    7a82:	cf c0       	rjmp	.+414    	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
    7a84:	80 91 99 01 	lds	r24, 0x0199
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7a88:	87 70       	andi	r24, 0x07	; 7
    7a8a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7a8e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7a92:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7a96:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7a9a:	97 7f       	andi	r25, 0xF7	; 247
    7a9c:	90 93 e8 00 	sts	0x00E8, r25
    7aa0:	85 fb       	bst	r24, 5
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7aa2:	88 27       	eor	r24, r24
    7aa4:	80 f9       	bld	r24, 0
    7aa6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    7aaa:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
    7aae:	88 c0       	rjmp	.+272    	; 0x7bc0 <USB_Device_ProcessControlRequest+0x184>
    7ab0:	28 2f       	mov	r18, r24
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7ab2:	2d 7f       	andi	r18, 0xFD	; 253
    7ab4:	09 f0       	breq	.+2      	; 0x7ab8 <USB_Device_ProcessControlRequest+0x7c>
    7ab6:	b5 c0       	rjmp	.+362    	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
    7ab8:	82 30       	cpi	r24, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7aba:	09 f0       	breq	.+2      	; 0x7abe <USB_Device_ProcessControlRequest+0x82>
    7abc:	a3 c0       	rjmp	.+326    	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7abe:	80 91 97 01 	lds	r24, 0x0197

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
    7ac2:	81 11       	cpse	r24, r1
    7ac4:	27 c0       	rjmp	.+78     	; 0x7b14 <USB_Device_ProcessControlRequest+0xd8>
    7ac6:	80 91 99 01 	lds	r24, 0x0199
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7aca:	87 70       	andi	r24, 0x07	; 7
    7acc:	09 f4       	brne	.+2      	; 0x7ad0 <USB_Device_ProcessControlRequest+0x94>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7ace:	9a c0       	rjmp	.+308    	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7ad0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ad4:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7ad8:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7ada:	1c c0       	rjmp	.+56     	; 0x7b14 <USB_Device_ProcessControlRequest+0xd8>
    7adc:	93 30       	cpi	r25, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7ade:	21 f4       	brne	.+8      	; 0x7ae8 <USB_Device_ProcessControlRequest+0xac>
    7ae0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7ae4:	80 62       	ori	r24, 0x20	; 32
    7ae6:	14 c0       	rjmp	.+40     	; 0x7b10 <USB_Device_ProcessControlRequest+0xd4>
    7ae8:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7aec:	90 61       	ori	r25, 0x10	; 16
    7aee:	90 93 eb 00 	sts	0x00EB, r25
    7af2:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7af4:	30 e0       	ldi	r19, 0x00	; 0
    7af6:	a9 01       	movw	r20, r18
    7af8:	02 c0       	rjmp	.+4      	; 0x7afe <USB_Device_ProcessControlRequest+0xc2>
    7afa:	44 0f       	add	r20, r20
    7afc:	55 1f       	adc	r21, r21
    7afe:	8a 95       	dec	r24
    7b00:	e2 f7       	brpl	.-8      	; 0x7afa <USB_Device_ProcessControlRequest+0xbe>
    7b02:	40 93 ea 00 	sts	0x00EA, r20
    7b06:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    7b0a:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7b0e:	88 60       	ori	r24, 0x08	; 8
    7b10:	80 93 eb 00 	sts	0x00EB, r24
    7b14:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7b18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7b1c:	87 7f       	andi	r24, 0xF7	; 247
    7b1e:	53 c0       	rjmp	.+166    	; 0x7bc6 <USB_Device_ProcessControlRequest+0x18a>
    7b20:	81 11       	cpse	r24, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7b22:	7f c0       	rjmp	.+254    	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
    7b24:	80 91 97 01 	lds	r24, 0x0197
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7b28:	18 2f       	mov	r17, r24
    7b2a:	1f 77       	andi	r17, 0x7F	; 127
    7b2c:	0f b7       	in	r16, 0x3f	; 63

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7b2e:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7b30:	80 91 e8 00 	lds	r24, 0x00E8
    7b34:	87 7f       	andi	r24, 0xF7	; 247
    7b36:	80 93 e8 00 	sts	0x00E8, r24
    7b3a:	4b de       	rcall	.-874    	; 0x77d2 <Endpoint_ClearStatusStage>
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    7b3c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b40:	80 ff       	sbrs	r24, 0
    7b42:	fc cf       	rjmp	.-8      	; 0x7b3c <USB_Device_ProcessControlRequest+0x100>

		while (!(Endpoint_IsINReady()));
    7b44:	11 11       	cpse	r17, r1
    7b46:	02 c0       	rjmp	.+4      	; 0x7b4c <USB_Device_ProcessControlRequest+0x110>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7b48:	82 e0       	ldi	r24, 0x02	; 2
    7b4a:	01 c0       	rjmp	.+2      	; 0x7b4e <USB_Device_ProcessControlRequest+0x112>
    7b4c:	83 e0       	ldi	r24, 0x03	; 3
    7b4e:	8e bb       	out	0x1e, r24	; 30
    7b50:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    7b54:	80 78       	andi	r24, 0x80	; 128
    7b56:	81 2b       	or	r24, r17
    7b58:	80 93 e3 00 	sts	0x00E3, r24
    7b5c:	80 91 e3 00 	lds	r24, 0x00E3
				UDADDR |= (1 << ADDEN);
    7b60:	80 68       	ori	r24, 0x80	; 128
    7b62:	80 93 e3 00 	sts	0x00E3, r24
    7b66:	0f bf       	out	0x3f, r16	; 63
    7b68:	4d c0       	rjmp	.+154    	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7b6a:	80 58       	subi	r24, 0x80	; 128
    __asm__ volatile ("" ::: "memory");
    7b6c:	82 30       	cpi	r24, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7b6e:	08 f0       	brcs	.+2      	; 0x7b72 <USB_Device_ProcessControlRequest+0x136>
    7b70:	58 c0       	rjmp	.+176    	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
    7b72:	ae 01       	movw	r20, r28
    7b74:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7b76:	5f 4f       	sbci	r21, 0xFF	; 255
    7b78:	60 91 99 01 	lds	r22, 0x0199
    7b7c:	80 91 97 01 	lds	r24, 0x0197
    7b80:	90 91 98 01 	lds	r25, 0x0198
    7b84:	e8 dd       	rcall	.-1072   	; 0x7756 <CALLBACK_USB_GetDescriptor>
    7b86:	bc 01       	movw	r22, r24
    7b88:	89 2b       	or	r24, r25
    7b8a:	09 f4       	brne	.+2      	; 0x7b8e <USB_Device_ProcessControlRequest+0x152>
    7b8c:	3b c0       	rjmp	.+118    	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7b8e:	90 91 e8 00 	lds	r25, 0x00E8
    7b92:	97 7f       	andi	r25, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7b94:	90 93 e8 00 	sts	0x00E8, r25
    7b98:	89 81       	ldd	r24, Y+1	; 0x01
    7b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    7b9c:	4c d0       	rcall	.+152    	; 0x7c36 <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7b9e:	80 91 e8 00 	lds	r24, 0x00E8
    7ba2:	8b 77       	andi	r24, 0x7B	; 123
    7ba4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7ba8:	2d c0       	rjmp	.+90     	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7baa:	80 38       	cpi	r24, 0x80	; 128
    7bac:	d1 f5       	brne	.+116    	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
    7bae:	80 91 e8 00 	lds	r24, 0x00E8
				RequestHandled = true;
			}

			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7bb2:	87 7f       	andi	r24, 0xF7	; 247
    7bb4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7bb8:	80 91 93 01 	lds	r24, 0x0193
    7bbc:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    7bc0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    7bc4:	8e 77       	andi	r24, 0x7E	; 126
    7bc6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7bca:	03 de       	rcall	.-1018   	; 0x77d2 <Endpoint_ClearStatusStage>
    7bcc:	1b c0       	rjmp	.+54     	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7bce:	81 11       	cpse	r24, r1
    7bd0:	28 c0       	rjmp	.+80     	; 0x7c22 <USB_Device_ProcessControlRequest+0x1e6>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7bd2:	90 91 97 01 	lds	r25, 0x0197
    7bd6:	92 30       	cpi	r25, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7bd8:	a8 f4       	brcc	.+42     	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7bda:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7bde:	87 7f       	andi	r24, 0xF7	; 247
    7be0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7be4:	90 93 93 01 	sts	0x0193, r25
    7be8:	f4 dd       	rcall	.-1048   	; 0x77d2 <Endpoint_ClearStatusStage>
    7bea:	80 91 93 01 	lds	r24, 0x0193
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7bee:	81 11       	cpse	r24, r1
    7bf0:	06 c0       	rjmp	.+12     	; 0x7bfe <USB_Device_ProcessControlRequest+0x1c2>

	Endpoint_ClearStatusStage();
    7bf2:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_ConfigurationNumber)
    7bf6:	87 fd       	sbrc	r24, 7
    7bf8:	02 c0       	rjmp	.+4      	; 0x7bfe <USB_Device_ProcessControlRequest+0x1c2>
    7bfa:	81 e0       	ldi	r24, 0x01	; 1
    7bfc:	01 c0       	rjmp	.+2      	; 0x7c00 <USB_Device_ProcessControlRequest+0x1c4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7bfe:	84 e0       	ldi	r24, 0x04	; 4
    7c00:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7c02:	c4 da       	rcall	.-2680   	; 0x718c <EVENT_USB_Device_ConfigurationChanged>
    7c04:	80 91 e8 00 	lds	r24, 0x00E8
    7c08:	83 ff       	sbrs	r24, 3
    7c0a:	0d c0       	rjmp	.+26     	; 0x7c26 <USB_Device_ProcessControlRequest+0x1ea>
    7c0c:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    7c10:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c12:	80 93 eb 00 	sts	0x00EB, r24
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();

	if (Endpoint_IsSETUPReceived())
    7c16:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7c1a:	87 7f       	andi	r24, 0xF7	; 247
    7c1c:	80 93 e8 00 	sts	0x00E8, r24
    7c20:	02 c0       	rjmp	.+4      	; 0x7c26 <USB_Device_ProcessControlRequest+0x1ea>
    7c22:	c0 da       	rcall	.-2688   	; 0x71a4 <EVENT_USB_Device_UnhandledControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c24:	ef cf       	rjmp	.-34     	; 0x7c04 <USB_Device_ProcessControlRequest+0x1c8>
    7c26:	0f 90       	pop	r0
    7c28:	0f 90       	pop	r0
    7c2a:	df 91       	pop	r29
    7c2c:	cf 91       	pop	r28
    7c2e:	1f 91       	pop	r17

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
    7c30:	0f 91       	pop	r16
    7c32:	08 95       	ret

00007c34 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7c34:	08 95       	ret

00007c36 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7c36:	20 91 9b 01 	lds	r18, 0x019B
    7c3a:	30 91 9c 01 	lds	r19, 0x019C
    7c3e:	26 17       	cp	r18, r22
    7c40:	37 07       	cpc	r19, r23
    7c42:	48 f0       	brcs	.+18     	; 0x7c56 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7c44:	61 15       	cp	r22, r1
    7c46:	71 05       	cpc	r23, r1
    7c48:	39 f4       	brne	.+14     	; 0x7c58 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c4a:	20 91 e8 00 	lds	r18, 0x00E8
    7c4e:	2e 77       	andi	r18, 0x7E	; 126
    7c50:	20 93 e8 00 	sts	0x00E8, r18
    7c54:	01 c0       	rjmp	.+2      	; 0x7c58 <Endpoint_Write_Control_Stream_LE+0x22>
    7c56:	b9 01       	movw	r22, r18
    7c58:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7c5a:	61 15       	cp	r22, r1
    7c5c:	71 05       	cpc	r23, r1
    7c5e:	a1 f1       	breq	.+104    	; 0x7cc8 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c60:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c62:	22 23       	and	r18, r18
    7c64:	09 f4       	brne	.+2      	; 0x7c68 <Endpoint_Write_Control_Stream_LE+0x32>
    7c66:	40 c0       	rjmp	.+128    	; 0x7ce8 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c68:	25 30       	cpi	r18, 0x05	; 5
    7c6a:	09 f4       	brne	.+2      	; 0x7c6e <Endpoint_Write_Control_Stream_LE+0x38>
    7c6c:	3f c0       	rjmp	.+126    	; 0x7cec <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c6e:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7c72:	23 fd       	sbrc	r18, 3
    7c74:	37 c0       	rjmp	.+110    	; 0x7ce4 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7c76:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7c7a:	22 fd       	sbrc	r18, 2
    7c7c:	2d c0       	rjmp	.+90     	; 0x7cd8 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7c7e:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7c82:	20 ff       	sbrs	r18, 0
    7c84:	ea cf       	rjmp	.-44     	; 0x7c5a <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7c86:	40 91 f3 00 	lds	r20, 0x00F3
    7c8a:	20 91 f2 00 	lds	r18, 0x00F2
    7c8e:	30 e0       	ldi	r19, 0x00	; 0
    7c90:	34 2b       	or	r19, r20
    7c92:	fc 01       	movw	r30, r24
    7c94:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7c96:	61 15       	cp	r22, r1
    7c98:	71 05       	cpc	r23, r1
    7c9a:	59 f0       	breq	.+22     	; 0x7cb2 <Endpoint_Write_Control_Stream_LE+0x7c>
    7c9c:	28 30       	cpi	r18, 0x08	; 8
    7c9e:	31 05       	cpc	r19, r1
    7ca0:	40 f4       	brcc	.+16     	; 0x7cb2 <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7ca2:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    7ca4:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    7ca8:	61 50       	subi	r22, 0x01	; 1
    7caa:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    7cac:	2f 5f       	subi	r18, 0xFF	; 255
    7cae:	3f 4f       	sbci	r19, 0xFF	; 255
    7cb0:	f1 cf       	rjmp	.-30     	; 0x7c94 <Endpoint_Write_Control_Stream_LE+0x5e>
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    7cb2:	41 e0       	ldi	r20, 0x01	; 1
    7cb4:	28 30       	cpi	r18, 0x08	; 8
    7cb6:	31 05       	cpc	r19, r1
    7cb8:	09 f0       	breq	.+2      	; 0x7cbc <Endpoint_Write_Control_Stream_LE+0x86>
    7cba:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7cbc:	20 91 e8 00 	lds	r18, 0x00E8
    7cc0:	2e 77       	andi	r18, 0x7E	; 126
    7cc2:	20 93 e8 00 	sts	0x00E8, r18
    7cc6:	c9 cf       	rjmp	.-110    	; 0x7c5a <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7cc8:	41 11       	cpse	r20, r1
    7cca:	ca cf       	rjmp	.-108    	; 0x7c60 <Endpoint_Write_Control_Stream_LE+0x2a>
    7ccc:	05 c0       	rjmp	.+10     	; 0x7cd8 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7cce:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7cd0:	88 23       	and	r24, r24
    7cd2:	51 f0       	breq	.+20     	; 0x7ce8 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7cd4:	85 30       	cpi	r24, 0x05	; 5
    7cd6:	51 f0       	breq	.+20     	; 0x7cec <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7cd8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7cdc:	82 ff       	sbrs	r24, 2
    7cde:	f7 cf       	rjmp	.-18     	; 0x7cce <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7ce0:	80 e0       	ldi	r24, 0x00	; 0
    7ce2:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7ce4:	81 e0       	ldi	r24, 0x01	; 1
    7ce6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7ce8:	82 e0       	ldi	r24, 0x02	; 2
    7cea:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7cec:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7cee:	08 95       	ret

00007cf0 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7cf0:	61 15       	cp	r22, r1
    7cf2:	71 05       	cpc	r23, r1
    7cf4:	29 f4       	brne	.+10     	; 0x7d00 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7cf6:	20 91 e8 00 	lds	r18, 0x00E8
    7cfa:	2b 77       	andi	r18, 0x7B	; 123
    7cfc:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
    7d00:	61 15       	cp	r22, r1
    7d02:	71 05       	cpc	r23, r1
    7d04:	21 f1       	breq	.+72     	; 0x7d4e <Endpoint_Read_Control_Stream_LE+0x5e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7d06:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7d08:	22 23       	and	r18, r18
    7d0a:	49 f1       	breq	.+82     	; 0x7d5e <Endpoint_Read_Control_Stream_LE+0x6e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7d0c:	25 30       	cpi	r18, 0x05	; 5
    7d0e:	49 f1       	breq	.+82     	; 0x7d62 <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d10:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7d14:	23 fd       	sbrc	r18, 3
    7d16:	21 c0       	rjmp	.+66     	; 0x7d5a <Endpoint_Read_Control_Stream_LE+0x6a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7d18:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7d1c:	22 ff       	sbrs	r18, 2
    7d1e:	f0 cf       	rjmp	.-32     	; 0x7d00 <Endpoint_Read_Control_Stream_LE+0x10>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7d20:	40 91 f3 00 	lds	r20, 0x00F3
    7d24:	20 91 f2 00 	lds	r18, 0x00F2
    7d28:	30 e0       	ldi	r19, 0x00	; 0
    7d2a:	34 2b       	or	r19, r20
		{
			while (Length && Endpoint_BytesInEndpoint())
    7d2c:	23 2b       	or	r18, r19
    7d2e:	19 f3       	breq	.-58     	; 0x7cf6 <Endpoint_Read_Control_Stream_LE+0x6>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7d30:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    7d32:	20 91 f1 00 	lds	r18, 0x00F1
    7d36:	fc 01       	movw	r30, r24
    7d38:	31 97       	sbiw	r30, 0x01	; 1
    7d3a:	20 83       	st	Z, r18
				Length--;
    7d3c:	61 50       	subi	r22, 0x01	; 1
    7d3e:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7d40:	79 f7       	brne	.-34     	; 0x7d20 <Endpoint_Read_Control_Stream_LE+0x30>
    7d42:	d9 cf       	rjmp	.-78     	; 0x7cf6 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7d44:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7d46:	88 23       	and	r24, r24
    7d48:	51 f0       	breq	.+20     	; 0x7d5e <Endpoint_Read_Control_Stream_LE+0x6e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7d4a:	85 30       	cpi	r24, 0x05	; 5
    7d4c:	51 f0       	breq	.+20     	; 0x7d62 <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d4e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7d52:	80 ff       	sbrs	r24, 0
    7d54:	f7 cf       	rjmp	.-18     	; 0x7d44 <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7d56:	80 e0       	ldi	r24, 0x00	; 0
    7d58:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7d5a:	81 e0       	ldi	r24, 0x01	; 1
    7d5c:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7d5e:	82 e0       	ldi	r24, 0x02	; 2
    7d60:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7d62:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7d64:	08 95       	ret

00007d66 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7d66:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7d68:	8e b3       	in	r24, 0x1e	; 30
    7d6a:	88 23       	and	r24, r24
    7d6c:	59 f0       	breq	.+22     	; 0x7d84 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7d6e:	c0 91 e9 00 	lds	r28, 0x00E9
    7d72:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d74:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d78:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7d7c:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7d7e:	5e de       	rcall	.-836    	; 0x7a3c <USB_Device_ProcessControlRequest>
    7d80:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d84:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7d86:	08 95       	ret

00007d88 <__tablejump2__>:
    7d88:	ee 0f       	add	r30, r30
    7d8a:	ff 1f       	adc	r31, r31
    7d8c:	05 90       	lpm	r0, Z+
    7d8e:	f4 91       	lpm	r31, Z
    7d90:	e0 2d       	mov	r30, r0
    7d92:	09 94       	ijmp

00007d94 <eeprom_read_byte>:
    7d94:	f9 99       	sbic	0x1f, 1	; 31
    7d96:	fe cf       	rjmp	.-4      	; 0x7d94 <eeprom_read_byte>
    7d98:	92 bd       	out	0x22, r25	; 34
    7d9a:	81 bd       	out	0x21, r24	; 33
    7d9c:	f8 9a       	sbi	0x1f, 0	; 31
    7d9e:	99 27       	eor	r25, r25
    7da0:	80 b5       	in	r24, 0x20	; 32
    7da2:	08 95       	ret

00007da4 <eeprom_write_byte>:
    7da4:	26 2f       	mov	r18, r22

00007da6 <eeprom_write_r18>:
    7da6:	f9 99       	sbic	0x1f, 1	; 31
    7da8:	fe cf       	rjmp	.-4      	; 0x7da6 <eeprom_write_r18>
    7daa:	1f ba       	out	0x1f, r1	; 31
    7dac:	92 bd       	out	0x22, r25	; 34
    7dae:	81 bd       	out	0x21, r24	; 33
    7db0:	20 bd       	out	0x20, r18	; 32
    7db2:	0f b6       	in	r0, 0x3f	; 63
    7db4:	f8 94       	cli
    7db6:	fa 9a       	sbi	0x1f, 2	; 31
    7db8:	f9 9a       	sbi	0x1f, 1	; 31
    7dba:	0f be       	out	0x3f, r0	; 63
    7dbc:	01 96       	adiw	r24, 0x01	; 1
    7dbe:	08 95       	ret

00007dc0 <_exit>:
    7dc0:	f8 94       	cli

00007dc2 <__stop_program>:
    7dc2:	ff cf       	rjmp	.-2      	; 0x7dc2 <__stop_program>
