   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  12               	.global	CALLBACK_USB_GetDescriptor
  14               	CALLBACK_USB_GetDescriptor:
  15               	.LFB69:
  16               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = 0x00,
  51:Descriptors.c **** 	.SubClass               = 0x00,
  52:Descriptors.c **** 	.Protocol               = 0x00,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = 0x03EB,
  57:Descriptors.c **** 	.ProductID              = PRODUCT_ID_CODE,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.00),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = NO_DESCRIPTOR,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x01,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYP
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize   = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces          = 1,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber      = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex    = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes         = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption      = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.DFU_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 0,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = 0xFE,
  99:Descriptors.c **** 			.SubClass               = 0x01,
 100:Descriptors.c **** 			.Protocol               = 0x02,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.DFU_Functional =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_DFU_Functional_t), .Type = DTYPE_DFUFun
 108:Descriptors.c **** 
 109:Descriptors.c **** 			.Attributes             = (ATTR_CAN_UPLOAD | ATTR_CAN_DOWNLOAD),
 110:Descriptors.c **** 
 111:Descriptors.c **** 			.DetachTimeout          = 0x0000,
 112:Descriptors.c **** 			.TransferSize           = 0x0c00,
 113:Descriptors.c **** 
 114:Descriptors.c **** 			.DFUSpecification       = VERSION_BCD(01.01)
 115:Descriptors.c **** 		}
 116:Descriptors.c **** };
 117:Descriptors.c **** 
 118:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 119:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 120:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 121:Descriptors.c ****  */
 122:Descriptors.c **** USB_Descriptor_String_t LanguageString =
 123:Descriptors.c **** {
 124:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 125:Descriptors.c **** 
 126:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 127:Descriptors.c **** };
 128:Descriptors.c **** 
 129:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 130:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 131:Descriptors.c ****  *  Descriptor.
 132:Descriptors.c ****  */
 133:Descriptors.c **** USB_Descriptor_String_t ProductString =
 134:Descriptors.c **** {
 135:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(18), .Type = DTYPE_String},
 136:Descriptors.c **** 
 137:Descriptors.c **** 	.UnicodeString          = L"AVR DFU Bootloader"
 138:Descriptors.c **** };
 139:Descriptors.c **** 
 140:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 141:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 142:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 143:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 144:Descriptors.c ****  *  USB host.
 145:Descriptors.c ****  */
 146:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 147:Descriptors.c ****                                     const uint8_t wIndex,
 148:Descriptors.c ****                                     const void** const DescriptorAddress)
 149:Descriptors.c **** {
  17               		.loc 1 149 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 150:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  24               		.loc 1 150 0
  25 0000 292F      		mov r18,r25
  26 0002 30E0      		ldi r19,0
 151:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 152:Descriptors.c **** 
 153:Descriptors.c **** 	const void* Address = NULL;
 154:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 155:Descriptors.c **** 
 156:Descriptors.c **** 	switch (DescriptorType)
  27               		.loc 1 156 0
  28 0004 2230      		cpi r18,2
  29 0006 3105      		cpc r19,__zero_reg__
  30 0008 01F0      		breq .L3
  31 000a 2330      		cpi r18,3
  32 000c 3105      		cpc r19,__zero_reg__
  33 000e 01F0      		breq .L4
  34 0010 2130      		cpi r18,1
  35 0012 3105      		cpc r19,__zero_reg__
  36 0014 01F4      		brne .L8
 157:Descriptors.c **** 	{
 158:Descriptors.c **** 		case DTYPE_Device:
 159:Descriptors.c **** 			Address = &DeviceDescriptor;
 160:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  37               		.loc 1 160 0
  38 0016 82E1      		ldi r24,lo8(18)
  39 0018 90E0      		ldi r25,0
  40               	.LVL1:
 159:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  41               		.loc 1 159 0
  42 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  43 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  44 001e 00C0      		rjmp .L2
  45               	.LVL2:
  46               	.L3:
 161:Descriptors.c **** 			break;
 162:Descriptors.c **** 		case DTYPE_Configuration:
 163:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 164:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  47               		.loc 1 164 0
  48 0020 8BE1      		ldi r24,lo8(27)
  49 0022 90E0      		ldi r25,0
  50               	.LVL3:
 163:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  51               		.loc 1 163 0
  52 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  53 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
  54               	.LVL4:
 165:Descriptors.c **** 			break;
  55               		.loc 1 165 0
  56 0028 00C0      		rjmp .L2
  57               	.LVL5:
  58               	.L4:
 166:Descriptors.c **** 		case DTYPE_String:
 167:Descriptors.c **** 			if (!(DescriptorNumber))
  59               		.loc 1 167 0
  60 002a 8111      		cpse r24,__zero_reg__
  61 002c 00C0      		rjmp .L6
  62               	.LVL6:
 168:Descriptors.c **** 			{
 169:Descriptors.c **** 				Address = &LanguageString;
 170:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  63               		.loc 1 170 0
  64 002e 8091 0000 		lds r24,LanguageString
  65               	.LVL7:
  66 0032 90E0      		ldi r25,0
  67               	.LVL8:
 169:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  68               		.loc 1 169 0
  69 0034 20E0      		ldi r18,lo8(LanguageString)
  70 0036 30E0      		ldi r19,hi8(LanguageString)
  71               	.LVL9:
  72 0038 00C0      		rjmp .L2
  73               	.LVL10:
  74               	.L6:
 171:Descriptors.c **** 			}
 172:Descriptors.c **** 			else
 173:Descriptors.c **** 			{
 174:Descriptors.c **** 				Address = &ProductString;
 175:Descriptors.c **** 				Size    = ProductString.Header.Size;
  75               		.loc 1 175 0
  76 003a 8091 0000 		lds r24,ProductString
  77               	.LVL11:
  78 003e 90E0      		ldi r25,0
  79               	.LVL12:
 174:Descriptors.c **** 				Size    = ProductString.Header.Size;
  80               		.loc 1 174 0
  81 0040 20E0      		ldi r18,lo8(ProductString)
  82 0042 30E0      		ldi r19,hi8(ProductString)
  83               	.LVL13:
  84 0044 00C0      		rjmp .L2
  85               	.LVL14:
  86               	.L8:
 154:Descriptors.c **** 
  87               		.loc 1 154 0
  88 0046 80E0      		ldi r24,0
  89 0048 90E0      		ldi r25,0
  90               	.LVL15:
 153:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  91               		.loc 1 153 0
  92 004a 20E0      		ldi r18,0
  93 004c 30E0      		ldi r19,0
  94               	.LVL16:
  95               	.L2:
 176:Descriptors.c **** 			}
 177:Descriptors.c **** 
 178:Descriptors.c **** 			break;
 179:Descriptors.c **** 	}
 180:Descriptors.c **** 
 181:Descriptors.c **** 	*DescriptorAddress = Address;
  96               		.loc 1 181 0
  97 004e FA01      		movw r30,r20
  98 0050 3183      		std Z+1,r19
  99 0052 2083      		st Z,r18
 182:Descriptors.c **** 	return Size;
 183:Descriptors.c **** }
 100               		.loc 1 183 0
 101 0054 0895      		ret
 102               		.cfi_endproc
 103               	.LFE69:
 105               	.global	ProductString
 106               		.data
 109               	ProductString:
 110 0000 26        		.byte	38
 111 0001 03        		.byte	3
 112 0002 4100      		.string	"A"
 113 0004 5600      		.string	"V"
 114 0006 5200      		.string	"R"
 115 0008 2000      		.string	" "
 116 000a 4400      		.string	"D"
 117 000c 4600      		.string	"F"
 118 000e 5500      		.string	"U"
 119 0010 2000      		.string	" "
 120 0012 4200      		.string	"B"
 121 0014 6F00      		.string	"o"
 122 0016 6F00      		.string	"o"
 123 0018 7400      		.string	"t"
 124 001a 6C00      		.string	"l"
 125 001c 6F00      		.string	"o"
 126 001e 6100      		.string	"a"
 127 0020 6400      		.string	"d"
 128 0022 6500      		.string	"e"
 129 0024 7200      		.string	"r"
 130 0026 00        		.string	""
 131 0027 00        		.string	""
 132               	.global	LanguageString
 135               	LanguageString:
 136 0028 04        		.byte	4
 137 0029 03        		.byte	3
 138 002a 0904      		.word	1033
 139               	.global	ConfigurationDescriptor
 142               	ConfigurationDescriptor:
 143 002c 09        		.byte	9
 144 002d 02        		.byte	2
 145 002e 1B00      		.word	27
 146 0030 01        		.byte	1
 147 0031 01        		.byte	1
 148 0032 00        		.byte	0
 149 0033 80        		.byte	-128
 150 0034 32        		.byte	50
 151 0035 09        		.byte	9
 152 0036 04        		.byte	4
 153 0037 00        		.byte	0
 154 0038 00        		.byte	0
 155 0039 00        		.byte	0
 156 003a FE        		.byte	-2
 157 003b 01        		.byte	1
 158 003c 02        		.byte	2
 159 003d 00        		.byte	0
 160 003e 09        		.byte	9
 161 003f 21        		.byte	33
 162 0040 03        		.byte	3
 163 0041 0000      		.word	0
 164 0043 000C      		.word	3072
 165 0045 0001      		.word	256
 166               	.global	DeviceDescriptor
 169               	DeviceDescriptor:
 170 0047 12        		.byte	18
 171 0048 01        		.byte	1
 172 0049 1001      		.word	272
 173 004b 00        		.byte	0
 174 004c 00        		.byte	0
 175 004d 00        		.byte	0
 176 004e 20        		.byte	32
 177 004f EB03      		.word	1003
 178 0051 FB2F      		.word	12283
 179 0053 0000      		.word	0
 180 0055 00        		.byte	0
 181 0056 01        		.byte	1
 182 0057 00        		.byte	0
 183 0058 01        		.byte	1
 184               		.text
 185               	.Letext0:
 186               		.file 2 "/usr/lib/avr/include/stdint.h"
 187               		.file 3 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 188               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 189               		.file 5 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccLzS2VC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLzS2VC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLzS2VC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLzS2VC.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccLzS2VC.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLzS2VC.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLzS2VC.s:14     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccLzS2VC.s:169    .data:0000000000000047 DeviceDescriptor
     /tmp/ccLzS2VC.s:142    .data:000000000000002c ConfigurationDescriptor
     /tmp/ccLzS2VC.s:135    .data:0000000000000028 LanguageString
     /tmp/ccLzS2VC.s:109    .data:0000000000000000 ProductString

UNDEFINED SYMBOLS
__do_copy_data
